
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model UserRole
 * 
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model Child
 * 
 */
export type Child = $Result.DefaultSelection<Prisma.$ChildPayload>
/**
 * Model Family
 * 
 */
export type Family = $Result.DefaultSelection<Prisma.$FamilyPayload>
/**
 * Model YogaClass
 * 
 */
export type YogaClass = $Result.DefaultSelection<Prisma.$YogaClassPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model YogaChildStudent
 * 
 */
export type YogaChildStudent = $Result.DefaultSelection<Prisma.$YogaChildStudentPayload>
/**
 * Model YogaAdultStudent
 * 
 */
export type YogaAdultStudent = $Result.DefaultSelection<Prisma.$YogaAdultStudentPayload>
/**
 * Model RollCall
 * 
 */
export type RollCall = $Result.DefaultSelection<Prisma.$RollCallPayload>
/**
 * Model Presence
 * 
 */
export type Presence = $Result.DefaultSelection<Prisma.$PresencePayload>
/**
 * Model Contract
 * 
 */
export type Contract = $Result.DefaultSelection<Prisma.$ContractPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model ContractPhotographer
 * 
 */
export type ContractPhotographer = $Result.DefaultSelection<Prisma.$ContractPhotographerPayload>
/**
 * Model ClientContract
 * 
 */
export type ClientContract = $Result.DefaultSelection<Prisma.$ClientContractPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Package
 * 
 */
export type Package = $Result.DefaultSelection<Prisma.$PackagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const YogaClassType: {
  ADULTS: 'ADULTS',
  CHILDREN: 'CHILDREN'
};

export type YogaClassType = (typeof YogaClassType)[keyof typeof YogaClassType]


export const YogaClassStatus: {
  SCHEDULED: 'SCHEDULED',
  CANCELLED: 'CANCELLED',
  DONE: 'DONE',
  RESCHEDULED: 'RESCHEDULED'
};

export type YogaClassStatus = (typeof YogaClassStatus)[keyof typeof YogaClassStatus]


export const StudentType: {
  ADULT: 'ADULT',
  CHILD: 'CHILD'
};

export type StudentType = (typeof StudentType)[keyof typeof StudentType]


export const ContractType: {
  PHOTOSHOOT: 'PHOTOSHOOT',
  EVENT: 'EVENT'
};

export type ContractType = (typeof ContractType)[keyof typeof ContractType]


export const PaymentMethod: {
  PIX: 'PIX',
  CREDIT_CARD: 'CREDIT_CARD'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const SignatureStatus: {
  SIGNED: 'SIGNED',
  PENDING: 'PENDING'
};

export type SignatureStatus = (typeof SignatureStatus)[keyof typeof SignatureStatus]


export const PaymentStatus: {
  PAID: 'PAID',
  PENDING: 'PENDING'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const NotificationType: {
  CONTRACT_CREATED: 'CONTRACT_CREATED',
  CONTRACT_SIGNED: 'CONTRACT_SIGNED',
  PAYMENT_CONFIRMED: 'PAYMENT_CONFIRMED',
  EVENT_FINISHED: 'EVENT_FINISHED',
  CLASS_FINISHED: 'CLASS_FINISHED',
  EVENT_TIME: 'EVENT_TIME',
  CLASS_TIME: 'CLASS_TIME',
  CUSTOM: 'CUSTOM'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const GeneralStatus: {
  SCHEDULED: 'SCHEDULED',
  EDITING: 'EDITING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type GeneralStatus = (typeof GeneralStatus)[keyof typeof GeneralStatus]

}

export type YogaClassType = $Enums.YogaClassType

export const YogaClassType: typeof $Enums.YogaClassType

export type YogaClassStatus = $Enums.YogaClassStatus

export const YogaClassStatus: typeof $Enums.YogaClassStatus

export type StudentType = $Enums.StudentType

export const StudentType: typeof $Enums.StudentType

export type ContractType = $Enums.ContractType

export const ContractType: typeof $Enums.ContractType

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type SignatureStatus = $Enums.SignatureStatus

export const SignatureStatus: typeof $Enums.SignatureStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type GeneralStatus = $Enums.GeneralStatus

export const GeneralStatus: typeof $Enums.GeneralStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.child`: Exposes CRUD operations for the **Child** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Children
    * const children = await prisma.child.findMany()
    * ```
    */
  get child(): Prisma.ChildDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.family`: Exposes CRUD operations for the **Family** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Families
    * const families = await prisma.family.findMany()
    * ```
    */
  get family(): Prisma.FamilyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.yogaClass`: Exposes CRUD operations for the **YogaClass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YogaClasses
    * const yogaClasses = await prisma.yogaClass.findMany()
    * ```
    */
  get yogaClass(): Prisma.YogaClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.yogaChildStudent`: Exposes CRUD operations for the **YogaChildStudent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YogaChildStudents
    * const yogaChildStudents = await prisma.yogaChildStudent.findMany()
    * ```
    */
  get yogaChildStudent(): Prisma.YogaChildStudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.yogaAdultStudent`: Exposes CRUD operations for the **YogaAdultStudent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YogaAdultStudents
    * const yogaAdultStudents = await prisma.yogaAdultStudent.findMany()
    * ```
    */
  get yogaAdultStudent(): Prisma.YogaAdultStudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rollCall`: Exposes CRUD operations for the **RollCall** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RollCalls
    * const rollCalls = await prisma.rollCall.findMany()
    * ```
    */
  get rollCall(): Prisma.RollCallDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.presence`: Exposes CRUD operations for the **Presence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Presences
    * const presences = await prisma.presence.findMany()
    * ```
    */
  get presence(): Prisma.PresenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contract`: Exposes CRUD operations for the **Contract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contracts
    * const contracts = await prisma.contract.findMany()
    * ```
    */
  get contract(): Prisma.ContractDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contractPhotographer`: Exposes CRUD operations for the **ContractPhotographer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContractPhotographers
    * const contractPhotographers = await prisma.contractPhotographer.findMany()
    * ```
    */
  get contractPhotographer(): Prisma.ContractPhotographerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clientContract`: Exposes CRUD operations for the **ClientContract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClientContracts
    * const clientContracts = await prisma.clientContract.findMany()
    * ```
    */
  get clientContract(): Prisma.ClientContractDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.package`: Exposes CRUD operations for the **Package** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Packages
    * const packages = await prisma.package.findMany()
    * ```
    */
  get package(): Prisma.PackageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Role: 'Role',
    UserRole: 'UserRole',
    Client: 'Client',
    Child: 'Child',
    Family: 'Family',
    YogaClass: 'YogaClass',
    Location: 'Location',
    YogaChildStudent: 'YogaChildStudent',
    YogaAdultStudent: 'YogaAdultStudent',
    RollCall: 'RollCall',
    Presence: 'Presence',
    Contract: 'Contract',
    Transaction: 'Transaction',
    ContractPhotographer: 'ContractPhotographer',
    ClientContract: 'ClientContract',
    Notification: 'Notification',
    Package: 'Package'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "role" | "userRole" | "client" | "child" | "family" | "yogaClass" | "location" | "yogaChildStudent" | "yogaAdultStudent" | "rollCall" | "presence" | "contract" | "transaction" | "contractPhotographer" | "clientContract" | "notification" | "package"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      Child: {
        payload: Prisma.$ChildPayload<ExtArgs>
        fields: Prisma.ChildFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChildFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChildFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          findFirst: {
            args: Prisma.ChildFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChildFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          findMany: {
            args: Prisma.ChildFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>[]
          }
          create: {
            args: Prisma.ChildCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          createMany: {
            args: Prisma.ChildCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ChildDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          update: {
            args: Prisma.ChildUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          deleteMany: {
            args: Prisma.ChildDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChildUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChildUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          aggregate: {
            args: Prisma.ChildAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChild>
          }
          groupBy: {
            args: Prisma.ChildGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChildGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChildCountArgs<ExtArgs>
            result: $Utils.Optional<ChildCountAggregateOutputType> | number
          }
        }
      }
      Family: {
        payload: Prisma.$FamilyPayload<ExtArgs>
        fields: Prisma.FamilyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FamilyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FamilyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>
          }
          findFirst: {
            args: Prisma.FamilyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FamilyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>
          }
          findMany: {
            args: Prisma.FamilyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>[]
          }
          create: {
            args: Prisma.FamilyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>
          }
          createMany: {
            args: Prisma.FamilyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FamilyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>
          }
          update: {
            args: Prisma.FamilyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>
          }
          deleteMany: {
            args: Prisma.FamilyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FamilyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FamilyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyPayload>
          }
          aggregate: {
            args: Prisma.FamilyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFamily>
          }
          groupBy: {
            args: Prisma.FamilyGroupByArgs<ExtArgs>
            result: $Utils.Optional<FamilyGroupByOutputType>[]
          }
          count: {
            args: Prisma.FamilyCountArgs<ExtArgs>
            result: $Utils.Optional<FamilyCountAggregateOutputType> | number
          }
        }
      }
      YogaClass: {
        payload: Prisma.$YogaClassPayload<ExtArgs>
        fields: Prisma.YogaClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.YogaClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.YogaClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaClassPayload>
          }
          findFirst: {
            args: Prisma.YogaClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.YogaClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaClassPayload>
          }
          findMany: {
            args: Prisma.YogaClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaClassPayload>[]
          }
          create: {
            args: Prisma.YogaClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaClassPayload>
          }
          createMany: {
            args: Prisma.YogaClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.YogaClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaClassPayload>
          }
          update: {
            args: Prisma.YogaClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaClassPayload>
          }
          deleteMany: {
            args: Prisma.YogaClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.YogaClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.YogaClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaClassPayload>
          }
          aggregate: {
            args: Prisma.YogaClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateYogaClass>
          }
          groupBy: {
            args: Prisma.YogaClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<YogaClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.YogaClassCountArgs<ExtArgs>
            result: $Utils.Optional<YogaClassCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      YogaChildStudent: {
        payload: Prisma.$YogaChildStudentPayload<ExtArgs>
        fields: Prisma.YogaChildStudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.YogaChildStudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaChildStudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.YogaChildStudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaChildStudentPayload>
          }
          findFirst: {
            args: Prisma.YogaChildStudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaChildStudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.YogaChildStudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaChildStudentPayload>
          }
          findMany: {
            args: Prisma.YogaChildStudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaChildStudentPayload>[]
          }
          create: {
            args: Prisma.YogaChildStudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaChildStudentPayload>
          }
          createMany: {
            args: Prisma.YogaChildStudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.YogaChildStudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaChildStudentPayload>
          }
          update: {
            args: Prisma.YogaChildStudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaChildStudentPayload>
          }
          deleteMany: {
            args: Prisma.YogaChildStudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.YogaChildStudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.YogaChildStudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaChildStudentPayload>
          }
          aggregate: {
            args: Prisma.YogaChildStudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateYogaChildStudent>
          }
          groupBy: {
            args: Prisma.YogaChildStudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<YogaChildStudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.YogaChildStudentCountArgs<ExtArgs>
            result: $Utils.Optional<YogaChildStudentCountAggregateOutputType> | number
          }
        }
      }
      YogaAdultStudent: {
        payload: Prisma.$YogaAdultStudentPayload<ExtArgs>
        fields: Prisma.YogaAdultStudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.YogaAdultStudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaAdultStudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.YogaAdultStudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaAdultStudentPayload>
          }
          findFirst: {
            args: Prisma.YogaAdultStudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaAdultStudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.YogaAdultStudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaAdultStudentPayload>
          }
          findMany: {
            args: Prisma.YogaAdultStudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaAdultStudentPayload>[]
          }
          create: {
            args: Prisma.YogaAdultStudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaAdultStudentPayload>
          }
          createMany: {
            args: Prisma.YogaAdultStudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.YogaAdultStudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaAdultStudentPayload>
          }
          update: {
            args: Prisma.YogaAdultStudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaAdultStudentPayload>
          }
          deleteMany: {
            args: Prisma.YogaAdultStudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.YogaAdultStudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.YogaAdultStudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YogaAdultStudentPayload>
          }
          aggregate: {
            args: Prisma.YogaAdultStudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateYogaAdultStudent>
          }
          groupBy: {
            args: Prisma.YogaAdultStudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<YogaAdultStudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.YogaAdultStudentCountArgs<ExtArgs>
            result: $Utils.Optional<YogaAdultStudentCountAggregateOutputType> | number
          }
        }
      }
      RollCall: {
        payload: Prisma.$RollCallPayload<ExtArgs>
        fields: Prisma.RollCallFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RollCallFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RollCallFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>
          }
          findFirst: {
            args: Prisma.RollCallFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RollCallFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>
          }
          findMany: {
            args: Prisma.RollCallFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>[]
          }
          create: {
            args: Prisma.RollCallCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>
          }
          createMany: {
            args: Prisma.RollCallCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RollCallDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>
          }
          update: {
            args: Prisma.RollCallUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>
          }
          deleteMany: {
            args: Prisma.RollCallDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RollCallUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RollCallUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RollCallPayload>
          }
          aggregate: {
            args: Prisma.RollCallAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRollCall>
          }
          groupBy: {
            args: Prisma.RollCallGroupByArgs<ExtArgs>
            result: $Utils.Optional<RollCallGroupByOutputType>[]
          }
          count: {
            args: Prisma.RollCallCountArgs<ExtArgs>
            result: $Utils.Optional<RollCallCountAggregateOutputType> | number
          }
        }
      }
      Presence: {
        payload: Prisma.$PresencePayload<ExtArgs>
        fields: Prisma.PresenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PresenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PresenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          findFirst: {
            args: Prisma.PresenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PresenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          findMany: {
            args: Prisma.PresenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>[]
          }
          create: {
            args: Prisma.PresenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          createMany: {
            args: Prisma.PresenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PresenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          update: {
            args: Prisma.PresenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          deleteMany: {
            args: Prisma.PresenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PresenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PresenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencePayload>
          }
          aggregate: {
            args: Prisma.PresenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePresence>
          }
          groupBy: {
            args: Prisma.PresenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PresenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PresenceCountArgs<ExtArgs>
            result: $Utils.Optional<PresenceCountAggregateOutputType> | number
          }
        }
      }
      Contract: {
        payload: Prisma.$ContractPayload<ExtArgs>
        fields: Prisma.ContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findFirst: {
            args: Prisma.ContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findMany: {
            args: Prisma.ContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          create: {
            args: Prisma.ContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          createMany: {
            args: Prisma.ContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          update: {
            args: Prisma.ContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          deleteMany: {
            args: Prisma.ContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          aggregate: {
            args: Prisma.ContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContract>
          }
          groupBy: {
            args: Prisma.ContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractCountArgs<ExtArgs>
            result: $Utils.Optional<ContractCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      ContractPhotographer: {
        payload: Prisma.$ContractPhotographerPayload<ExtArgs>
        fields: Prisma.ContractPhotographerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractPhotographerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPhotographerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractPhotographerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPhotographerPayload>
          }
          findFirst: {
            args: Prisma.ContractPhotographerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPhotographerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractPhotographerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPhotographerPayload>
          }
          findMany: {
            args: Prisma.ContractPhotographerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPhotographerPayload>[]
          }
          create: {
            args: Prisma.ContractPhotographerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPhotographerPayload>
          }
          createMany: {
            args: Prisma.ContractPhotographerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ContractPhotographerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPhotographerPayload>
          }
          update: {
            args: Prisma.ContractPhotographerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPhotographerPayload>
          }
          deleteMany: {
            args: Prisma.ContractPhotographerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractPhotographerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContractPhotographerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPhotographerPayload>
          }
          aggregate: {
            args: Prisma.ContractPhotographerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContractPhotographer>
          }
          groupBy: {
            args: Prisma.ContractPhotographerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractPhotographerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractPhotographerCountArgs<ExtArgs>
            result: $Utils.Optional<ContractPhotographerCountAggregateOutputType> | number
          }
        }
      }
      ClientContract: {
        payload: Prisma.$ClientContractPayload<ExtArgs>
        fields: Prisma.ClientContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContractPayload>
          }
          findFirst: {
            args: Prisma.ClientContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContractPayload>
          }
          findMany: {
            args: Prisma.ClientContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContractPayload>[]
          }
          create: {
            args: Prisma.ClientContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContractPayload>
          }
          createMany: {
            args: Prisma.ClientContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClientContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContractPayload>
          }
          update: {
            args: Prisma.ClientContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContractPayload>
          }
          deleteMany: {
            args: Prisma.ClientContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClientContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContractPayload>
          }
          aggregate: {
            args: Prisma.ClientContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClientContract>
          }
          groupBy: {
            args: Prisma.ClientContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientContractCountArgs<ExtArgs>
            result: $Utils.Optional<ClientContractCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Package: {
        payload: Prisma.$PackagePayload<ExtArgs>
        fields: Prisma.PackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findFirst: {
            args: Prisma.PackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findMany: {
            args: Prisma.PackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          create: {
            args: Prisma.PackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          createMany: {
            args: Prisma.PackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          update: {
            args: Prisma.PackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          deleteMany: {
            args: Prisma.PackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          aggregate: {
            args: Prisma.PackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackage>
          }
          groupBy: {
            args: Prisma.PackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageCountArgs<ExtArgs>
            result: $Utils.Optional<PackageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    role?: RoleOmit
    userRole?: UserRoleOmit
    client?: ClientOmit
    child?: ChildOmit
    family?: FamilyOmit
    yogaClass?: YogaClassOmit
    location?: LocationOmit
    yogaChildStudent?: YogaChildStudentOmit
    yogaAdultStudent?: YogaAdultStudentOmit
    rollCall?: RollCallOmit
    presence?: PresenceOmit
    contract?: ContractOmit
    transaction?: TransactionOmit
    contractPhotographer?: ContractPhotographerOmit
    clientContract?: ClientContractOmit
    notification?: NotificationOmit
    package?: PackageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    notifications: number
    roles: number
    classes: number
    videoContracts: number
    photoContracts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    roles?: boolean | UserCountOutputTypeCountRolesArgs
    classes?: boolean | UserCountOutputTypeCountClassesArgs
    videoContracts?: boolean | UserCountOutputTypeCountVideoContractsArgs
    photoContracts?: boolean | UserCountOutputTypeCountPhotoContractsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YogaClassWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVideoContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPhotoContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractPhotographerWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    children: number
    contracts: number
    yogaClasses: number
    presences: number
    transactions: number
    notifications: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | ClientCountOutputTypeCountChildrenArgs
    contracts?: boolean | ClientCountOutputTypeCountContractsArgs
    yogaClasses?: boolean | ClientCountOutputTypeCountYogaClassesArgs
    presences?: boolean | ClientCountOutputTypeCountPresencesArgs
    transactions?: boolean | ClientCountOutputTypeCountTransactionsArgs
    notifications?: boolean | ClientCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FamilyWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientContractWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountYogaClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YogaAdultStudentWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountPresencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresenceWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type ChildCountOutputType
   */

  export type ChildCountOutputType = {
    parents: number
    yogaClasses: number
    presences: number
  }

  export type ChildCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parents?: boolean | ChildCountOutputTypeCountParentsArgs
    yogaClasses?: boolean | ChildCountOutputTypeCountYogaClassesArgs
    presences?: boolean | ChildCountOutputTypeCountPresencesArgs
  }

  // Custom InputTypes
  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildCountOutputType
     */
    select?: ChildCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeCountParentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FamilyWhereInput
  }

  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeCountYogaClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YogaChildStudentWhereInput
  }

  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeCountPresencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresenceWhereInput
  }


  /**
   * Count Type YogaClassCountOutputType
   */

  export type YogaClassCountOutputType = {
    transactions: number
    adultStudents: number
    childStudents: number
  }

  export type YogaClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | YogaClassCountOutputTypeCountTransactionsArgs
    adultStudents?: boolean | YogaClassCountOutputTypeCountAdultStudentsArgs
    childStudents?: boolean | YogaClassCountOutputTypeCountChildStudentsArgs
  }

  // Custom InputTypes
  /**
   * YogaClassCountOutputType without action
   */
  export type YogaClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClassCountOutputType
     */
    select?: YogaClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * YogaClassCountOutputType without action
   */
  export type YogaClassCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * YogaClassCountOutputType without action
   */
  export type YogaClassCountOutputTypeCountAdultStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YogaAdultStudentWhereInput
  }

  /**
   * YogaClassCountOutputType without action
   */
  export type YogaClassCountOutputTypeCountChildStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YogaChildStudentWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    classes: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes?: boolean | LocationCountOutputTypeCountClassesArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YogaClassWhereInput
  }


  /**
   * Count Type RollCallCountOutputType
   */

  export type RollCallCountOutputType = {
    presences: number
  }

  export type RollCallCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presences?: boolean | RollCallCountOutputTypeCountPresencesArgs
  }

  // Custom InputTypes
  /**
   * RollCallCountOutputType without action
   */
  export type RollCallCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCallCountOutputType
     */
    select?: RollCallCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RollCallCountOutputType without action
   */
  export type RollCallCountOutputTypeCountPresencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresenceWhereInput
  }


  /**
   * Count Type ContractCountOutputType
   */

  export type ContractCountOutputType = {
    clients: number
    photographers: number
    transactions: number
  }

  export type ContractCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clients?: boolean | ContractCountOutputTypeCountClientsArgs
    photographers?: boolean | ContractCountOutputTypeCountPhotographersArgs
    transactions?: boolean | ContractCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractCountOutputType
     */
    select?: ContractCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientContractWhereInput
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountPhotographersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractPhotographerWhereInput
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }


  /**
   * Count Type PackageCountOutputType
   */

  export type PackageCountOutputType = {
    contracts: number
  }

  export type PackageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | PackageCountOutputTypeCountContractsArgs
  }

  // Custom InputTypes
  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageCountOutputType
     */
    select?: PackageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    pictureUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    pictureUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    pictureUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    pictureUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    pictureUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    pictureUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    pictureUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    pictureUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    classes?: boolean | User$classesArgs<ExtArgs>
    videoContracts?: boolean | User$videoContractsArgs<ExtArgs>
    photoContracts?: boolean | User$photoContractsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    pictureUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "pictureUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    classes?: boolean | User$classesArgs<ExtArgs>
    videoContracts?: boolean | User$videoContractsArgs<ExtArgs>
    photoContracts?: boolean | User$photoContractsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      roles: Prisma.$UserRolePayload<ExtArgs>[]
      classes: Prisma.$YogaClassPayload<ExtArgs>[]
      videoContracts: Prisma.$ContractPayload<ExtArgs>[]
      photoContracts: Prisma.$ContractPhotographerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      pictureUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roles<T extends User$rolesArgs<ExtArgs> = {}>(args?: Subset<T, User$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    classes<T extends User$classesArgs<ExtArgs> = {}>(args?: Subset<T, User$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    videoContracts<T extends User$videoContractsArgs<ExtArgs> = {}>(args?: Subset<T, User$videoContractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    photoContracts<T extends User$photoContractsArgs<ExtArgs> = {}>(args?: Subset<T, User$photoContractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPhotographerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly pictureUrl: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.roles
   */
  export type User$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * User.classes
   */
  export type User$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
    where?: YogaClassWhereInput
    orderBy?: YogaClassOrderByWithRelationInput | YogaClassOrderByWithRelationInput[]
    cursor?: YogaClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: YogaClassScalarFieldEnum | YogaClassScalarFieldEnum[]
  }

  /**
   * User.videoContracts
   */
  export type User$videoContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * User.photoContracts
   */
  export type User$photoContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractPhotographer
     */
    select?: ContractPhotographerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractPhotographer
     */
    omit?: ContractPhotographerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractPhotographerInclude<ExtArgs> | null
    where?: ContractPhotographerWhereInput
    orderBy?: ContractPhotographerOrderByWithRelationInput | ContractPhotographerOrderByWithRelationInput[]
    cursor?: ContractPhotographerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractPhotographerScalarFieldEnum | ContractPhotographerScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    title: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    title: string
    createdAt: Date
    updatedAt: Date
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>



  export type RoleSelectScalar = {
    id?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "createdAt" | "updatedAt", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserRolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly title: FieldRef<"Role", 'String'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleMinAggregateOutputType = {
    userId: string | null
    roleId: string | null
  }

  export type UserRoleMaxAggregateOutputType = {
    userId: string | null
    roleId: string | null
  }

  export type UserRoleCountAggregateOutputType = {
    userId: number
    roleId: number
    _all: number
  }


  export type UserRoleMinAggregateInputType = {
    userId?: true
    roleId?: true
  }

  export type UserRoleMaxAggregateInputType = {
    userId?: true
    roleId?: true
  }

  export type UserRoleCountAggregateInputType = {
    userId?: true
    roleId?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    userId: string
    roleId: string
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    roleId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>



  export type UserRoleSelectScalar = {
    userId?: boolean
    roleId?: boolean
  }

  export type UserRoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "roleId", ExtArgs["result"]["userRole"]>
  export type UserRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      roleId: string
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }

  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleFindUniqueArgs>(args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserRole that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleFindFirstArgs>(args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userRoleWithUserIdOnly = await prisma.userRole.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserRoleFindManyArgs>(args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
     */
    create<T extends UserRoleCreateArgs>(args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserRoles.
     * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleCreateManyArgs>(args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
     */
    delete<T extends UserRoleDeleteArgs>(args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleUpdateArgs>(args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleDeleteManyArgs>(args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleUpdateManyArgs>(args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleUpsertArgs>(args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRole model
   */
  interface UserRoleFieldRefs {
    readonly userId: FieldRef<"UserRole", 'String'>
    readonly roleId: FieldRef<"UserRole", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to delete.
     */
    limit?: number
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
  }


  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    address: string | null
    neighborhood: string | null
    city: string | null
    cpf: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    address: string | null
    neighborhood: string | null
    city: string | null
    cpf: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    name: number
    email: number
    address: number
    neighborhood: number
    city: number
    cpf: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClientMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    address?: true
    neighborhood?: true
    city?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    address?: true
    neighborhood?: true
    city?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    address?: true
    neighborhood?: true
    city?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt: Date
    updatedAt: Date
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    address?: boolean
    neighborhood?: boolean
    city?: boolean
    cpf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    children?: boolean | Client$childrenArgs<ExtArgs>
    contracts?: boolean | Client$contractsArgs<ExtArgs>
    yogaClasses?: boolean | Client$yogaClassesArgs<ExtArgs>
    presences?: boolean | Client$presencesArgs<ExtArgs>
    transactions?: boolean | Client$transactionsArgs<ExtArgs>
    notifications?: boolean | Client$notificationsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>



  export type ClientSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    address?: boolean
    neighborhood?: boolean
    city?: boolean
    cpf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "address" | "neighborhood" | "city" | "cpf" | "createdAt" | "updatedAt", ExtArgs["result"]["client"]>
  export type ClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | Client$childrenArgs<ExtArgs>
    contracts?: boolean | Client$contractsArgs<ExtArgs>
    yogaClasses?: boolean | Client$yogaClassesArgs<ExtArgs>
    presences?: boolean | Client$presencesArgs<ExtArgs>
    transactions?: boolean | Client$transactionsArgs<ExtArgs>
    notifications?: boolean | Client$notificationsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      children: Prisma.$FamilyPayload<ExtArgs>[]
      contracts: Prisma.$ClientContractPayload<ExtArgs>[]
      yogaClasses: Prisma.$YogaAdultStudentPayload<ExtArgs>[]
      presences: Prisma.$PresencePayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      address: string
      neighborhood: string
      city: string
      cpf: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientFindUniqueArgs>(args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientFindFirstArgs>(args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientFindManyArgs>(args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends ClientCreateArgs>(args: SelectSubset<T, ClientCreateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientCreateManyArgs>(args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends ClientDeleteArgs>(args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientUpdateArgs>(args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientDeleteManyArgs>(args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientUpdateManyArgs>(args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends ClientUpsertArgs>(args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    children<T extends Client$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Client$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contracts<T extends Client$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Client$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    yogaClasses<T extends Client$yogaClassesArgs<ExtArgs> = {}>(args?: Subset<T, Client$yogaClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YogaAdultStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    presences<T extends Client$presencesArgs<ExtArgs> = {}>(args?: Subset<T, Client$presencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends Client$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Client$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends Client$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Client$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Client model
   */
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'String'>
    readonly name: FieldRef<"Client", 'String'>
    readonly email: FieldRef<"Client", 'String'>
    readonly address: FieldRef<"Client", 'String'>
    readonly neighborhood: FieldRef<"Client", 'String'>
    readonly city: FieldRef<"Client", 'String'>
    readonly cpf: FieldRef<"Client", 'String'>
    readonly createdAt: FieldRef<"Client", 'DateTime'>
    readonly updatedAt: FieldRef<"Client", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }

  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to delete.
     */
    limit?: number
  }

  /**
   * Client.children
   */
  export type Client$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Family
     */
    omit?: FamilyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    where?: FamilyWhereInput
    orderBy?: FamilyOrderByWithRelationInput | FamilyOrderByWithRelationInput[]
    cursor?: FamilyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FamilyScalarFieldEnum | FamilyScalarFieldEnum[]
  }

  /**
   * Client.contracts
   */
  export type Client$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContract
     */
    select?: ClientContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientContract
     */
    omit?: ClientContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContractInclude<ExtArgs> | null
    where?: ClientContractWhereInput
    orderBy?: ClientContractOrderByWithRelationInput | ClientContractOrderByWithRelationInput[]
    cursor?: ClientContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientContractScalarFieldEnum | ClientContractScalarFieldEnum[]
  }

  /**
   * Client.yogaClasses
   */
  export type Client$yogaClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaAdultStudent
     */
    select?: YogaAdultStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaAdultStudent
     */
    omit?: YogaAdultStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaAdultStudentInclude<ExtArgs> | null
    where?: YogaAdultStudentWhereInput
    orderBy?: YogaAdultStudentOrderByWithRelationInput | YogaAdultStudentOrderByWithRelationInput[]
    cursor?: YogaAdultStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: YogaAdultStudentScalarFieldEnum | YogaAdultStudentScalarFieldEnum[]
  }

  /**
   * Client.presences
   */
  export type Client$presencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    where?: PresenceWhereInput
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    cursor?: PresenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Client.transactions
   */
  export type Client$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Client.notifications
   */
  export type Client$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
  }


  /**
   * Model Child
   */

  export type AggregateChild = {
    _count: ChildCountAggregateOutputType | null
    _min: ChildMinAggregateOutputType | null
    _max: ChildMaxAggregateOutputType | null
  }

  export type ChildMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChildMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChildCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChildMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChildMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChildCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChildAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Child to aggregate.
     */
    where?: ChildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Children to fetch.
     */
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Children from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Children.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Children
    **/
    _count?: true | ChildCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChildMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChildMaxAggregateInputType
  }

  export type GetChildAggregateType<T extends ChildAggregateArgs> = {
        [P in keyof T & keyof AggregateChild]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChild[P]>
      : GetScalarType<T[P], AggregateChild[P]>
  }




  export type ChildGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChildWhereInput
    orderBy?: ChildOrderByWithAggregationInput | ChildOrderByWithAggregationInput[]
    by: ChildScalarFieldEnum[] | ChildScalarFieldEnum
    having?: ChildScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChildCountAggregateInputType | true
    _min?: ChildMinAggregateInputType
    _max?: ChildMaxAggregateInputType
  }

  export type ChildGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: ChildCountAggregateOutputType | null
    _min: ChildMinAggregateOutputType | null
    _max: ChildMaxAggregateOutputType | null
  }

  type GetChildGroupByPayload<T extends ChildGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChildGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChildGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChildGroupByOutputType[P]>
            : GetScalarType<T[P], ChildGroupByOutputType[P]>
        }
      >
    >


  export type ChildSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parents?: boolean | Child$parentsArgs<ExtArgs>
    yogaClasses?: boolean | Child$yogaClassesArgs<ExtArgs>
    presences?: boolean | Child$presencesArgs<ExtArgs>
    _count?: boolean | ChildCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["child"]>



  export type ChildSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChildOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["child"]>
  export type ChildInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parents?: boolean | Child$parentsArgs<ExtArgs>
    yogaClasses?: boolean | Child$yogaClassesArgs<ExtArgs>
    presences?: boolean | Child$presencesArgs<ExtArgs>
    _count?: boolean | ChildCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ChildPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Child"
    objects: {
      parents: Prisma.$FamilyPayload<ExtArgs>[]
      yogaClasses: Prisma.$YogaChildStudentPayload<ExtArgs>[]
      presences: Prisma.$PresencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["child"]>
    composites: {}
  }

  type ChildGetPayload<S extends boolean | null | undefined | ChildDefaultArgs> = $Result.GetResult<Prisma.$ChildPayload, S>

  type ChildCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChildFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChildCountAggregateInputType | true
    }

  export interface ChildDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Child'], meta: { name: 'Child' } }
    /**
     * Find zero or one Child that matches the filter.
     * @param {ChildFindUniqueArgs} args - Arguments to find a Child
     * @example
     * // Get one Child
     * const child = await prisma.child.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChildFindUniqueArgs>(args: SelectSubset<T, ChildFindUniqueArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Child that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChildFindUniqueOrThrowArgs} args - Arguments to find a Child
     * @example
     * // Get one Child
     * const child = await prisma.child.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChildFindUniqueOrThrowArgs>(args: SelectSubset<T, ChildFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Child that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildFindFirstArgs} args - Arguments to find a Child
     * @example
     * // Get one Child
     * const child = await prisma.child.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChildFindFirstArgs>(args?: SelectSubset<T, ChildFindFirstArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Child that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildFindFirstOrThrowArgs} args - Arguments to find a Child
     * @example
     * // Get one Child
     * const child = await prisma.child.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChildFindFirstOrThrowArgs>(args?: SelectSubset<T, ChildFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Children that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Children
     * const children = await prisma.child.findMany()
     * 
     * // Get first 10 Children
     * const children = await prisma.child.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const childWithIdOnly = await prisma.child.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChildFindManyArgs>(args?: SelectSubset<T, ChildFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Child.
     * @param {ChildCreateArgs} args - Arguments to create a Child.
     * @example
     * // Create one Child
     * const Child = await prisma.child.create({
     *   data: {
     *     // ... data to create a Child
     *   }
     * })
     * 
     */
    create<T extends ChildCreateArgs>(args: SelectSubset<T, ChildCreateArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Children.
     * @param {ChildCreateManyArgs} args - Arguments to create many Children.
     * @example
     * // Create many Children
     * const child = await prisma.child.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChildCreateManyArgs>(args?: SelectSubset<T, ChildCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Child.
     * @param {ChildDeleteArgs} args - Arguments to delete one Child.
     * @example
     * // Delete one Child
     * const Child = await prisma.child.delete({
     *   where: {
     *     // ... filter to delete one Child
     *   }
     * })
     * 
     */
    delete<T extends ChildDeleteArgs>(args: SelectSubset<T, ChildDeleteArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Child.
     * @param {ChildUpdateArgs} args - Arguments to update one Child.
     * @example
     * // Update one Child
     * const child = await prisma.child.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChildUpdateArgs>(args: SelectSubset<T, ChildUpdateArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Children.
     * @param {ChildDeleteManyArgs} args - Arguments to filter Children to delete.
     * @example
     * // Delete a few Children
     * const { count } = await prisma.child.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChildDeleteManyArgs>(args?: SelectSubset<T, ChildDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Children.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Children
     * const child = await prisma.child.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChildUpdateManyArgs>(args: SelectSubset<T, ChildUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Child.
     * @param {ChildUpsertArgs} args - Arguments to update or create a Child.
     * @example
     * // Update or create a Child
     * const child = await prisma.child.upsert({
     *   create: {
     *     // ... data to create a Child
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Child we want to update
     *   }
     * })
     */
    upsert<T extends ChildUpsertArgs>(args: SelectSubset<T, ChildUpsertArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Children.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildCountArgs} args - Arguments to filter Children to count.
     * @example
     * // Count the number of Children
     * const count = await prisma.child.count({
     *   where: {
     *     // ... the filter for the Children we want to count
     *   }
     * })
    **/
    count<T extends ChildCountArgs>(
      args?: Subset<T, ChildCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChildCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Child.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChildAggregateArgs>(args: Subset<T, ChildAggregateArgs>): Prisma.PrismaPromise<GetChildAggregateType<T>>

    /**
     * Group by Child.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChildGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChildGroupByArgs['orderBy'] }
        : { orderBy?: ChildGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChildGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChildGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Child model
   */
  readonly fields: ChildFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Child.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChildClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parents<T extends Child$parentsArgs<ExtArgs> = {}>(args?: Subset<T, Child$parentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    yogaClasses<T extends Child$yogaClassesArgs<ExtArgs> = {}>(args?: Subset<T, Child$yogaClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YogaChildStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    presences<T extends Child$presencesArgs<ExtArgs> = {}>(args?: Subset<T, Child$presencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Child model
   */
  interface ChildFieldRefs {
    readonly id: FieldRef<"Child", 'String'>
    readonly name: FieldRef<"Child", 'String'>
    readonly createdAt: FieldRef<"Child", 'DateTime'>
    readonly updatedAt: FieldRef<"Child", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Child findUnique
   */
  export type ChildFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Child to fetch.
     */
    where: ChildWhereUniqueInput
  }

  /**
   * Child findUniqueOrThrow
   */
  export type ChildFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Child to fetch.
     */
    where: ChildWhereUniqueInput
  }

  /**
   * Child findFirst
   */
  export type ChildFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Child to fetch.
     */
    where?: ChildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Children to fetch.
     */
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Children.
     */
    cursor?: ChildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Children from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Children.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Children.
     */
    distinct?: ChildScalarFieldEnum | ChildScalarFieldEnum[]
  }

  /**
   * Child findFirstOrThrow
   */
  export type ChildFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Child to fetch.
     */
    where?: ChildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Children to fetch.
     */
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Children.
     */
    cursor?: ChildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Children from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Children.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Children.
     */
    distinct?: ChildScalarFieldEnum | ChildScalarFieldEnum[]
  }

  /**
   * Child findMany
   */
  export type ChildFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Children to fetch.
     */
    where?: ChildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Children to fetch.
     */
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Children.
     */
    cursor?: ChildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Children from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Children.
     */
    skip?: number
    distinct?: ChildScalarFieldEnum | ChildScalarFieldEnum[]
  }

  /**
   * Child create
   */
  export type ChildCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * The data needed to create a Child.
     */
    data: XOR<ChildCreateInput, ChildUncheckedCreateInput>
  }

  /**
   * Child createMany
   */
  export type ChildCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Children.
     */
    data: ChildCreateManyInput | ChildCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Child update
   */
  export type ChildUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * The data needed to update a Child.
     */
    data: XOR<ChildUpdateInput, ChildUncheckedUpdateInput>
    /**
     * Choose, which Child to update.
     */
    where: ChildWhereUniqueInput
  }

  /**
   * Child updateMany
   */
  export type ChildUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Children.
     */
    data: XOR<ChildUpdateManyMutationInput, ChildUncheckedUpdateManyInput>
    /**
     * Filter which Children to update
     */
    where?: ChildWhereInput
    /**
     * Limit how many Children to update.
     */
    limit?: number
  }

  /**
   * Child upsert
   */
  export type ChildUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * The filter to search for the Child to update in case it exists.
     */
    where: ChildWhereUniqueInput
    /**
     * In case the Child found by the `where` argument doesn't exist, create a new Child with this data.
     */
    create: XOR<ChildCreateInput, ChildUncheckedCreateInput>
    /**
     * In case the Child was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChildUpdateInput, ChildUncheckedUpdateInput>
  }

  /**
   * Child delete
   */
  export type ChildDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter which Child to delete.
     */
    where: ChildWhereUniqueInput
  }

  /**
   * Child deleteMany
   */
  export type ChildDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Children to delete
     */
    where?: ChildWhereInput
    /**
     * Limit how many Children to delete.
     */
    limit?: number
  }

  /**
   * Child.parents
   */
  export type Child$parentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Family
     */
    omit?: FamilyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    where?: FamilyWhereInput
    orderBy?: FamilyOrderByWithRelationInput | FamilyOrderByWithRelationInput[]
    cursor?: FamilyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FamilyScalarFieldEnum | FamilyScalarFieldEnum[]
  }

  /**
   * Child.yogaClasses
   */
  export type Child$yogaClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaChildStudent
     */
    select?: YogaChildStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaChildStudent
     */
    omit?: YogaChildStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaChildStudentInclude<ExtArgs> | null
    where?: YogaChildStudentWhereInput
    orderBy?: YogaChildStudentOrderByWithRelationInput | YogaChildStudentOrderByWithRelationInput[]
    cursor?: YogaChildStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: YogaChildStudentScalarFieldEnum | YogaChildStudentScalarFieldEnum[]
  }

  /**
   * Child.presences
   */
  export type Child$presencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    where?: PresenceWhereInput
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    cursor?: PresenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Child without action
   */
  export type ChildDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
  }


  /**
   * Model Family
   */

  export type AggregateFamily = {
    _count: FamilyCountAggregateOutputType | null
    _min: FamilyMinAggregateOutputType | null
    _max: FamilyMaxAggregateOutputType | null
  }

  export type FamilyMinAggregateOutputType = {
    clientId: string | null
    childId: string | null
  }

  export type FamilyMaxAggregateOutputType = {
    clientId: string | null
    childId: string | null
  }

  export type FamilyCountAggregateOutputType = {
    clientId: number
    childId: number
    _all: number
  }


  export type FamilyMinAggregateInputType = {
    clientId?: true
    childId?: true
  }

  export type FamilyMaxAggregateInputType = {
    clientId?: true
    childId?: true
  }

  export type FamilyCountAggregateInputType = {
    clientId?: true
    childId?: true
    _all?: true
  }

  export type FamilyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Family to aggregate.
     */
    where?: FamilyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Families to fetch.
     */
    orderBy?: FamilyOrderByWithRelationInput | FamilyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FamilyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Families from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Families.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Families
    **/
    _count?: true | FamilyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FamilyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FamilyMaxAggregateInputType
  }

  export type GetFamilyAggregateType<T extends FamilyAggregateArgs> = {
        [P in keyof T & keyof AggregateFamily]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFamily[P]>
      : GetScalarType<T[P], AggregateFamily[P]>
  }




  export type FamilyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FamilyWhereInput
    orderBy?: FamilyOrderByWithAggregationInput | FamilyOrderByWithAggregationInput[]
    by: FamilyScalarFieldEnum[] | FamilyScalarFieldEnum
    having?: FamilyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FamilyCountAggregateInputType | true
    _min?: FamilyMinAggregateInputType
    _max?: FamilyMaxAggregateInputType
  }

  export type FamilyGroupByOutputType = {
    clientId: string
    childId: string
    _count: FamilyCountAggregateOutputType | null
    _min: FamilyMinAggregateOutputType | null
    _max: FamilyMaxAggregateOutputType | null
  }

  type GetFamilyGroupByPayload<T extends FamilyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FamilyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FamilyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FamilyGroupByOutputType[P]>
            : GetScalarType<T[P], FamilyGroupByOutputType[P]>
        }
      >
    >


  export type FamilySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    clientId?: boolean
    childId?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["family"]>



  export type FamilySelectScalar = {
    clientId?: boolean
    childId?: boolean
  }

  export type FamilyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"clientId" | "childId", ExtArgs["result"]["family"]>
  export type FamilyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }

  export type $FamilyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Family"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      child: Prisma.$ChildPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      clientId: string
      childId: string
    }, ExtArgs["result"]["family"]>
    composites: {}
  }

  type FamilyGetPayload<S extends boolean | null | undefined | FamilyDefaultArgs> = $Result.GetResult<Prisma.$FamilyPayload, S>

  type FamilyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FamilyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FamilyCountAggregateInputType | true
    }

  export interface FamilyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Family'], meta: { name: 'Family' } }
    /**
     * Find zero or one Family that matches the filter.
     * @param {FamilyFindUniqueArgs} args - Arguments to find a Family
     * @example
     * // Get one Family
     * const family = await prisma.family.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FamilyFindUniqueArgs>(args: SelectSubset<T, FamilyFindUniqueArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Family that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FamilyFindUniqueOrThrowArgs} args - Arguments to find a Family
     * @example
     * // Get one Family
     * const family = await prisma.family.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FamilyFindUniqueOrThrowArgs>(args: SelectSubset<T, FamilyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Family that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyFindFirstArgs} args - Arguments to find a Family
     * @example
     * // Get one Family
     * const family = await prisma.family.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FamilyFindFirstArgs>(args?: SelectSubset<T, FamilyFindFirstArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Family that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyFindFirstOrThrowArgs} args - Arguments to find a Family
     * @example
     * // Get one Family
     * const family = await prisma.family.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FamilyFindFirstOrThrowArgs>(args?: SelectSubset<T, FamilyFindFirstOrThrowArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Families that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Families
     * const families = await prisma.family.findMany()
     * 
     * // Get first 10 Families
     * const families = await prisma.family.findMany({ take: 10 })
     * 
     * // Only select the `clientId`
     * const familyWithClientIdOnly = await prisma.family.findMany({ select: { clientId: true } })
     * 
     */
    findMany<T extends FamilyFindManyArgs>(args?: SelectSubset<T, FamilyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Family.
     * @param {FamilyCreateArgs} args - Arguments to create a Family.
     * @example
     * // Create one Family
     * const Family = await prisma.family.create({
     *   data: {
     *     // ... data to create a Family
     *   }
     * })
     * 
     */
    create<T extends FamilyCreateArgs>(args: SelectSubset<T, FamilyCreateArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Families.
     * @param {FamilyCreateManyArgs} args - Arguments to create many Families.
     * @example
     * // Create many Families
     * const family = await prisma.family.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FamilyCreateManyArgs>(args?: SelectSubset<T, FamilyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Family.
     * @param {FamilyDeleteArgs} args - Arguments to delete one Family.
     * @example
     * // Delete one Family
     * const Family = await prisma.family.delete({
     *   where: {
     *     // ... filter to delete one Family
     *   }
     * })
     * 
     */
    delete<T extends FamilyDeleteArgs>(args: SelectSubset<T, FamilyDeleteArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Family.
     * @param {FamilyUpdateArgs} args - Arguments to update one Family.
     * @example
     * // Update one Family
     * const family = await prisma.family.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FamilyUpdateArgs>(args: SelectSubset<T, FamilyUpdateArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Families.
     * @param {FamilyDeleteManyArgs} args - Arguments to filter Families to delete.
     * @example
     * // Delete a few Families
     * const { count } = await prisma.family.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FamilyDeleteManyArgs>(args?: SelectSubset<T, FamilyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Families.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Families
     * const family = await prisma.family.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FamilyUpdateManyArgs>(args: SelectSubset<T, FamilyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Family.
     * @param {FamilyUpsertArgs} args - Arguments to update or create a Family.
     * @example
     * // Update or create a Family
     * const family = await prisma.family.upsert({
     *   create: {
     *     // ... data to create a Family
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Family we want to update
     *   }
     * })
     */
    upsert<T extends FamilyUpsertArgs>(args: SelectSubset<T, FamilyUpsertArgs<ExtArgs>>): Prisma__FamilyClient<$Result.GetResult<Prisma.$FamilyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Families.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyCountArgs} args - Arguments to filter Families to count.
     * @example
     * // Count the number of Families
     * const count = await prisma.family.count({
     *   where: {
     *     // ... the filter for the Families we want to count
     *   }
     * })
    **/
    count<T extends FamilyCountArgs>(
      args?: Subset<T, FamilyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FamilyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Family.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FamilyAggregateArgs>(args: Subset<T, FamilyAggregateArgs>): Prisma.PrismaPromise<GetFamilyAggregateType<T>>

    /**
     * Group by Family.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FamilyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FamilyGroupByArgs['orderBy'] }
        : { orderBy?: FamilyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FamilyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFamilyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Family model
   */
  readonly fields: FamilyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Family.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FamilyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    child<T extends ChildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChildDefaultArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Family model
   */
  interface FamilyFieldRefs {
    readonly clientId: FieldRef<"Family", 'String'>
    readonly childId: FieldRef<"Family", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Family findUnique
   */
  export type FamilyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Family
     */
    omit?: FamilyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * Filter, which Family to fetch.
     */
    where: FamilyWhereUniqueInput
  }

  /**
   * Family findUniqueOrThrow
   */
  export type FamilyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Family
     */
    omit?: FamilyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * Filter, which Family to fetch.
     */
    where: FamilyWhereUniqueInput
  }

  /**
   * Family findFirst
   */
  export type FamilyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Family
     */
    omit?: FamilyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * Filter, which Family to fetch.
     */
    where?: FamilyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Families to fetch.
     */
    orderBy?: FamilyOrderByWithRelationInput | FamilyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Families.
     */
    cursor?: FamilyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Families from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Families.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Families.
     */
    distinct?: FamilyScalarFieldEnum | FamilyScalarFieldEnum[]
  }

  /**
   * Family findFirstOrThrow
   */
  export type FamilyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Family
     */
    omit?: FamilyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * Filter, which Family to fetch.
     */
    where?: FamilyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Families to fetch.
     */
    orderBy?: FamilyOrderByWithRelationInput | FamilyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Families.
     */
    cursor?: FamilyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Families from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Families.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Families.
     */
    distinct?: FamilyScalarFieldEnum | FamilyScalarFieldEnum[]
  }

  /**
   * Family findMany
   */
  export type FamilyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Family
     */
    omit?: FamilyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * Filter, which Families to fetch.
     */
    where?: FamilyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Families to fetch.
     */
    orderBy?: FamilyOrderByWithRelationInput | FamilyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Families.
     */
    cursor?: FamilyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Families from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Families.
     */
    skip?: number
    distinct?: FamilyScalarFieldEnum | FamilyScalarFieldEnum[]
  }

  /**
   * Family create
   */
  export type FamilyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Family
     */
    omit?: FamilyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * The data needed to create a Family.
     */
    data: XOR<FamilyCreateInput, FamilyUncheckedCreateInput>
  }

  /**
   * Family createMany
   */
  export type FamilyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Families.
     */
    data: FamilyCreateManyInput | FamilyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Family update
   */
  export type FamilyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Family
     */
    omit?: FamilyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * The data needed to update a Family.
     */
    data: XOR<FamilyUpdateInput, FamilyUncheckedUpdateInput>
    /**
     * Choose, which Family to update.
     */
    where: FamilyWhereUniqueInput
  }

  /**
   * Family updateMany
   */
  export type FamilyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Families.
     */
    data: XOR<FamilyUpdateManyMutationInput, FamilyUncheckedUpdateManyInput>
    /**
     * Filter which Families to update
     */
    where?: FamilyWhereInput
    /**
     * Limit how many Families to update.
     */
    limit?: number
  }

  /**
   * Family upsert
   */
  export type FamilyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Family
     */
    omit?: FamilyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * The filter to search for the Family to update in case it exists.
     */
    where: FamilyWhereUniqueInput
    /**
     * In case the Family found by the `where` argument doesn't exist, create a new Family with this data.
     */
    create: XOR<FamilyCreateInput, FamilyUncheckedCreateInput>
    /**
     * In case the Family was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FamilyUpdateInput, FamilyUncheckedUpdateInput>
  }

  /**
   * Family delete
   */
  export type FamilyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Family
     */
    omit?: FamilyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
    /**
     * Filter which Family to delete.
     */
    where: FamilyWhereUniqueInput
  }

  /**
   * Family deleteMany
   */
  export type FamilyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Families to delete
     */
    where?: FamilyWhereInput
    /**
     * Limit how many Families to delete.
     */
    limit?: number
  }

  /**
   * Family without action
   */
  export type FamilyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Family
     */
    select?: FamilySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Family
     */
    omit?: FamilyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyInclude<ExtArgs> | null
  }


  /**
   * Model YogaClass
   */

  export type AggregateYogaClass = {
    _count: YogaClassCountAggregateOutputType | null
    _avg: YogaClassAvgAggregateOutputType | null
    _sum: YogaClassSumAggregateOutputType | null
    _min: YogaClassMinAggregateOutputType | null
    _max: YogaClassMaxAggregateOutputType | null
  }

  export type YogaClassAvgAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type YogaClassSumAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type YogaClassMinAggregateOutputType = {
    id: number | null
    type: $Enums.YogaClassType | null
    status: $Enums.YogaClassStatus | null
    locationId: number | null
    date: Date | null
    instructorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YogaClassMaxAggregateOutputType = {
    id: number | null
    type: $Enums.YogaClassType | null
    status: $Enums.YogaClassStatus | null
    locationId: number | null
    date: Date | null
    instructorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YogaClassCountAggregateOutputType = {
    id: number
    type: number
    status: number
    locationId: number
    date: number
    instructorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YogaClassAvgAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type YogaClassSumAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type YogaClassMinAggregateInputType = {
    id?: true
    type?: true
    status?: true
    locationId?: true
    date?: true
    instructorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YogaClassMaxAggregateInputType = {
    id?: true
    type?: true
    status?: true
    locationId?: true
    date?: true
    instructorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YogaClassCountAggregateInputType = {
    id?: true
    type?: true
    status?: true
    locationId?: true
    date?: true
    instructorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YogaClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YogaClass to aggregate.
     */
    where?: YogaClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaClasses to fetch.
     */
    orderBy?: YogaClassOrderByWithRelationInput | YogaClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YogaClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YogaClasses
    **/
    _count?: true | YogaClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YogaClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YogaClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YogaClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YogaClassMaxAggregateInputType
  }

  export type GetYogaClassAggregateType<T extends YogaClassAggregateArgs> = {
        [P in keyof T & keyof AggregateYogaClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYogaClass[P]>
      : GetScalarType<T[P], AggregateYogaClass[P]>
  }




  export type YogaClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YogaClassWhereInput
    orderBy?: YogaClassOrderByWithAggregationInput | YogaClassOrderByWithAggregationInput[]
    by: YogaClassScalarFieldEnum[] | YogaClassScalarFieldEnum
    having?: YogaClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YogaClassCountAggregateInputType | true
    _avg?: YogaClassAvgAggregateInputType
    _sum?: YogaClassSumAggregateInputType
    _min?: YogaClassMinAggregateInputType
    _max?: YogaClassMaxAggregateInputType
  }

  export type YogaClassGroupByOutputType = {
    id: number
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    locationId: number
    date: Date
    instructorId: string
    createdAt: Date
    updatedAt: Date
    _count: YogaClassCountAggregateOutputType | null
    _avg: YogaClassAvgAggregateOutputType | null
    _sum: YogaClassSumAggregateOutputType | null
    _min: YogaClassMinAggregateOutputType | null
    _max: YogaClassMaxAggregateOutputType | null
  }

  type GetYogaClassGroupByPayload<T extends YogaClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<YogaClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YogaClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YogaClassGroupByOutputType[P]>
            : GetScalarType<T[P], YogaClassGroupByOutputType[P]>
        }
      >
    >


  export type YogaClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    status?: boolean
    locationId?: boolean
    date?: boolean
    instructorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    transactions?: boolean | YogaClass$transactionsArgs<ExtArgs>
    instructor?: boolean | UserDefaultArgs<ExtArgs>
    adultStudents?: boolean | YogaClass$adultStudentsArgs<ExtArgs>
    childStudents?: boolean | YogaClass$childStudentsArgs<ExtArgs>
    rollCall?: boolean | YogaClass$rollCallArgs<ExtArgs>
    _count?: boolean | YogaClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["yogaClass"]>



  export type YogaClassSelectScalar = {
    id?: boolean
    type?: boolean
    status?: boolean
    locationId?: boolean
    date?: boolean
    instructorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type YogaClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "status" | "locationId" | "date" | "instructorId" | "createdAt" | "updatedAt", ExtArgs["result"]["yogaClass"]>
  export type YogaClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    transactions?: boolean | YogaClass$transactionsArgs<ExtArgs>
    instructor?: boolean | UserDefaultArgs<ExtArgs>
    adultStudents?: boolean | YogaClass$adultStudentsArgs<ExtArgs>
    childStudents?: boolean | YogaClass$childStudentsArgs<ExtArgs>
    rollCall?: boolean | YogaClass$rollCallArgs<ExtArgs>
    _count?: boolean | YogaClassCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $YogaClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "YogaClass"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs>
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      instructor: Prisma.$UserPayload<ExtArgs>
      adultStudents: Prisma.$YogaAdultStudentPayload<ExtArgs>[]
      childStudents: Prisma.$YogaChildStudentPayload<ExtArgs>[]
      rollCall: Prisma.$RollCallPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: $Enums.YogaClassType
      status: $Enums.YogaClassStatus
      locationId: number
      date: Date
      instructorId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["yogaClass"]>
    composites: {}
  }

  type YogaClassGetPayload<S extends boolean | null | undefined | YogaClassDefaultArgs> = $Result.GetResult<Prisma.$YogaClassPayload, S>

  type YogaClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<YogaClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: YogaClassCountAggregateInputType | true
    }

  export interface YogaClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['YogaClass'], meta: { name: 'YogaClass' } }
    /**
     * Find zero or one YogaClass that matches the filter.
     * @param {YogaClassFindUniqueArgs} args - Arguments to find a YogaClass
     * @example
     * // Get one YogaClass
     * const yogaClass = await prisma.yogaClass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends YogaClassFindUniqueArgs>(args: SelectSubset<T, YogaClassFindUniqueArgs<ExtArgs>>): Prisma__YogaClassClient<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one YogaClass that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {YogaClassFindUniqueOrThrowArgs} args - Arguments to find a YogaClass
     * @example
     * // Get one YogaClass
     * const yogaClass = await prisma.yogaClass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends YogaClassFindUniqueOrThrowArgs>(args: SelectSubset<T, YogaClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__YogaClassClient<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first YogaClass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaClassFindFirstArgs} args - Arguments to find a YogaClass
     * @example
     * // Get one YogaClass
     * const yogaClass = await prisma.yogaClass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends YogaClassFindFirstArgs>(args?: SelectSubset<T, YogaClassFindFirstArgs<ExtArgs>>): Prisma__YogaClassClient<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first YogaClass that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaClassFindFirstOrThrowArgs} args - Arguments to find a YogaClass
     * @example
     * // Get one YogaClass
     * const yogaClass = await prisma.yogaClass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends YogaClassFindFirstOrThrowArgs>(args?: SelectSubset<T, YogaClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__YogaClassClient<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more YogaClasses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YogaClasses
     * const yogaClasses = await prisma.yogaClass.findMany()
     * 
     * // Get first 10 YogaClasses
     * const yogaClasses = await prisma.yogaClass.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yogaClassWithIdOnly = await prisma.yogaClass.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends YogaClassFindManyArgs>(args?: SelectSubset<T, YogaClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a YogaClass.
     * @param {YogaClassCreateArgs} args - Arguments to create a YogaClass.
     * @example
     * // Create one YogaClass
     * const YogaClass = await prisma.yogaClass.create({
     *   data: {
     *     // ... data to create a YogaClass
     *   }
     * })
     * 
     */
    create<T extends YogaClassCreateArgs>(args: SelectSubset<T, YogaClassCreateArgs<ExtArgs>>): Prisma__YogaClassClient<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many YogaClasses.
     * @param {YogaClassCreateManyArgs} args - Arguments to create many YogaClasses.
     * @example
     * // Create many YogaClasses
     * const yogaClass = await prisma.yogaClass.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends YogaClassCreateManyArgs>(args?: SelectSubset<T, YogaClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YogaClass.
     * @param {YogaClassDeleteArgs} args - Arguments to delete one YogaClass.
     * @example
     * // Delete one YogaClass
     * const YogaClass = await prisma.yogaClass.delete({
     *   where: {
     *     // ... filter to delete one YogaClass
     *   }
     * })
     * 
     */
    delete<T extends YogaClassDeleteArgs>(args: SelectSubset<T, YogaClassDeleteArgs<ExtArgs>>): Prisma__YogaClassClient<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one YogaClass.
     * @param {YogaClassUpdateArgs} args - Arguments to update one YogaClass.
     * @example
     * // Update one YogaClass
     * const yogaClass = await prisma.yogaClass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends YogaClassUpdateArgs>(args: SelectSubset<T, YogaClassUpdateArgs<ExtArgs>>): Prisma__YogaClassClient<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more YogaClasses.
     * @param {YogaClassDeleteManyArgs} args - Arguments to filter YogaClasses to delete.
     * @example
     * // Delete a few YogaClasses
     * const { count } = await prisma.yogaClass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends YogaClassDeleteManyArgs>(args?: SelectSubset<T, YogaClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YogaClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YogaClasses
     * const yogaClass = await prisma.yogaClass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends YogaClassUpdateManyArgs>(args: SelectSubset<T, YogaClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YogaClass.
     * @param {YogaClassUpsertArgs} args - Arguments to update or create a YogaClass.
     * @example
     * // Update or create a YogaClass
     * const yogaClass = await prisma.yogaClass.upsert({
     *   create: {
     *     // ... data to create a YogaClass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YogaClass we want to update
     *   }
     * })
     */
    upsert<T extends YogaClassUpsertArgs>(args: SelectSubset<T, YogaClassUpsertArgs<ExtArgs>>): Prisma__YogaClassClient<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of YogaClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaClassCountArgs} args - Arguments to filter YogaClasses to count.
     * @example
     * // Count the number of YogaClasses
     * const count = await prisma.yogaClass.count({
     *   where: {
     *     // ... the filter for the YogaClasses we want to count
     *   }
     * })
    **/
    count<T extends YogaClassCountArgs>(
      args?: Subset<T, YogaClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YogaClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YogaClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YogaClassAggregateArgs>(args: Subset<T, YogaClassAggregateArgs>): Prisma.PrismaPromise<GetYogaClassAggregateType<T>>

    /**
     * Group by YogaClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YogaClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YogaClassGroupByArgs['orderBy'] }
        : { orderBy?: YogaClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YogaClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYogaClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the YogaClass model
   */
  readonly fields: YogaClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for YogaClass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__YogaClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactions<T extends YogaClass$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, YogaClass$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    instructor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    adultStudents<T extends YogaClass$adultStudentsArgs<ExtArgs> = {}>(args?: Subset<T, YogaClass$adultStudentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YogaAdultStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    childStudents<T extends YogaClass$childStudentsArgs<ExtArgs> = {}>(args?: Subset<T, YogaClass$childStudentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YogaChildStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rollCall<T extends YogaClass$rollCallArgs<ExtArgs> = {}>(args?: Subset<T, YogaClass$rollCallArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the YogaClass model
   */
  interface YogaClassFieldRefs {
    readonly id: FieldRef<"YogaClass", 'Int'>
    readonly type: FieldRef<"YogaClass", 'YogaClassType'>
    readonly status: FieldRef<"YogaClass", 'YogaClassStatus'>
    readonly locationId: FieldRef<"YogaClass", 'Int'>
    readonly date: FieldRef<"YogaClass", 'DateTime'>
    readonly instructorId: FieldRef<"YogaClass", 'String'>
    readonly createdAt: FieldRef<"YogaClass", 'DateTime'>
    readonly updatedAt: FieldRef<"YogaClass", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * YogaClass findUnique
   */
  export type YogaClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
    /**
     * Filter, which YogaClass to fetch.
     */
    where: YogaClassWhereUniqueInput
  }

  /**
   * YogaClass findUniqueOrThrow
   */
  export type YogaClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
    /**
     * Filter, which YogaClass to fetch.
     */
    where: YogaClassWhereUniqueInput
  }

  /**
   * YogaClass findFirst
   */
  export type YogaClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
    /**
     * Filter, which YogaClass to fetch.
     */
    where?: YogaClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaClasses to fetch.
     */
    orderBy?: YogaClassOrderByWithRelationInput | YogaClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YogaClasses.
     */
    cursor?: YogaClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YogaClasses.
     */
    distinct?: YogaClassScalarFieldEnum | YogaClassScalarFieldEnum[]
  }

  /**
   * YogaClass findFirstOrThrow
   */
  export type YogaClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
    /**
     * Filter, which YogaClass to fetch.
     */
    where?: YogaClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaClasses to fetch.
     */
    orderBy?: YogaClassOrderByWithRelationInput | YogaClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YogaClasses.
     */
    cursor?: YogaClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YogaClasses.
     */
    distinct?: YogaClassScalarFieldEnum | YogaClassScalarFieldEnum[]
  }

  /**
   * YogaClass findMany
   */
  export type YogaClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
    /**
     * Filter, which YogaClasses to fetch.
     */
    where?: YogaClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaClasses to fetch.
     */
    orderBy?: YogaClassOrderByWithRelationInput | YogaClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YogaClasses.
     */
    cursor?: YogaClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaClasses.
     */
    skip?: number
    distinct?: YogaClassScalarFieldEnum | YogaClassScalarFieldEnum[]
  }

  /**
   * YogaClass create
   */
  export type YogaClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
    /**
     * The data needed to create a YogaClass.
     */
    data: XOR<YogaClassCreateInput, YogaClassUncheckedCreateInput>
  }

  /**
   * YogaClass createMany
   */
  export type YogaClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many YogaClasses.
     */
    data: YogaClassCreateManyInput | YogaClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * YogaClass update
   */
  export type YogaClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
    /**
     * The data needed to update a YogaClass.
     */
    data: XOR<YogaClassUpdateInput, YogaClassUncheckedUpdateInput>
    /**
     * Choose, which YogaClass to update.
     */
    where: YogaClassWhereUniqueInput
  }

  /**
   * YogaClass updateMany
   */
  export type YogaClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update YogaClasses.
     */
    data: XOR<YogaClassUpdateManyMutationInput, YogaClassUncheckedUpdateManyInput>
    /**
     * Filter which YogaClasses to update
     */
    where?: YogaClassWhereInput
    /**
     * Limit how many YogaClasses to update.
     */
    limit?: number
  }

  /**
   * YogaClass upsert
   */
  export type YogaClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
    /**
     * The filter to search for the YogaClass to update in case it exists.
     */
    where: YogaClassWhereUniqueInput
    /**
     * In case the YogaClass found by the `where` argument doesn't exist, create a new YogaClass with this data.
     */
    create: XOR<YogaClassCreateInput, YogaClassUncheckedCreateInput>
    /**
     * In case the YogaClass was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YogaClassUpdateInput, YogaClassUncheckedUpdateInput>
  }

  /**
   * YogaClass delete
   */
  export type YogaClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
    /**
     * Filter which YogaClass to delete.
     */
    where: YogaClassWhereUniqueInput
  }

  /**
   * YogaClass deleteMany
   */
  export type YogaClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YogaClasses to delete
     */
    where?: YogaClassWhereInput
    /**
     * Limit how many YogaClasses to delete.
     */
    limit?: number
  }

  /**
   * YogaClass.transactions
   */
  export type YogaClass$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * YogaClass.adultStudents
   */
  export type YogaClass$adultStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaAdultStudent
     */
    select?: YogaAdultStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaAdultStudent
     */
    omit?: YogaAdultStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaAdultStudentInclude<ExtArgs> | null
    where?: YogaAdultStudentWhereInput
    orderBy?: YogaAdultStudentOrderByWithRelationInput | YogaAdultStudentOrderByWithRelationInput[]
    cursor?: YogaAdultStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: YogaAdultStudentScalarFieldEnum | YogaAdultStudentScalarFieldEnum[]
  }

  /**
   * YogaClass.childStudents
   */
  export type YogaClass$childStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaChildStudent
     */
    select?: YogaChildStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaChildStudent
     */
    omit?: YogaChildStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaChildStudentInclude<ExtArgs> | null
    where?: YogaChildStudentWhereInput
    orderBy?: YogaChildStudentOrderByWithRelationInput | YogaChildStudentOrderByWithRelationInput[]
    cursor?: YogaChildStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: YogaChildStudentScalarFieldEnum | YogaChildStudentScalarFieldEnum[]
  }

  /**
   * YogaClass.rollCall
   */
  export type YogaClass$rollCallArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    where?: RollCallWhereInput
  }

  /**
   * YogaClass without action
   */
  export type YogaClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    id: number | null
  }

  export type LocationSumAggregateOutputType = {
    id: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    neighborhood: string | null
    city: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    neighborhood: string | null
    city: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    name: number
    address: number
    neighborhood: number
    city: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    id?: true
  }

  export type LocationSumAggregateInputType = {
    id?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    neighborhood?: true
    city?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    neighborhood?: true
    city?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    neighborhood?: true
    city?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: number
    name: string
    address: string
    neighborhood: string
    city: string
    createdAt: Date
    updatedAt: Date
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    neighborhood?: boolean
    city?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    classes?: boolean | Location$classesArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>



  export type LocationSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    neighborhood?: boolean
    city?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "neighborhood" | "city" | "createdAt" | "updatedAt", ExtArgs["result"]["location"]>
  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes?: boolean | Location$classesArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      classes: Prisma.$YogaClassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string
      neighborhood: string
      city: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classes<T extends Location$classesArgs<ExtArgs> = {}>(args?: Subset<T, Location$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'Int'>
    readonly name: FieldRef<"Location", 'String'>
    readonly address: FieldRef<"Location", 'String'>
    readonly neighborhood: FieldRef<"Location", 'String'>
    readonly city: FieldRef<"Location", 'String'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
    readonly updatedAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to delete.
     */
    limit?: number
  }

  /**
   * Location.classes
   */
  export type Location$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
    where?: YogaClassWhereInput
    orderBy?: YogaClassOrderByWithRelationInput | YogaClassOrderByWithRelationInput[]
    cursor?: YogaClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: YogaClassScalarFieldEnum | YogaClassScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model YogaChildStudent
   */

  export type AggregateYogaChildStudent = {
    _count: YogaChildStudentCountAggregateOutputType | null
    _avg: YogaChildStudentAvgAggregateOutputType | null
    _sum: YogaChildStudentSumAggregateOutputType | null
    _min: YogaChildStudentMinAggregateOutputType | null
    _max: YogaChildStudentMaxAggregateOutputType | null
  }

  export type YogaChildStudentAvgAggregateOutputType = {
    yogaClassId: number | null
  }

  export type YogaChildStudentSumAggregateOutputType = {
    yogaClassId: number | null
  }

  export type YogaChildStudentMinAggregateOutputType = {
    yogaClassId: number | null
    studentId: string | null
  }

  export type YogaChildStudentMaxAggregateOutputType = {
    yogaClassId: number | null
    studentId: string | null
  }

  export type YogaChildStudentCountAggregateOutputType = {
    yogaClassId: number
    studentId: number
    _all: number
  }


  export type YogaChildStudentAvgAggregateInputType = {
    yogaClassId?: true
  }

  export type YogaChildStudentSumAggregateInputType = {
    yogaClassId?: true
  }

  export type YogaChildStudentMinAggregateInputType = {
    yogaClassId?: true
    studentId?: true
  }

  export type YogaChildStudentMaxAggregateInputType = {
    yogaClassId?: true
    studentId?: true
  }

  export type YogaChildStudentCountAggregateInputType = {
    yogaClassId?: true
    studentId?: true
    _all?: true
  }

  export type YogaChildStudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YogaChildStudent to aggregate.
     */
    where?: YogaChildStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaChildStudents to fetch.
     */
    orderBy?: YogaChildStudentOrderByWithRelationInput | YogaChildStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YogaChildStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaChildStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaChildStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YogaChildStudents
    **/
    _count?: true | YogaChildStudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YogaChildStudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YogaChildStudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YogaChildStudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YogaChildStudentMaxAggregateInputType
  }

  export type GetYogaChildStudentAggregateType<T extends YogaChildStudentAggregateArgs> = {
        [P in keyof T & keyof AggregateYogaChildStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYogaChildStudent[P]>
      : GetScalarType<T[P], AggregateYogaChildStudent[P]>
  }




  export type YogaChildStudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YogaChildStudentWhereInput
    orderBy?: YogaChildStudentOrderByWithAggregationInput | YogaChildStudentOrderByWithAggregationInput[]
    by: YogaChildStudentScalarFieldEnum[] | YogaChildStudentScalarFieldEnum
    having?: YogaChildStudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YogaChildStudentCountAggregateInputType | true
    _avg?: YogaChildStudentAvgAggregateInputType
    _sum?: YogaChildStudentSumAggregateInputType
    _min?: YogaChildStudentMinAggregateInputType
    _max?: YogaChildStudentMaxAggregateInputType
  }

  export type YogaChildStudentGroupByOutputType = {
    yogaClassId: number
    studentId: string
    _count: YogaChildStudentCountAggregateOutputType | null
    _avg: YogaChildStudentAvgAggregateOutputType | null
    _sum: YogaChildStudentSumAggregateOutputType | null
    _min: YogaChildStudentMinAggregateOutputType | null
    _max: YogaChildStudentMaxAggregateOutputType | null
  }

  type GetYogaChildStudentGroupByPayload<T extends YogaChildStudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<YogaChildStudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YogaChildStudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YogaChildStudentGroupByOutputType[P]>
            : GetScalarType<T[P], YogaChildStudentGroupByOutputType[P]>
        }
      >
    >


  export type YogaChildStudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    yogaClassId?: boolean
    studentId?: boolean
    yogaClass?: boolean | YogaClassDefaultArgs<ExtArgs>
    student?: boolean | ChildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["yogaChildStudent"]>



  export type YogaChildStudentSelectScalar = {
    yogaClassId?: boolean
    studentId?: boolean
  }

  export type YogaChildStudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"yogaClassId" | "studentId", ExtArgs["result"]["yogaChildStudent"]>
  export type YogaChildStudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    yogaClass?: boolean | YogaClassDefaultArgs<ExtArgs>
    student?: boolean | ChildDefaultArgs<ExtArgs>
  }

  export type $YogaChildStudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "YogaChildStudent"
    objects: {
      yogaClass: Prisma.$YogaClassPayload<ExtArgs>
      student: Prisma.$ChildPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      yogaClassId: number
      studentId: string
    }, ExtArgs["result"]["yogaChildStudent"]>
    composites: {}
  }

  type YogaChildStudentGetPayload<S extends boolean | null | undefined | YogaChildStudentDefaultArgs> = $Result.GetResult<Prisma.$YogaChildStudentPayload, S>

  type YogaChildStudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<YogaChildStudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: YogaChildStudentCountAggregateInputType | true
    }

  export interface YogaChildStudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['YogaChildStudent'], meta: { name: 'YogaChildStudent' } }
    /**
     * Find zero or one YogaChildStudent that matches the filter.
     * @param {YogaChildStudentFindUniqueArgs} args - Arguments to find a YogaChildStudent
     * @example
     * // Get one YogaChildStudent
     * const yogaChildStudent = await prisma.yogaChildStudent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends YogaChildStudentFindUniqueArgs>(args: SelectSubset<T, YogaChildStudentFindUniqueArgs<ExtArgs>>): Prisma__YogaChildStudentClient<$Result.GetResult<Prisma.$YogaChildStudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one YogaChildStudent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {YogaChildStudentFindUniqueOrThrowArgs} args - Arguments to find a YogaChildStudent
     * @example
     * // Get one YogaChildStudent
     * const yogaChildStudent = await prisma.yogaChildStudent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends YogaChildStudentFindUniqueOrThrowArgs>(args: SelectSubset<T, YogaChildStudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__YogaChildStudentClient<$Result.GetResult<Prisma.$YogaChildStudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first YogaChildStudent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaChildStudentFindFirstArgs} args - Arguments to find a YogaChildStudent
     * @example
     * // Get one YogaChildStudent
     * const yogaChildStudent = await prisma.yogaChildStudent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends YogaChildStudentFindFirstArgs>(args?: SelectSubset<T, YogaChildStudentFindFirstArgs<ExtArgs>>): Prisma__YogaChildStudentClient<$Result.GetResult<Prisma.$YogaChildStudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first YogaChildStudent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaChildStudentFindFirstOrThrowArgs} args - Arguments to find a YogaChildStudent
     * @example
     * // Get one YogaChildStudent
     * const yogaChildStudent = await prisma.yogaChildStudent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends YogaChildStudentFindFirstOrThrowArgs>(args?: SelectSubset<T, YogaChildStudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__YogaChildStudentClient<$Result.GetResult<Prisma.$YogaChildStudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more YogaChildStudents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaChildStudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YogaChildStudents
     * const yogaChildStudents = await prisma.yogaChildStudent.findMany()
     * 
     * // Get first 10 YogaChildStudents
     * const yogaChildStudents = await prisma.yogaChildStudent.findMany({ take: 10 })
     * 
     * // Only select the `yogaClassId`
     * const yogaChildStudentWithYogaClassIdOnly = await prisma.yogaChildStudent.findMany({ select: { yogaClassId: true } })
     * 
     */
    findMany<T extends YogaChildStudentFindManyArgs>(args?: SelectSubset<T, YogaChildStudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YogaChildStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a YogaChildStudent.
     * @param {YogaChildStudentCreateArgs} args - Arguments to create a YogaChildStudent.
     * @example
     * // Create one YogaChildStudent
     * const YogaChildStudent = await prisma.yogaChildStudent.create({
     *   data: {
     *     // ... data to create a YogaChildStudent
     *   }
     * })
     * 
     */
    create<T extends YogaChildStudentCreateArgs>(args: SelectSubset<T, YogaChildStudentCreateArgs<ExtArgs>>): Prisma__YogaChildStudentClient<$Result.GetResult<Prisma.$YogaChildStudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many YogaChildStudents.
     * @param {YogaChildStudentCreateManyArgs} args - Arguments to create many YogaChildStudents.
     * @example
     * // Create many YogaChildStudents
     * const yogaChildStudent = await prisma.yogaChildStudent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends YogaChildStudentCreateManyArgs>(args?: SelectSubset<T, YogaChildStudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YogaChildStudent.
     * @param {YogaChildStudentDeleteArgs} args - Arguments to delete one YogaChildStudent.
     * @example
     * // Delete one YogaChildStudent
     * const YogaChildStudent = await prisma.yogaChildStudent.delete({
     *   where: {
     *     // ... filter to delete one YogaChildStudent
     *   }
     * })
     * 
     */
    delete<T extends YogaChildStudentDeleteArgs>(args: SelectSubset<T, YogaChildStudentDeleteArgs<ExtArgs>>): Prisma__YogaChildStudentClient<$Result.GetResult<Prisma.$YogaChildStudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one YogaChildStudent.
     * @param {YogaChildStudentUpdateArgs} args - Arguments to update one YogaChildStudent.
     * @example
     * // Update one YogaChildStudent
     * const yogaChildStudent = await prisma.yogaChildStudent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends YogaChildStudentUpdateArgs>(args: SelectSubset<T, YogaChildStudentUpdateArgs<ExtArgs>>): Prisma__YogaChildStudentClient<$Result.GetResult<Prisma.$YogaChildStudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more YogaChildStudents.
     * @param {YogaChildStudentDeleteManyArgs} args - Arguments to filter YogaChildStudents to delete.
     * @example
     * // Delete a few YogaChildStudents
     * const { count } = await prisma.yogaChildStudent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends YogaChildStudentDeleteManyArgs>(args?: SelectSubset<T, YogaChildStudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YogaChildStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaChildStudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YogaChildStudents
     * const yogaChildStudent = await prisma.yogaChildStudent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends YogaChildStudentUpdateManyArgs>(args: SelectSubset<T, YogaChildStudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YogaChildStudent.
     * @param {YogaChildStudentUpsertArgs} args - Arguments to update or create a YogaChildStudent.
     * @example
     * // Update or create a YogaChildStudent
     * const yogaChildStudent = await prisma.yogaChildStudent.upsert({
     *   create: {
     *     // ... data to create a YogaChildStudent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YogaChildStudent we want to update
     *   }
     * })
     */
    upsert<T extends YogaChildStudentUpsertArgs>(args: SelectSubset<T, YogaChildStudentUpsertArgs<ExtArgs>>): Prisma__YogaChildStudentClient<$Result.GetResult<Prisma.$YogaChildStudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of YogaChildStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaChildStudentCountArgs} args - Arguments to filter YogaChildStudents to count.
     * @example
     * // Count the number of YogaChildStudents
     * const count = await prisma.yogaChildStudent.count({
     *   where: {
     *     // ... the filter for the YogaChildStudents we want to count
     *   }
     * })
    **/
    count<T extends YogaChildStudentCountArgs>(
      args?: Subset<T, YogaChildStudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YogaChildStudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YogaChildStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaChildStudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YogaChildStudentAggregateArgs>(args: Subset<T, YogaChildStudentAggregateArgs>): Prisma.PrismaPromise<GetYogaChildStudentAggregateType<T>>

    /**
     * Group by YogaChildStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaChildStudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YogaChildStudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YogaChildStudentGroupByArgs['orderBy'] }
        : { orderBy?: YogaChildStudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YogaChildStudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYogaChildStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the YogaChildStudent model
   */
  readonly fields: YogaChildStudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for YogaChildStudent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__YogaChildStudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    yogaClass<T extends YogaClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, YogaClassDefaultArgs<ExtArgs>>): Prisma__YogaClassClient<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends ChildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChildDefaultArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the YogaChildStudent model
   */
  interface YogaChildStudentFieldRefs {
    readonly yogaClassId: FieldRef<"YogaChildStudent", 'Int'>
    readonly studentId: FieldRef<"YogaChildStudent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * YogaChildStudent findUnique
   */
  export type YogaChildStudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaChildStudent
     */
    select?: YogaChildStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaChildStudent
     */
    omit?: YogaChildStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaChildStudentInclude<ExtArgs> | null
    /**
     * Filter, which YogaChildStudent to fetch.
     */
    where: YogaChildStudentWhereUniqueInput
  }

  /**
   * YogaChildStudent findUniqueOrThrow
   */
  export type YogaChildStudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaChildStudent
     */
    select?: YogaChildStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaChildStudent
     */
    omit?: YogaChildStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaChildStudentInclude<ExtArgs> | null
    /**
     * Filter, which YogaChildStudent to fetch.
     */
    where: YogaChildStudentWhereUniqueInput
  }

  /**
   * YogaChildStudent findFirst
   */
  export type YogaChildStudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaChildStudent
     */
    select?: YogaChildStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaChildStudent
     */
    omit?: YogaChildStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaChildStudentInclude<ExtArgs> | null
    /**
     * Filter, which YogaChildStudent to fetch.
     */
    where?: YogaChildStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaChildStudents to fetch.
     */
    orderBy?: YogaChildStudentOrderByWithRelationInput | YogaChildStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YogaChildStudents.
     */
    cursor?: YogaChildStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaChildStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaChildStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YogaChildStudents.
     */
    distinct?: YogaChildStudentScalarFieldEnum | YogaChildStudentScalarFieldEnum[]
  }

  /**
   * YogaChildStudent findFirstOrThrow
   */
  export type YogaChildStudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaChildStudent
     */
    select?: YogaChildStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaChildStudent
     */
    omit?: YogaChildStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaChildStudentInclude<ExtArgs> | null
    /**
     * Filter, which YogaChildStudent to fetch.
     */
    where?: YogaChildStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaChildStudents to fetch.
     */
    orderBy?: YogaChildStudentOrderByWithRelationInput | YogaChildStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YogaChildStudents.
     */
    cursor?: YogaChildStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaChildStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaChildStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YogaChildStudents.
     */
    distinct?: YogaChildStudentScalarFieldEnum | YogaChildStudentScalarFieldEnum[]
  }

  /**
   * YogaChildStudent findMany
   */
  export type YogaChildStudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaChildStudent
     */
    select?: YogaChildStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaChildStudent
     */
    omit?: YogaChildStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaChildStudentInclude<ExtArgs> | null
    /**
     * Filter, which YogaChildStudents to fetch.
     */
    where?: YogaChildStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaChildStudents to fetch.
     */
    orderBy?: YogaChildStudentOrderByWithRelationInput | YogaChildStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YogaChildStudents.
     */
    cursor?: YogaChildStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaChildStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaChildStudents.
     */
    skip?: number
    distinct?: YogaChildStudentScalarFieldEnum | YogaChildStudentScalarFieldEnum[]
  }

  /**
   * YogaChildStudent create
   */
  export type YogaChildStudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaChildStudent
     */
    select?: YogaChildStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaChildStudent
     */
    omit?: YogaChildStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaChildStudentInclude<ExtArgs> | null
    /**
     * The data needed to create a YogaChildStudent.
     */
    data: XOR<YogaChildStudentCreateInput, YogaChildStudentUncheckedCreateInput>
  }

  /**
   * YogaChildStudent createMany
   */
  export type YogaChildStudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many YogaChildStudents.
     */
    data: YogaChildStudentCreateManyInput | YogaChildStudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * YogaChildStudent update
   */
  export type YogaChildStudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaChildStudent
     */
    select?: YogaChildStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaChildStudent
     */
    omit?: YogaChildStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaChildStudentInclude<ExtArgs> | null
    /**
     * The data needed to update a YogaChildStudent.
     */
    data: XOR<YogaChildStudentUpdateInput, YogaChildStudentUncheckedUpdateInput>
    /**
     * Choose, which YogaChildStudent to update.
     */
    where: YogaChildStudentWhereUniqueInput
  }

  /**
   * YogaChildStudent updateMany
   */
  export type YogaChildStudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update YogaChildStudents.
     */
    data: XOR<YogaChildStudentUpdateManyMutationInput, YogaChildStudentUncheckedUpdateManyInput>
    /**
     * Filter which YogaChildStudents to update
     */
    where?: YogaChildStudentWhereInput
    /**
     * Limit how many YogaChildStudents to update.
     */
    limit?: number
  }

  /**
   * YogaChildStudent upsert
   */
  export type YogaChildStudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaChildStudent
     */
    select?: YogaChildStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaChildStudent
     */
    omit?: YogaChildStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaChildStudentInclude<ExtArgs> | null
    /**
     * The filter to search for the YogaChildStudent to update in case it exists.
     */
    where: YogaChildStudentWhereUniqueInput
    /**
     * In case the YogaChildStudent found by the `where` argument doesn't exist, create a new YogaChildStudent with this data.
     */
    create: XOR<YogaChildStudentCreateInput, YogaChildStudentUncheckedCreateInput>
    /**
     * In case the YogaChildStudent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YogaChildStudentUpdateInput, YogaChildStudentUncheckedUpdateInput>
  }

  /**
   * YogaChildStudent delete
   */
  export type YogaChildStudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaChildStudent
     */
    select?: YogaChildStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaChildStudent
     */
    omit?: YogaChildStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaChildStudentInclude<ExtArgs> | null
    /**
     * Filter which YogaChildStudent to delete.
     */
    where: YogaChildStudentWhereUniqueInput
  }

  /**
   * YogaChildStudent deleteMany
   */
  export type YogaChildStudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YogaChildStudents to delete
     */
    where?: YogaChildStudentWhereInput
    /**
     * Limit how many YogaChildStudents to delete.
     */
    limit?: number
  }

  /**
   * YogaChildStudent without action
   */
  export type YogaChildStudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaChildStudent
     */
    select?: YogaChildStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaChildStudent
     */
    omit?: YogaChildStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaChildStudentInclude<ExtArgs> | null
  }


  /**
   * Model YogaAdultStudent
   */

  export type AggregateYogaAdultStudent = {
    _count: YogaAdultStudentCountAggregateOutputType | null
    _avg: YogaAdultStudentAvgAggregateOutputType | null
    _sum: YogaAdultStudentSumAggregateOutputType | null
    _min: YogaAdultStudentMinAggregateOutputType | null
    _max: YogaAdultStudentMaxAggregateOutputType | null
  }

  export type YogaAdultStudentAvgAggregateOutputType = {
    yogaClassId: number | null
  }

  export type YogaAdultStudentSumAggregateOutputType = {
    yogaClassId: number | null
  }

  export type YogaAdultStudentMinAggregateOutputType = {
    yogaClassId: number | null
    studentId: string | null
  }

  export type YogaAdultStudentMaxAggregateOutputType = {
    yogaClassId: number | null
    studentId: string | null
  }

  export type YogaAdultStudentCountAggregateOutputType = {
    yogaClassId: number
    studentId: number
    _all: number
  }


  export type YogaAdultStudentAvgAggregateInputType = {
    yogaClassId?: true
  }

  export type YogaAdultStudentSumAggregateInputType = {
    yogaClassId?: true
  }

  export type YogaAdultStudentMinAggregateInputType = {
    yogaClassId?: true
    studentId?: true
  }

  export type YogaAdultStudentMaxAggregateInputType = {
    yogaClassId?: true
    studentId?: true
  }

  export type YogaAdultStudentCountAggregateInputType = {
    yogaClassId?: true
    studentId?: true
    _all?: true
  }

  export type YogaAdultStudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YogaAdultStudent to aggregate.
     */
    where?: YogaAdultStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaAdultStudents to fetch.
     */
    orderBy?: YogaAdultStudentOrderByWithRelationInput | YogaAdultStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YogaAdultStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaAdultStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaAdultStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YogaAdultStudents
    **/
    _count?: true | YogaAdultStudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YogaAdultStudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YogaAdultStudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YogaAdultStudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YogaAdultStudentMaxAggregateInputType
  }

  export type GetYogaAdultStudentAggregateType<T extends YogaAdultStudentAggregateArgs> = {
        [P in keyof T & keyof AggregateYogaAdultStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYogaAdultStudent[P]>
      : GetScalarType<T[P], AggregateYogaAdultStudent[P]>
  }




  export type YogaAdultStudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YogaAdultStudentWhereInput
    orderBy?: YogaAdultStudentOrderByWithAggregationInput | YogaAdultStudentOrderByWithAggregationInput[]
    by: YogaAdultStudentScalarFieldEnum[] | YogaAdultStudentScalarFieldEnum
    having?: YogaAdultStudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YogaAdultStudentCountAggregateInputType | true
    _avg?: YogaAdultStudentAvgAggregateInputType
    _sum?: YogaAdultStudentSumAggregateInputType
    _min?: YogaAdultStudentMinAggregateInputType
    _max?: YogaAdultStudentMaxAggregateInputType
  }

  export type YogaAdultStudentGroupByOutputType = {
    yogaClassId: number
    studentId: string
    _count: YogaAdultStudentCountAggregateOutputType | null
    _avg: YogaAdultStudentAvgAggregateOutputType | null
    _sum: YogaAdultStudentSumAggregateOutputType | null
    _min: YogaAdultStudentMinAggregateOutputType | null
    _max: YogaAdultStudentMaxAggregateOutputType | null
  }

  type GetYogaAdultStudentGroupByPayload<T extends YogaAdultStudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<YogaAdultStudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YogaAdultStudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YogaAdultStudentGroupByOutputType[P]>
            : GetScalarType<T[P], YogaAdultStudentGroupByOutputType[P]>
        }
      >
    >


  export type YogaAdultStudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    yogaClassId?: boolean
    studentId?: boolean
    yogaClass?: boolean | YogaClassDefaultArgs<ExtArgs>
    student?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["yogaAdultStudent"]>



  export type YogaAdultStudentSelectScalar = {
    yogaClassId?: boolean
    studentId?: boolean
  }

  export type YogaAdultStudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"yogaClassId" | "studentId", ExtArgs["result"]["yogaAdultStudent"]>
  export type YogaAdultStudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    yogaClass?: boolean | YogaClassDefaultArgs<ExtArgs>
    student?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $YogaAdultStudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "YogaAdultStudent"
    objects: {
      yogaClass: Prisma.$YogaClassPayload<ExtArgs>
      student: Prisma.$ClientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      yogaClassId: number
      studentId: string
    }, ExtArgs["result"]["yogaAdultStudent"]>
    composites: {}
  }

  type YogaAdultStudentGetPayload<S extends boolean | null | undefined | YogaAdultStudentDefaultArgs> = $Result.GetResult<Prisma.$YogaAdultStudentPayload, S>

  type YogaAdultStudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<YogaAdultStudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: YogaAdultStudentCountAggregateInputType | true
    }

  export interface YogaAdultStudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['YogaAdultStudent'], meta: { name: 'YogaAdultStudent' } }
    /**
     * Find zero or one YogaAdultStudent that matches the filter.
     * @param {YogaAdultStudentFindUniqueArgs} args - Arguments to find a YogaAdultStudent
     * @example
     * // Get one YogaAdultStudent
     * const yogaAdultStudent = await prisma.yogaAdultStudent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends YogaAdultStudentFindUniqueArgs>(args: SelectSubset<T, YogaAdultStudentFindUniqueArgs<ExtArgs>>): Prisma__YogaAdultStudentClient<$Result.GetResult<Prisma.$YogaAdultStudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one YogaAdultStudent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {YogaAdultStudentFindUniqueOrThrowArgs} args - Arguments to find a YogaAdultStudent
     * @example
     * // Get one YogaAdultStudent
     * const yogaAdultStudent = await prisma.yogaAdultStudent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends YogaAdultStudentFindUniqueOrThrowArgs>(args: SelectSubset<T, YogaAdultStudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__YogaAdultStudentClient<$Result.GetResult<Prisma.$YogaAdultStudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first YogaAdultStudent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaAdultStudentFindFirstArgs} args - Arguments to find a YogaAdultStudent
     * @example
     * // Get one YogaAdultStudent
     * const yogaAdultStudent = await prisma.yogaAdultStudent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends YogaAdultStudentFindFirstArgs>(args?: SelectSubset<T, YogaAdultStudentFindFirstArgs<ExtArgs>>): Prisma__YogaAdultStudentClient<$Result.GetResult<Prisma.$YogaAdultStudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first YogaAdultStudent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaAdultStudentFindFirstOrThrowArgs} args - Arguments to find a YogaAdultStudent
     * @example
     * // Get one YogaAdultStudent
     * const yogaAdultStudent = await prisma.yogaAdultStudent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends YogaAdultStudentFindFirstOrThrowArgs>(args?: SelectSubset<T, YogaAdultStudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__YogaAdultStudentClient<$Result.GetResult<Prisma.$YogaAdultStudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more YogaAdultStudents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaAdultStudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YogaAdultStudents
     * const yogaAdultStudents = await prisma.yogaAdultStudent.findMany()
     * 
     * // Get first 10 YogaAdultStudents
     * const yogaAdultStudents = await prisma.yogaAdultStudent.findMany({ take: 10 })
     * 
     * // Only select the `yogaClassId`
     * const yogaAdultStudentWithYogaClassIdOnly = await prisma.yogaAdultStudent.findMany({ select: { yogaClassId: true } })
     * 
     */
    findMany<T extends YogaAdultStudentFindManyArgs>(args?: SelectSubset<T, YogaAdultStudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YogaAdultStudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a YogaAdultStudent.
     * @param {YogaAdultStudentCreateArgs} args - Arguments to create a YogaAdultStudent.
     * @example
     * // Create one YogaAdultStudent
     * const YogaAdultStudent = await prisma.yogaAdultStudent.create({
     *   data: {
     *     // ... data to create a YogaAdultStudent
     *   }
     * })
     * 
     */
    create<T extends YogaAdultStudentCreateArgs>(args: SelectSubset<T, YogaAdultStudentCreateArgs<ExtArgs>>): Prisma__YogaAdultStudentClient<$Result.GetResult<Prisma.$YogaAdultStudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many YogaAdultStudents.
     * @param {YogaAdultStudentCreateManyArgs} args - Arguments to create many YogaAdultStudents.
     * @example
     * // Create many YogaAdultStudents
     * const yogaAdultStudent = await prisma.yogaAdultStudent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends YogaAdultStudentCreateManyArgs>(args?: SelectSubset<T, YogaAdultStudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YogaAdultStudent.
     * @param {YogaAdultStudentDeleteArgs} args - Arguments to delete one YogaAdultStudent.
     * @example
     * // Delete one YogaAdultStudent
     * const YogaAdultStudent = await prisma.yogaAdultStudent.delete({
     *   where: {
     *     // ... filter to delete one YogaAdultStudent
     *   }
     * })
     * 
     */
    delete<T extends YogaAdultStudentDeleteArgs>(args: SelectSubset<T, YogaAdultStudentDeleteArgs<ExtArgs>>): Prisma__YogaAdultStudentClient<$Result.GetResult<Prisma.$YogaAdultStudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one YogaAdultStudent.
     * @param {YogaAdultStudentUpdateArgs} args - Arguments to update one YogaAdultStudent.
     * @example
     * // Update one YogaAdultStudent
     * const yogaAdultStudent = await prisma.yogaAdultStudent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends YogaAdultStudentUpdateArgs>(args: SelectSubset<T, YogaAdultStudentUpdateArgs<ExtArgs>>): Prisma__YogaAdultStudentClient<$Result.GetResult<Prisma.$YogaAdultStudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more YogaAdultStudents.
     * @param {YogaAdultStudentDeleteManyArgs} args - Arguments to filter YogaAdultStudents to delete.
     * @example
     * // Delete a few YogaAdultStudents
     * const { count } = await prisma.yogaAdultStudent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends YogaAdultStudentDeleteManyArgs>(args?: SelectSubset<T, YogaAdultStudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YogaAdultStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaAdultStudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YogaAdultStudents
     * const yogaAdultStudent = await prisma.yogaAdultStudent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends YogaAdultStudentUpdateManyArgs>(args: SelectSubset<T, YogaAdultStudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YogaAdultStudent.
     * @param {YogaAdultStudentUpsertArgs} args - Arguments to update or create a YogaAdultStudent.
     * @example
     * // Update or create a YogaAdultStudent
     * const yogaAdultStudent = await prisma.yogaAdultStudent.upsert({
     *   create: {
     *     // ... data to create a YogaAdultStudent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YogaAdultStudent we want to update
     *   }
     * })
     */
    upsert<T extends YogaAdultStudentUpsertArgs>(args: SelectSubset<T, YogaAdultStudentUpsertArgs<ExtArgs>>): Prisma__YogaAdultStudentClient<$Result.GetResult<Prisma.$YogaAdultStudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of YogaAdultStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaAdultStudentCountArgs} args - Arguments to filter YogaAdultStudents to count.
     * @example
     * // Count the number of YogaAdultStudents
     * const count = await prisma.yogaAdultStudent.count({
     *   where: {
     *     // ... the filter for the YogaAdultStudents we want to count
     *   }
     * })
    **/
    count<T extends YogaAdultStudentCountArgs>(
      args?: Subset<T, YogaAdultStudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YogaAdultStudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YogaAdultStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaAdultStudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YogaAdultStudentAggregateArgs>(args: Subset<T, YogaAdultStudentAggregateArgs>): Prisma.PrismaPromise<GetYogaAdultStudentAggregateType<T>>

    /**
     * Group by YogaAdultStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YogaAdultStudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YogaAdultStudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YogaAdultStudentGroupByArgs['orderBy'] }
        : { orderBy?: YogaAdultStudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YogaAdultStudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYogaAdultStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the YogaAdultStudent model
   */
  readonly fields: YogaAdultStudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for YogaAdultStudent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__YogaAdultStudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    yogaClass<T extends YogaClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, YogaClassDefaultArgs<ExtArgs>>): Prisma__YogaClassClient<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the YogaAdultStudent model
   */
  interface YogaAdultStudentFieldRefs {
    readonly yogaClassId: FieldRef<"YogaAdultStudent", 'Int'>
    readonly studentId: FieldRef<"YogaAdultStudent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * YogaAdultStudent findUnique
   */
  export type YogaAdultStudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaAdultStudent
     */
    select?: YogaAdultStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaAdultStudent
     */
    omit?: YogaAdultStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaAdultStudentInclude<ExtArgs> | null
    /**
     * Filter, which YogaAdultStudent to fetch.
     */
    where: YogaAdultStudentWhereUniqueInput
  }

  /**
   * YogaAdultStudent findUniqueOrThrow
   */
  export type YogaAdultStudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaAdultStudent
     */
    select?: YogaAdultStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaAdultStudent
     */
    omit?: YogaAdultStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaAdultStudentInclude<ExtArgs> | null
    /**
     * Filter, which YogaAdultStudent to fetch.
     */
    where: YogaAdultStudentWhereUniqueInput
  }

  /**
   * YogaAdultStudent findFirst
   */
  export type YogaAdultStudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaAdultStudent
     */
    select?: YogaAdultStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaAdultStudent
     */
    omit?: YogaAdultStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaAdultStudentInclude<ExtArgs> | null
    /**
     * Filter, which YogaAdultStudent to fetch.
     */
    where?: YogaAdultStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaAdultStudents to fetch.
     */
    orderBy?: YogaAdultStudentOrderByWithRelationInput | YogaAdultStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YogaAdultStudents.
     */
    cursor?: YogaAdultStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaAdultStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaAdultStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YogaAdultStudents.
     */
    distinct?: YogaAdultStudentScalarFieldEnum | YogaAdultStudentScalarFieldEnum[]
  }

  /**
   * YogaAdultStudent findFirstOrThrow
   */
  export type YogaAdultStudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaAdultStudent
     */
    select?: YogaAdultStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaAdultStudent
     */
    omit?: YogaAdultStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaAdultStudentInclude<ExtArgs> | null
    /**
     * Filter, which YogaAdultStudent to fetch.
     */
    where?: YogaAdultStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaAdultStudents to fetch.
     */
    orderBy?: YogaAdultStudentOrderByWithRelationInput | YogaAdultStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YogaAdultStudents.
     */
    cursor?: YogaAdultStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaAdultStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaAdultStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YogaAdultStudents.
     */
    distinct?: YogaAdultStudentScalarFieldEnum | YogaAdultStudentScalarFieldEnum[]
  }

  /**
   * YogaAdultStudent findMany
   */
  export type YogaAdultStudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaAdultStudent
     */
    select?: YogaAdultStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaAdultStudent
     */
    omit?: YogaAdultStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaAdultStudentInclude<ExtArgs> | null
    /**
     * Filter, which YogaAdultStudents to fetch.
     */
    where?: YogaAdultStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YogaAdultStudents to fetch.
     */
    orderBy?: YogaAdultStudentOrderByWithRelationInput | YogaAdultStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YogaAdultStudents.
     */
    cursor?: YogaAdultStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YogaAdultStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YogaAdultStudents.
     */
    skip?: number
    distinct?: YogaAdultStudentScalarFieldEnum | YogaAdultStudentScalarFieldEnum[]
  }

  /**
   * YogaAdultStudent create
   */
  export type YogaAdultStudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaAdultStudent
     */
    select?: YogaAdultStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaAdultStudent
     */
    omit?: YogaAdultStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaAdultStudentInclude<ExtArgs> | null
    /**
     * The data needed to create a YogaAdultStudent.
     */
    data: XOR<YogaAdultStudentCreateInput, YogaAdultStudentUncheckedCreateInput>
  }

  /**
   * YogaAdultStudent createMany
   */
  export type YogaAdultStudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many YogaAdultStudents.
     */
    data: YogaAdultStudentCreateManyInput | YogaAdultStudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * YogaAdultStudent update
   */
  export type YogaAdultStudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaAdultStudent
     */
    select?: YogaAdultStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaAdultStudent
     */
    omit?: YogaAdultStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaAdultStudentInclude<ExtArgs> | null
    /**
     * The data needed to update a YogaAdultStudent.
     */
    data: XOR<YogaAdultStudentUpdateInput, YogaAdultStudentUncheckedUpdateInput>
    /**
     * Choose, which YogaAdultStudent to update.
     */
    where: YogaAdultStudentWhereUniqueInput
  }

  /**
   * YogaAdultStudent updateMany
   */
  export type YogaAdultStudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update YogaAdultStudents.
     */
    data: XOR<YogaAdultStudentUpdateManyMutationInput, YogaAdultStudentUncheckedUpdateManyInput>
    /**
     * Filter which YogaAdultStudents to update
     */
    where?: YogaAdultStudentWhereInput
    /**
     * Limit how many YogaAdultStudents to update.
     */
    limit?: number
  }

  /**
   * YogaAdultStudent upsert
   */
  export type YogaAdultStudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaAdultStudent
     */
    select?: YogaAdultStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaAdultStudent
     */
    omit?: YogaAdultStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaAdultStudentInclude<ExtArgs> | null
    /**
     * The filter to search for the YogaAdultStudent to update in case it exists.
     */
    where: YogaAdultStudentWhereUniqueInput
    /**
     * In case the YogaAdultStudent found by the `where` argument doesn't exist, create a new YogaAdultStudent with this data.
     */
    create: XOR<YogaAdultStudentCreateInput, YogaAdultStudentUncheckedCreateInput>
    /**
     * In case the YogaAdultStudent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YogaAdultStudentUpdateInput, YogaAdultStudentUncheckedUpdateInput>
  }

  /**
   * YogaAdultStudent delete
   */
  export type YogaAdultStudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaAdultStudent
     */
    select?: YogaAdultStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaAdultStudent
     */
    omit?: YogaAdultStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaAdultStudentInclude<ExtArgs> | null
    /**
     * Filter which YogaAdultStudent to delete.
     */
    where: YogaAdultStudentWhereUniqueInput
  }

  /**
   * YogaAdultStudent deleteMany
   */
  export type YogaAdultStudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YogaAdultStudents to delete
     */
    where?: YogaAdultStudentWhereInput
    /**
     * Limit how many YogaAdultStudents to delete.
     */
    limit?: number
  }

  /**
   * YogaAdultStudent without action
   */
  export type YogaAdultStudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaAdultStudent
     */
    select?: YogaAdultStudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaAdultStudent
     */
    omit?: YogaAdultStudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaAdultStudentInclude<ExtArgs> | null
  }


  /**
   * Model RollCall
   */

  export type AggregateRollCall = {
    _count: RollCallCountAggregateOutputType | null
    _avg: RollCallAvgAggregateOutputType | null
    _sum: RollCallSumAggregateOutputType | null
    _min: RollCallMinAggregateOutputType | null
    _max: RollCallMaxAggregateOutputType | null
  }

  export type RollCallAvgAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type RollCallSumAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type RollCallMinAggregateOutputType = {
    id: number | null
    classId: number | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RollCallMaxAggregateOutputType = {
    id: number | null
    classId: number | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RollCallCountAggregateOutputType = {
    id: number
    classId: number
    date: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RollCallAvgAggregateInputType = {
    id?: true
    classId?: true
  }

  export type RollCallSumAggregateInputType = {
    id?: true
    classId?: true
  }

  export type RollCallMinAggregateInputType = {
    id?: true
    classId?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RollCallMaxAggregateInputType = {
    id?: true
    classId?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RollCallCountAggregateInputType = {
    id?: true
    classId?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RollCallAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RollCall to aggregate.
     */
    where?: RollCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RollCalls to fetch.
     */
    orderBy?: RollCallOrderByWithRelationInput | RollCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RollCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RollCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RollCalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RollCalls
    **/
    _count?: true | RollCallCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RollCallAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RollCallSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RollCallMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RollCallMaxAggregateInputType
  }

  export type GetRollCallAggregateType<T extends RollCallAggregateArgs> = {
        [P in keyof T & keyof AggregateRollCall]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRollCall[P]>
      : GetScalarType<T[P], AggregateRollCall[P]>
  }




  export type RollCallGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RollCallWhereInput
    orderBy?: RollCallOrderByWithAggregationInput | RollCallOrderByWithAggregationInput[]
    by: RollCallScalarFieldEnum[] | RollCallScalarFieldEnum
    having?: RollCallScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RollCallCountAggregateInputType | true
    _avg?: RollCallAvgAggregateInputType
    _sum?: RollCallSumAggregateInputType
    _min?: RollCallMinAggregateInputType
    _max?: RollCallMaxAggregateInputType
  }

  export type RollCallGroupByOutputType = {
    id: number
    classId: number
    date: Date
    createdAt: Date
    updatedAt: Date
    _count: RollCallCountAggregateOutputType | null
    _avg: RollCallAvgAggregateOutputType | null
    _sum: RollCallSumAggregateOutputType | null
    _min: RollCallMinAggregateOutputType | null
    _max: RollCallMaxAggregateOutputType | null
  }

  type GetRollCallGroupByPayload<T extends RollCallGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RollCallGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RollCallGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RollCallGroupByOutputType[P]>
            : GetScalarType<T[P], RollCallGroupByOutputType[P]>
        }
      >
    >


  export type RollCallSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    class?: boolean | YogaClassDefaultArgs<ExtArgs>
    presences?: boolean | RollCall$presencesArgs<ExtArgs>
    _count?: boolean | RollCallCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rollCall"]>



  export type RollCallSelectScalar = {
    id?: boolean
    classId?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RollCallOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "classId" | "date" | "createdAt" | "updatedAt", ExtArgs["result"]["rollCall"]>
  export type RollCallInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | YogaClassDefaultArgs<ExtArgs>
    presences?: boolean | RollCall$presencesArgs<ExtArgs>
    _count?: boolean | RollCallCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RollCallPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RollCall"
    objects: {
      class: Prisma.$YogaClassPayload<ExtArgs>
      presences: Prisma.$PresencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      classId: number
      date: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rollCall"]>
    composites: {}
  }

  type RollCallGetPayload<S extends boolean | null | undefined | RollCallDefaultArgs> = $Result.GetResult<Prisma.$RollCallPayload, S>

  type RollCallCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RollCallFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RollCallCountAggregateInputType | true
    }

  export interface RollCallDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RollCall'], meta: { name: 'RollCall' } }
    /**
     * Find zero or one RollCall that matches the filter.
     * @param {RollCallFindUniqueArgs} args - Arguments to find a RollCall
     * @example
     * // Get one RollCall
     * const rollCall = await prisma.rollCall.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RollCallFindUniqueArgs>(args: SelectSubset<T, RollCallFindUniqueArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RollCall that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RollCallFindUniqueOrThrowArgs} args - Arguments to find a RollCall
     * @example
     * // Get one RollCall
     * const rollCall = await prisma.rollCall.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RollCallFindUniqueOrThrowArgs>(args: SelectSubset<T, RollCallFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RollCall that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallFindFirstArgs} args - Arguments to find a RollCall
     * @example
     * // Get one RollCall
     * const rollCall = await prisma.rollCall.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RollCallFindFirstArgs>(args?: SelectSubset<T, RollCallFindFirstArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RollCall that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallFindFirstOrThrowArgs} args - Arguments to find a RollCall
     * @example
     * // Get one RollCall
     * const rollCall = await prisma.rollCall.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RollCallFindFirstOrThrowArgs>(args?: SelectSubset<T, RollCallFindFirstOrThrowArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RollCalls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RollCalls
     * const rollCalls = await prisma.rollCall.findMany()
     * 
     * // Get first 10 RollCalls
     * const rollCalls = await prisma.rollCall.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rollCallWithIdOnly = await prisma.rollCall.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RollCallFindManyArgs>(args?: SelectSubset<T, RollCallFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RollCall.
     * @param {RollCallCreateArgs} args - Arguments to create a RollCall.
     * @example
     * // Create one RollCall
     * const RollCall = await prisma.rollCall.create({
     *   data: {
     *     // ... data to create a RollCall
     *   }
     * })
     * 
     */
    create<T extends RollCallCreateArgs>(args: SelectSubset<T, RollCallCreateArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RollCalls.
     * @param {RollCallCreateManyArgs} args - Arguments to create many RollCalls.
     * @example
     * // Create many RollCalls
     * const rollCall = await prisma.rollCall.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RollCallCreateManyArgs>(args?: SelectSubset<T, RollCallCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RollCall.
     * @param {RollCallDeleteArgs} args - Arguments to delete one RollCall.
     * @example
     * // Delete one RollCall
     * const RollCall = await prisma.rollCall.delete({
     *   where: {
     *     // ... filter to delete one RollCall
     *   }
     * })
     * 
     */
    delete<T extends RollCallDeleteArgs>(args: SelectSubset<T, RollCallDeleteArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RollCall.
     * @param {RollCallUpdateArgs} args - Arguments to update one RollCall.
     * @example
     * // Update one RollCall
     * const rollCall = await prisma.rollCall.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RollCallUpdateArgs>(args: SelectSubset<T, RollCallUpdateArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RollCalls.
     * @param {RollCallDeleteManyArgs} args - Arguments to filter RollCalls to delete.
     * @example
     * // Delete a few RollCalls
     * const { count } = await prisma.rollCall.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RollCallDeleteManyArgs>(args?: SelectSubset<T, RollCallDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RollCalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RollCalls
     * const rollCall = await prisma.rollCall.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RollCallUpdateManyArgs>(args: SelectSubset<T, RollCallUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RollCall.
     * @param {RollCallUpsertArgs} args - Arguments to update or create a RollCall.
     * @example
     * // Update or create a RollCall
     * const rollCall = await prisma.rollCall.upsert({
     *   create: {
     *     // ... data to create a RollCall
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RollCall we want to update
     *   }
     * })
     */
    upsert<T extends RollCallUpsertArgs>(args: SelectSubset<T, RollCallUpsertArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RollCalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallCountArgs} args - Arguments to filter RollCalls to count.
     * @example
     * // Count the number of RollCalls
     * const count = await prisma.rollCall.count({
     *   where: {
     *     // ... the filter for the RollCalls we want to count
     *   }
     * })
    **/
    count<T extends RollCallCountArgs>(
      args?: Subset<T, RollCallCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RollCallCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RollCall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RollCallAggregateArgs>(args: Subset<T, RollCallAggregateArgs>): Prisma.PrismaPromise<GetRollCallAggregateType<T>>

    /**
     * Group by RollCall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RollCallGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RollCallGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RollCallGroupByArgs['orderBy'] }
        : { orderBy?: RollCallGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RollCallGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRollCallGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RollCall model
   */
  readonly fields: RollCallFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RollCall.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RollCallClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends YogaClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, YogaClassDefaultArgs<ExtArgs>>): Prisma__YogaClassClient<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    presences<T extends RollCall$presencesArgs<ExtArgs> = {}>(args?: Subset<T, RollCall$presencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RollCall model
   */
  interface RollCallFieldRefs {
    readonly id: FieldRef<"RollCall", 'Int'>
    readonly classId: FieldRef<"RollCall", 'Int'>
    readonly date: FieldRef<"RollCall", 'DateTime'>
    readonly createdAt: FieldRef<"RollCall", 'DateTime'>
    readonly updatedAt: FieldRef<"RollCall", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RollCall findUnique
   */
  export type RollCallFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * Filter, which RollCall to fetch.
     */
    where: RollCallWhereUniqueInput
  }

  /**
   * RollCall findUniqueOrThrow
   */
  export type RollCallFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * Filter, which RollCall to fetch.
     */
    where: RollCallWhereUniqueInput
  }

  /**
   * RollCall findFirst
   */
  export type RollCallFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * Filter, which RollCall to fetch.
     */
    where?: RollCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RollCalls to fetch.
     */
    orderBy?: RollCallOrderByWithRelationInput | RollCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RollCalls.
     */
    cursor?: RollCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RollCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RollCalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RollCalls.
     */
    distinct?: RollCallScalarFieldEnum | RollCallScalarFieldEnum[]
  }

  /**
   * RollCall findFirstOrThrow
   */
  export type RollCallFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * Filter, which RollCall to fetch.
     */
    where?: RollCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RollCalls to fetch.
     */
    orderBy?: RollCallOrderByWithRelationInput | RollCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RollCalls.
     */
    cursor?: RollCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RollCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RollCalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RollCalls.
     */
    distinct?: RollCallScalarFieldEnum | RollCallScalarFieldEnum[]
  }

  /**
   * RollCall findMany
   */
  export type RollCallFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * Filter, which RollCalls to fetch.
     */
    where?: RollCallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RollCalls to fetch.
     */
    orderBy?: RollCallOrderByWithRelationInput | RollCallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RollCalls.
     */
    cursor?: RollCallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RollCalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RollCalls.
     */
    skip?: number
    distinct?: RollCallScalarFieldEnum | RollCallScalarFieldEnum[]
  }

  /**
   * RollCall create
   */
  export type RollCallCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * The data needed to create a RollCall.
     */
    data: XOR<RollCallCreateInput, RollCallUncheckedCreateInput>
  }

  /**
   * RollCall createMany
   */
  export type RollCallCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RollCalls.
     */
    data: RollCallCreateManyInput | RollCallCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RollCall update
   */
  export type RollCallUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * The data needed to update a RollCall.
     */
    data: XOR<RollCallUpdateInput, RollCallUncheckedUpdateInput>
    /**
     * Choose, which RollCall to update.
     */
    where: RollCallWhereUniqueInput
  }

  /**
   * RollCall updateMany
   */
  export type RollCallUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RollCalls.
     */
    data: XOR<RollCallUpdateManyMutationInput, RollCallUncheckedUpdateManyInput>
    /**
     * Filter which RollCalls to update
     */
    where?: RollCallWhereInput
    /**
     * Limit how many RollCalls to update.
     */
    limit?: number
  }

  /**
   * RollCall upsert
   */
  export type RollCallUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * The filter to search for the RollCall to update in case it exists.
     */
    where: RollCallWhereUniqueInput
    /**
     * In case the RollCall found by the `where` argument doesn't exist, create a new RollCall with this data.
     */
    create: XOR<RollCallCreateInput, RollCallUncheckedCreateInput>
    /**
     * In case the RollCall was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RollCallUpdateInput, RollCallUncheckedUpdateInput>
  }

  /**
   * RollCall delete
   */
  export type RollCallDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
    /**
     * Filter which RollCall to delete.
     */
    where: RollCallWhereUniqueInput
  }

  /**
   * RollCall deleteMany
   */
  export type RollCallDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RollCalls to delete
     */
    where?: RollCallWhereInput
    /**
     * Limit how many RollCalls to delete.
     */
    limit?: number
  }

  /**
   * RollCall.presences
   */
  export type RollCall$presencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    where?: PresenceWhereInput
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    cursor?: PresenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * RollCall without action
   */
  export type RollCallDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RollCall
     */
    select?: RollCallSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RollCall
     */
    omit?: RollCallOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RollCallInclude<ExtArgs> | null
  }


  /**
   * Model Presence
   */

  export type AggregatePresence = {
    _count: PresenceCountAggregateOutputType | null
    _avg: PresenceAvgAggregateOutputType | null
    _sum: PresenceSumAggregateOutputType | null
    _min: PresenceMinAggregateOutputType | null
    _max: PresenceMaxAggregateOutputType | null
  }

  export type PresenceAvgAggregateOutputType = {
    id: number | null
    rollCallId: number | null
  }

  export type PresenceSumAggregateOutputType = {
    id: number | null
    rollCallId: number | null
  }

  export type PresenceMinAggregateOutputType = {
    id: number | null
    studentType: $Enums.StudentType | null
    rollCallId: number | null
    adultStudentId: string | null
    childStudentId: string | null
    isPresent: boolean | null
    absenceReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PresenceMaxAggregateOutputType = {
    id: number | null
    studentType: $Enums.StudentType | null
    rollCallId: number | null
    adultStudentId: string | null
    childStudentId: string | null
    isPresent: boolean | null
    absenceReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PresenceCountAggregateOutputType = {
    id: number
    studentType: number
    rollCallId: number
    adultStudentId: number
    childStudentId: number
    isPresent: number
    absenceReason: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PresenceAvgAggregateInputType = {
    id?: true
    rollCallId?: true
  }

  export type PresenceSumAggregateInputType = {
    id?: true
    rollCallId?: true
  }

  export type PresenceMinAggregateInputType = {
    id?: true
    studentType?: true
    rollCallId?: true
    adultStudentId?: true
    childStudentId?: true
    isPresent?: true
    absenceReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PresenceMaxAggregateInputType = {
    id?: true
    studentType?: true
    rollCallId?: true
    adultStudentId?: true
    childStudentId?: true
    isPresent?: true
    absenceReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PresenceCountAggregateInputType = {
    id?: true
    studentType?: true
    rollCallId?: true
    adultStudentId?: true
    childStudentId?: true
    isPresent?: true
    absenceReason?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PresenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presence to aggregate.
     */
    where?: PresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presences to fetch.
     */
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Presences
    **/
    _count?: true | PresenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PresenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PresenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PresenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PresenceMaxAggregateInputType
  }

  export type GetPresenceAggregateType<T extends PresenceAggregateArgs> = {
        [P in keyof T & keyof AggregatePresence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePresence[P]>
      : GetScalarType<T[P], AggregatePresence[P]>
  }




  export type PresenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresenceWhereInput
    orderBy?: PresenceOrderByWithAggregationInput | PresenceOrderByWithAggregationInput[]
    by: PresenceScalarFieldEnum[] | PresenceScalarFieldEnum
    having?: PresenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PresenceCountAggregateInputType | true
    _avg?: PresenceAvgAggregateInputType
    _sum?: PresenceSumAggregateInputType
    _min?: PresenceMinAggregateInputType
    _max?: PresenceMaxAggregateInputType
  }

  export type PresenceGroupByOutputType = {
    id: number
    studentType: $Enums.StudentType
    rollCallId: number
    adultStudentId: string | null
    childStudentId: string | null
    isPresent: boolean
    absenceReason: string | null
    createdAt: Date
    updatedAt: Date
    _count: PresenceCountAggregateOutputType | null
    _avg: PresenceAvgAggregateOutputType | null
    _sum: PresenceSumAggregateOutputType | null
    _min: PresenceMinAggregateOutputType | null
    _max: PresenceMaxAggregateOutputType | null
  }

  type GetPresenceGroupByPayload<T extends PresenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PresenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PresenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PresenceGroupByOutputType[P]>
            : GetScalarType<T[P], PresenceGroupByOutputType[P]>
        }
      >
    >


  export type PresenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentType?: boolean
    rollCallId?: boolean
    adultStudentId?: boolean
    childStudentId?: boolean
    isPresent?: boolean
    absenceReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rollCall?: boolean | RollCallDefaultArgs<ExtArgs>
    adultStudent?: boolean | Presence$adultStudentArgs<ExtArgs>
    childStudent?: boolean | Presence$childStudentArgs<ExtArgs>
  }, ExtArgs["result"]["presence"]>



  export type PresenceSelectScalar = {
    id?: boolean
    studentType?: boolean
    rollCallId?: boolean
    adultStudentId?: boolean
    childStudentId?: boolean
    isPresent?: boolean
    absenceReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PresenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentType" | "rollCallId" | "adultStudentId" | "childStudentId" | "isPresent" | "absenceReason" | "createdAt" | "updatedAt", ExtArgs["result"]["presence"]>
  export type PresenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rollCall?: boolean | RollCallDefaultArgs<ExtArgs>
    adultStudent?: boolean | Presence$adultStudentArgs<ExtArgs>
    childStudent?: boolean | Presence$childStudentArgs<ExtArgs>
  }

  export type $PresencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Presence"
    objects: {
      rollCall: Prisma.$RollCallPayload<ExtArgs>
      adultStudent: Prisma.$ClientPayload<ExtArgs> | null
      childStudent: Prisma.$ChildPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentType: $Enums.StudentType
      rollCallId: number
      adultStudentId: string | null
      childStudentId: string | null
      isPresent: boolean
      absenceReason: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["presence"]>
    composites: {}
  }

  type PresenceGetPayload<S extends boolean | null | undefined | PresenceDefaultArgs> = $Result.GetResult<Prisma.$PresencePayload, S>

  type PresenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PresenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PresenceCountAggregateInputType | true
    }

  export interface PresenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Presence'], meta: { name: 'Presence' } }
    /**
     * Find zero or one Presence that matches the filter.
     * @param {PresenceFindUniqueArgs} args - Arguments to find a Presence
     * @example
     * // Get one Presence
     * const presence = await prisma.presence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PresenceFindUniqueArgs>(args: SelectSubset<T, PresenceFindUniqueArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Presence that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PresenceFindUniqueOrThrowArgs} args - Arguments to find a Presence
     * @example
     * // Get one Presence
     * const presence = await prisma.presence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PresenceFindUniqueOrThrowArgs>(args: SelectSubset<T, PresenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceFindFirstArgs} args - Arguments to find a Presence
     * @example
     * // Get one Presence
     * const presence = await prisma.presence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PresenceFindFirstArgs>(args?: SelectSubset<T, PresenceFindFirstArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceFindFirstOrThrowArgs} args - Arguments to find a Presence
     * @example
     * // Get one Presence
     * const presence = await prisma.presence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PresenceFindFirstOrThrowArgs>(args?: SelectSubset<T, PresenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Presences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Presences
     * const presences = await prisma.presence.findMany()
     * 
     * // Get first 10 Presences
     * const presences = await prisma.presence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const presenceWithIdOnly = await prisma.presence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PresenceFindManyArgs>(args?: SelectSubset<T, PresenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Presence.
     * @param {PresenceCreateArgs} args - Arguments to create a Presence.
     * @example
     * // Create one Presence
     * const Presence = await prisma.presence.create({
     *   data: {
     *     // ... data to create a Presence
     *   }
     * })
     * 
     */
    create<T extends PresenceCreateArgs>(args: SelectSubset<T, PresenceCreateArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Presences.
     * @param {PresenceCreateManyArgs} args - Arguments to create many Presences.
     * @example
     * // Create many Presences
     * const presence = await prisma.presence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PresenceCreateManyArgs>(args?: SelectSubset<T, PresenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Presence.
     * @param {PresenceDeleteArgs} args - Arguments to delete one Presence.
     * @example
     * // Delete one Presence
     * const Presence = await prisma.presence.delete({
     *   where: {
     *     // ... filter to delete one Presence
     *   }
     * })
     * 
     */
    delete<T extends PresenceDeleteArgs>(args: SelectSubset<T, PresenceDeleteArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Presence.
     * @param {PresenceUpdateArgs} args - Arguments to update one Presence.
     * @example
     * // Update one Presence
     * const presence = await prisma.presence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PresenceUpdateArgs>(args: SelectSubset<T, PresenceUpdateArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Presences.
     * @param {PresenceDeleteManyArgs} args - Arguments to filter Presences to delete.
     * @example
     * // Delete a few Presences
     * const { count } = await prisma.presence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PresenceDeleteManyArgs>(args?: SelectSubset<T, PresenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Presences
     * const presence = await prisma.presence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PresenceUpdateManyArgs>(args: SelectSubset<T, PresenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Presence.
     * @param {PresenceUpsertArgs} args - Arguments to update or create a Presence.
     * @example
     * // Update or create a Presence
     * const presence = await prisma.presence.upsert({
     *   create: {
     *     // ... data to create a Presence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Presence we want to update
     *   }
     * })
     */
    upsert<T extends PresenceUpsertArgs>(args: SelectSubset<T, PresenceUpsertArgs<ExtArgs>>): Prisma__PresenceClient<$Result.GetResult<Prisma.$PresencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Presences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceCountArgs} args - Arguments to filter Presences to count.
     * @example
     * // Count the number of Presences
     * const count = await prisma.presence.count({
     *   where: {
     *     // ... the filter for the Presences we want to count
     *   }
     * })
    **/
    count<T extends PresenceCountArgs>(
      args?: Subset<T, PresenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PresenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Presence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PresenceAggregateArgs>(args: Subset<T, PresenceAggregateArgs>): Prisma.PrismaPromise<GetPresenceAggregateType<T>>

    /**
     * Group by Presence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PresenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PresenceGroupByArgs['orderBy'] }
        : { orderBy?: PresenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PresenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Presence model
   */
  readonly fields: PresenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Presence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PresenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rollCall<T extends RollCallDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RollCallDefaultArgs<ExtArgs>>): Prisma__RollCallClient<$Result.GetResult<Prisma.$RollCallPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    adultStudent<T extends Presence$adultStudentArgs<ExtArgs> = {}>(args?: Subset<T, Presence$adultStudentArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    childStudent<T extends Presence$childStudentArgs<ExtArgs> = {}>(args?: Subset<T, Presence$childStudentArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Presence model
   */
  interface PresenceFieldRefs {
    readonly id: FieldRef<"Presence", 'Int'>
    readonly studentType: FieldRef<"Presence", 'StudentType'>
    readonly rollCallId: FieldRef<"Presence", 'Int'>
    readonly adultStudentId: FieldRef<"Presence", 'String'>
    readonly childStudentId: FieldRef<"Presence", 'String'>
    readonly isPresent: FieldRef<"Presence", 'Boolean'>
    readonly absenceReason: FieldRef<"Presence", 'String'>
    readonly createdAt: FieldRef<"Presence", 'DateTime'>
    readonly updatedAt: FieldRef<"Presence", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Presence findUnique
   */
  export type PresenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presence to fetch.
     */
    where: PresenceWhereUniqueInput
  }

  /**
   * Presence findUniqueOrThrow
   */
  export type PresenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presence to fetch.
     */
    where: PresenceWhereUniqueInput
  }

  /**
   * Presence findFirst
   */
  export type PresenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presence to fetch.
     */
    where?: PresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presences to fetch.
     */
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presences.
     */
    cursor?: PresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presences.
     */
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Presence findFirstOrThrow
   */
  export type PresenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presence to fetch.
     */
    where?: PresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presences to fetch.
     */
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presences.
     */
    cursor?: PresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presences.
     */
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Presence findMany
   */
  export type PresenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter, which Presences to fetch.
     */
    where?: PresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presences to fetch.
     */
    orderBy?: PresenceOrderByWithRelationInput | PresenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Presences.
     */
    cursor?: PresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presences.
     */
    skip?: number
    distinct?: PresenceScalarFieldEnum | PresenceScalarFieldEnum[]
  }

  /**
   * Presence create
   */
  export type PresenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Presence.
     */
    data: XOR<PresenceCreateInput, PresenceUncheckedCreateInput>
  }

  /**
   * Presence createMany
   */
  export type PresenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Presences.
     */
    data: PresenceCreateManyInput | PresenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Presence update
   */
  export type PresenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Presence.
     */
    data: XOR<PresenceUpdateInput, PresenceUncheckedUpdateInput>
    /**
     * Choose, which Presence to update.
     */
    where: PresenceWhereUniqueInput
  }

  /**
   * Presence updateMany
   */
  export type PresenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Presences.
     */
    data: XOR<PresenceUpdateManyMutationInput, PresenceUncheckedUpdateManyInput>
    /**
     * Filter which Presences to update
     */
    where?: PresenceWhereInput
    /**
     * Limit how many Presences to update.
     */
    limit?: number
  }

  /**
   * Presence upsert
   */
  export type PresenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Presence to update in case it exists.
     */
    where: PresenceWhereUniqueInput
    /**
     * In case the Presence found by the `where` argument doesn't exist, create a new Presence with this data.
     */
    create: XOR<PresenceCreateInput, PresenceUncheckedCreateInput>
    /**
     * In case the Presence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PresenceUpdateInput, PresenceUncheckedUpdateInput>
  }

  /**
   * Presence delete
   */
  export type PresenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
    /**
     * Filter which Presence to delete.
     */
    where: PresenceWhereUniqueInput
  }

  /**
   * Presence deleteMany
   */
  export type PresenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presences to delete
     */
    where?: PresenceWhereInput
    /**
     * Limit how many Presences to delete.
     */
    limit?: number
  }

  /**
   * Presence.adultStudent
   */
  export type Presence$adultStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * Presence.childStudent
   */
  export type Presence$childStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    where?: ChildWhereInput
  }

  /**
   * Presence without action
   */
  export type PresenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence
     */
    select?: PresenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presence
     */
    omit?: PresenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresenceInclude<ExtArgs> | null
  }


  /**
   * Model Contract
   */

  export type AggregateContract = {
    _count: ContractCountAggregateOutputType | null
    _avg: ContractAvgAggregateOutputType | null
    _sum: ContractSumAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  export type ContractAvgAggregateOutputType = {
    commutingFee: number | null
    discountPercentage: number | null
    packageId: number | null
  }

  export type ContractSumAggregateOutputType = {
    commutingFee: number | null
    discountPercentage: number | null
    packageId: number | null
  }

  export type ContractMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.ContractType | null
    address: string | null
    neighborhood: string | null
    city: string | null
    date: Date | null
    eventStartTime: Date | null
    commutingFee: number | null
    discountPercentage: number | null
    paymentDueDate: Date | null
    observations: string | null
    fileUrl: string | null
    videomakerId: string | null
    packageId: number | null
    isSigned: $Enums.SignatureStatus | null
    isPaid: $Enums.PaymentStatus | null
    generalStatus: $Enums.GeneralStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.ContractType | null
    address: string | null
    neighborhood: string | null
    city: string | null
    date: Date | null
    eventStartTime: Date | null
    commutingFee: number | null
    discountPercentage: number | null
    paymentDueDate: Date | null
    observations: string | null
    fileUrl: string | null
    videomakerId: string | null
    packageId: number | null
    isSigned: $Enums.SignatureStatus | null
    isPaid: $Enums.PaymentStatus | null
    generalStatus: $Enums.GeneralStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractCountAggregateOutputType = {
    id: number
    name: number
    type: number
    address: number
    neighborhood: number
    city: number
    date: number
    eventStartTime: number
    commutingFee: number
    discountPercentage: number
    paymentDueDate: number
    observations: number
    fileUrl: number
    videomakerId: number
    packageId: number
    isSigned: number
    isPaid: number
    generalStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContractAvgAggregateInputType = {
    commutingFee?: true
    discountPercentage?: true
    packageId?: true
  }

  export type ContractSumAggregateInputType = {
    commutingFee?: true
    discountPercentage?: true
    packageId?: true
  }

  export type ContractMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    address?: true
    neighborhood?: true
    city?: true
    date?: true
    eventStartTime?: true
    commutingFee?: true
    discountPercentage?: true
    paymentDueDate?: true
    observations?: true
    fileUrl?: true
    videomakerId?: true
    packageId?: true
    isSigned?: true
    isPaid?: true
    generalStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    address?: true
    neighborhood?: true
    city?: true
    date?: true
    eventStartTime?: true
    commutingFee?: true
    discountPercentage?: true
    paymentDueDate?: true
    observations?: true
    fileUrl?: true
    videomakerId?: true
    packageId?: true
    isSigned?: true
    isPaid?: true
    generalStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    address?: true
    neighborhood?: true
    city?: true
    date?: true
    eventStartTime?: true
    commutingFee?: true
    discountPercentage?: true
    paymentDueDate?: true
    observations?: true
    fileUrl?: true
    videomakerId?: true
    packageId?: true
    isSigned?: true
    isPaid?: true
    generalStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contract to aggregate.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contracts
    **/
    _count?: true | ContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContractAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContractSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractMaxAggregateInputType
  }

  export type GetContractAggregateType<T extends ContractAggregateArgs> = {
        [P in keyof T & keyof AggregateContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContract[P]>
      : GetScalarType<T[P], AggregateContract[P]>
  }




  export type ContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithAggregationInput | ContractOrderByWithAggregationInput[]
    by: ContractScalarFieldEnum[] | ContractScalarFieldEnum
    having?: ContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractCountAggregateInputType | true
    _avg?: ContractAvgAggregateInputType
    _sum?: ContractSumAggregateInputType
    _min?: ContractMinAggregateInputType
    _max?: ContractMaxAggregateInputType
  }

  export type ContractGroupByOutputType = {
    id: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date
    eventStartTime: Date
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date
    observations: string
    fileUrl: string | null
    videomakerId: string | null
    packageId: number
    isSigned: $Enums.SignatureStatus
    isPaid: $Enums.PaymentStatus
    generalStatus: $Enums.GeneralStatus
    createdAt: Date
    updatedAt: Date
    _count: ContractCountAggregateOutputType | null
    _avg: ContractAvgAggregateOutputType | null
    _sum: ContractSumAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  type GetContractGroupByPayload<T extends ContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractGroupByOutputType[P]>
            : GetScalarType<T[P], ContractGroupByOutputType[P]>
        }
      >
    >


  export type ContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    address?: boolean
    neighborhood?: boolean
    city?: boolean
    date?: boolean
    eventStartTime?: boolean
    commutingFee?: boolean
    discountPercentage?: boolean
    paymentDueDate?: boolean
    observations?: boolean
    fileUrl?: boolean
    videomakerId?: boolean
    packageId?: boolean
    isSigned?: boolean
    isPaid?: boolean
    generalStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clients?: boolean | Contract$clientsArgs<ExtArgs>
    photographers?: boolean | Contract$photographersArgs<ExtArgs>
    videomaker?: boolean | Contract$videomakerArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
    transactions?: boolean | Contract$transactionsArgs<ExtArgs>
    _count?: boolean | ContractCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>



  export type ContractSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    address?: boolean
    neighborhood?: boolean
    city?: boolean
    date?: boolean
    eventStartTime?: boolean
    commutingFee?: boolean
    discountPercentage?: boolean
    paymentDueDate?: boolean
    observations?: boolean
    fileUrl?: boolean
    videomakerId?: boolean
    packageId?: boolean
    isSigned?: boolean
    isPaid?: boolean
    generalStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContractOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "address" | "neighborhood" | "city" | "date" | "eventStartTime" | "commutingFee" | "discountPercentage" | "paymentDueDate" | "observations" | "fileUrl" | "videomakerId" | "packageId" | "isSigned" | "isPaid" | "generalStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["contract"]>
  export type ContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clients?: boolean | Contract$clientsArgs<ExtArgs>
    photographers?: boolean | Contract$photographersArgs<ExtArgs>
    videomaker?: boolean | Contract$videomakerArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
    transactions?: boolean | Contract$transactionsArgs<ExtArgs>
    _count?: boolean | ContractCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contract"
    objects: {
      clients: Prisma.$ClientContractPayload<ExtArgs>[]
      photographers: Prisma.$ContractPhotographerPayload<ExtArgs>[]
      videomaker: Prisma.$UserPayload<ExtArgs> | null
      package: Prisma.$PackagePayload<ExtArgs>
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.ContractType
      address: string
      neighborhood: string
      city: string
      date: Date
      eventStartTime: Date
      commutingFee: number
      discountPercentage: number
      paymentDueDate: Date
      observations: string
      fileUrl: string | null
      videomakerId: string | null
      packageId: number
      isSigned: $Enums.SignatureStatus
      isPaid: $Enums.PaymentStatus
      generalStatus: $Enums.GeneralStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contract"]>
    composites: {}
  }

  type ContractGetPayload<S extends boolean | null | undefined | ContractDefaultArgs> = $Result.GetResult<Prisma.$ContractPayload, S>

  type ContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContractFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractCountAggregateInputType | true
    }

  export interface ContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contract'], meta: { name: 'Contract' } }
    /**
     * Find zero or one Contract that matches the filter.
     * @param {ContractFindUniqueArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractFindUniqueArgs>(args: SelectSubset<T, ContractFindUniqueArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contract that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContractFindUniqueOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractFindFirstArgs>(args?: SelectSubset<T, ContractFindFirstArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contracts
     * const contracts = await prisma.contract.findMany()
     * 
     * // Get first 10 Contracts
     * const contracts = await prisma.contract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractWithIdOnly = await prisma.contract.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractFindManyArgs>(args?: SelectSubset<T, ContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contract.
     * @param {ContractCreateArgs} args - Arguments to create a Contract.
     * @example
     * // Create one Contract
     * const Contract = await prisma.contract.create({
     *   data: {
     *     // ... data to create a Contract
     *   }
     * })
     * 
     */
    create<T extends ContractCreateArgs>(args: SelectSubset<T, ContractCreateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contracts.
     * @param {ContractCreateManyArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractCreateManyArgs>(args?: SelectSubset<T, ContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contract.
     * @param {ContractDeleteArgs} args - Arguments to delete one Contract.
     * @example
     * // Delete one Contract
     * const Contract = await prisma.contract.delete({
     *   where: {
     *     // ... filter to delete one Contract
     *   }
     * })
     * 
     */
    delete<T extends ContractDeleteArgs>(args: SelectSubset<T, ContractDeleteArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contract.
     * @param {ContractUpdateArgs} args - Arguments to update one Contract.
     * @example
     * // Update one Contract
     * const contract = await prisma.contract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractUpdateArgs>(args: SelectSubset<T, ContractUpdateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contracts.
     * @param {ContractDeleteManyArgs} args - Arguments to filter Contracts to delete.
     * @example
     * // Delete a few Contracts
     * const { count } = await prisma.contract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractDeleteManyArgs>(args?: SelectSubset<T, ContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contracts
     * const contract = await prisma.contract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractUpdateManyArgs>(args: SelectSubset<T, ContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contract.
     * @param {ContractUpsertArgs} args - Arguments to update or create a Contract.
     * @example
     * // Update or create a Contract
     * const contract = await prisma.contract.upsert({
     *   create: {
     *     // ... data to create a Contract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contract we want to update
     *   }
     * })
     */
    upsert<T extends ContractUpsertArgs>(args: SelectSubset<T, ContractUpsertArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractCountArgs} args - Arguments to filter Contracts to count.
     * @example
     * // Count the number of Contracts
     * const count = await prisma.contract.count({
     *   where: {
     *     // ... the filter for the Contracts we want to count
     *   }
     * })
    **/
    count<T extends ContractCountArgs>(
      args?: Subset<T, ContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractAggregateArgs>(args: Subset<T, ContractAggregateArgs>): Prisma.PrismaPromise<GetContractAggregateType<T>>

    /**
     * Group by Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractGroupByArgs['orderBy'] }
        : { orderBy?: ContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contract model
   */
  readonly fields: ContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clients<T extends Contract$clientsArgs<ExtArgs> = {}>(args?: Subset<T, Contract$clientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    photographers<T extends Contract$photographersArgs<ExtArgs> = {}>(args?: Subset<T, Contract$photographersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPhotographerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    videomaker<T extends Contract$videomakerArgs<ExtArgs> = {}>(args?: Subset<T, Contract$videomakerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    package<T extends PackageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackageDefaultArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactions<T extends Contract$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Contract$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contract model
   */
  interface ContractFieldRefs {
    readonly id: FieldRef<"Contract", 'String'>
    readonly name: FieldRef<"Contract", 'String'>
    readonly type: FieldRef<"Contract", 'ContractType'>
    readonly address: FieldRef<"Contract", 'String'>
    readonly neighborhood: FieldRef<"Contract", 'String'>
    readonly city: FieldRef<"Contract", 'String'>
    readonly date: FieldRef<"Contract", 'DateTime'>
    readonly eventStartTime: FieldRef<"Contract", 'DateTime'>
    readonly commutingFee: FieldRef<"Contract", 'Float'>
    readonly discountPercentage: FieldRef<"Contract", 'Float'>
    readonly paymentDueDate: FieldRef<"Contract", 'DateTime'>
    readonly observations: FieldRef<"Contract", 'String'>
    readonly fileUrl: FieldRef<"Contract", 'String'>
    readonly videomakerId: FieldRef<"Contract", 'String'>
    readonly packageId: FieldRef<"Contract", 'Int'>
    readonly isSigned: FieldRef<"Contract", 'SignatureStatus'>
    readonly isPaid: FieldRef<"Contract", 'PaymentStatus'>
    readonly generalStatus: FieldRef<"Contract", 'GeneralStatus'>
    readonly createdAt: FieldRef<"Contract", 'DateTime'>
    readonly updatedAt: FieldRef<"Contract", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contract findUnique
   */
  export type ContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findUniqueOrThrow
   */
  export type ContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findFirst
   */
  export type ContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findFirstOrThrow
   */
  export type ContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findMany
   */
  export type ContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contracts to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract create
   */
  export type ContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to create a Contract.
     */
    data: XOR<ContractCreateInput, ContractUncheckedCreateInput>
  }

  /**
   * Contract createMany
   */
  export type ContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contract update
   */
  export type ContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to update a Contract.
     */
    data: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
    /**
     * Choose, which Contract to update.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract updateMany
   */
  export type ContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to update.
     */
    limit?: number
  }

  /**
   * Contract upsert
   */
  export type ContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The filter to search for the Contract to update in case it exists.
     */
    where: ContractWhereUniqueInput
    /**
     * In case the Contract found by the `where` argument doesn't exist, create a new Contract with this data.
     */
    create: XOR<ContractCreateInput, ContractUncheckedCreateInput>
    /**
     * In case the Contract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
  }

  /**
   * Contract delete
   */
  export type ContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter which Contract to delete.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract deleteMany
   */
  export type ContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contracts to delete
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to delete.
     */
    limit?: number
  }

  /**
   * Contract.clients
   */
  export type Contract$clientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContract
     */
    select?: ClientContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientContract
     */
    omit?: ClientContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContractInclude<ExtArgs> | null
    where?: ClientContractWhereInput
    orderBy?: ClientContractOrderByWithRelationInput | ClientContractOrderByWithRelationInput[]
    cursor?: ClientContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientContractScalarFieldEnum | ClientContractScalarFieldEnum[]
  }

  /**
   * Contract.photographers
   */
  export type Contract$photographersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractPhotographer
     */
    select?: ContractPhotographerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractPhotographer
     */
    omit?: ContractPhotographerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractPhotographerInclude<ExtArgs> | null
    where?: ContractPhotographerWhereInput
    orderBy?: ContractPhotographerOrderByWithRelationInput | ContractPhotographerOrderByWithRelationInput[]
    cursor?: ContractPhotographerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractPhotographerScalarFieldEnum | ContractPhotographerScalarFieldEnum[]
  }

  /**
   * Contract.videomaker
   */
  export type Contract$videomakerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Contract.transactions
   */
  export type Contract$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Contract without action
   */
  export type ContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: number | null
    yogaClassId: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: number | null
    yogaClassId: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    amount: number | null
    date: Date | null
    description: string | null
    method: $Enums.PaymentMethod | null
    isPaid: boolean | null
    contractId: string | null
    yogaClassId: number | null
    clientId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    date: Date | null
    description: string | null
    method: $Enums.PaymentMethod | null
    isPaid: boolean | null
    contractId: string | null
    yogaClassId: number | null
    clientId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    amount: number
    date: number
    description: number
    method: number
    isPaid: number
    contractId: number
    yogaClassId: number
    clientId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
    yogaClassId?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
    yogaClassId?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    amount?: true
    date?: true
    description?: true
    method?: true
    isPaid?: true
    contractId?: true
    yogaClassId?: true
    clientId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    amount?: true
    date?: true
    description?: true
    method?: true
    isPaid?: true
    contractId?: true
    yogaClassId?: true
    clientId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    amount?: true
    date?: true
    description?: true
    method?: true
    isPaid?: true
    contractId?: true
    yogaClassId?: true
    clientId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    amount: number
    date: Date
    description: string | null
    method: $Enums.PaymentMethod
    isPaid: boolean
    contractId: string | null
    yogaClassId: number | null
    clientId: string | null
    createdAt: Date
    updatedAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    date?: boolean
    description?: boolean
    method?: boolean
    isPaid?: boolean
    contractId?: boolean
    yogaClassId?: boolean
    clientId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contract?: boolean | Transaction$contractArgs<ExtArgs>
    yogaClass?: boolean | Transaction$yogaClassArgs<ExtArgs>
    client?: boolean | Transaction$clientArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>



  export type TransactionSelectScalar = {
    id?: boolean
    amount?: boolean
    date?: boolean
    description?: boolean
    method?: boolean
    isPaid?: boolean
    contractId?: boolean
    yogaClassId?: boolean
    clientId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "amount" | "date" | "description" | "method" | "isPaid" | "contractId" | "yogaClassId" | "clientId" | "createdAt" | "updatedAt", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contract?: boolean | Transaction$contractArgs<ExtArgs>
    yogaClass?: boolean | Transaction$yogaClassArgs<ExtArgs>
    client?: boolean | Transaction$clientArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      contract: Prisma.$ContractPayload<ExtArgs> | null
      yogaClass: Prisma.$YogaClassPayload<ExtArgs> | null
      client: Prisma.$ClientPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amount: number
      date: Date
      description: string | null
      method: $Enums.PaymentMethod
      isPaid: boolean
      contractId: string | null
      yogaClassId: number | null
      clientId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contract<T extends Transaction$contractArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$contractArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    yogaClass<T extends Transaction$yogaClassArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$yogaClassArgs<ExtArgs>>): Prisma__YogaClassClient<$Result.GetResult<Prisma.$YogaClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    client<T extends Transaction$clientArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$clientArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly amount: FieldRef<"Transaction", 'Float'>
    readonly date: FieldRef<"Transaction", 'DateTime'>
    readonly description: FieldRef<"Transaction", 'String'>
    readonly method: FieldRef<"Transaction", 'PaymentMethod'>
    readonly isPaid: FieldRef<"Transaction", 'Boolean'>
    readonly contractId: FieldRef<"Transaction", 'String'>
    readonly yogaClassId: FieldRef<"Transaction", 'Int'>
    readonly clientId: FieldRef<"Transaction", 'String'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction.contract
   */
  export type Transaction$contractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
  }

  /**
   * Transaction.yogaClass
   */
  export type Transaction$yogaClassArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YogaClass
     */
    select?: YogaClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the YogaClass
     */
    omit?: YogaClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YogaClassInclude<ExtArgs> | null
    where?: YogaClassWhereInput
  }

  /**
   * Transaction.client
   */
  export type Transaction$clientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model ContractPhotographer
   */

  export type AggregateContractPhotographer = {
    _count: ContractPhotographerCountAggregateOutputType | null
    _min: ContractPhotographerMinAggregateOutputType | null
    _max: ContractPhotographerMaxAggregateOutputType | null
  }

  export type ContractPhotographerMinAggregateOutputType = {
    photographerId: string | null
    contractId: string | null
  }

  export type ContractPhotographerMaxAggregateOutputType = {
    photographerId: string | null
    contractId: string | null
  }

  export type ContractPhotographerCountAggregateOutputType = {
    photographerId: number
    contractId: number
    _all: number
  }


  export type ContractPhotographerMinAggregateInputType = {
    photographerId?: true
    contractId?: true
  }

  export type ContractPhotographerMaxAggregateInputType = {
    photographerId?: true
    contractId?: true
  }

  export type ContractPhotographerCountAggregateInputType = {
    photographerId?: true
    contractId?: true
    _all?: true
  }

  export type ContractPhotographerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractPhotographer to aggregate.
     */
    where?: ContractPhotographerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractPhotographers to fetch.
     */
    orderBy?: ContractPhotographerOrderByWithRelationInput | ContractPhotographerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractPhotographerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractPhotographers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractPhotographers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContractPhotographers
    **/
    _count?: true | ContractPhotographerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractPhotographerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractPhotographerMaxAggregateInputType
  }

  export type GetContractPhotographerAggregateType<T extends ContractPhotographerAggregateArgs> = {
        [P in keyof T & keyof AggregateContractPhotographer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContractPhotographer[P]>
      : GetScalarType<T[P], AggregateContractPhotographer[P]>
  }




  export type ContractPhotographerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractPhotographerWhereInput
    orderBy?: ContractPhotographerOrderByWithAggregationInput | ContractPhotographerOrderByWithAggregationInput[]
    by: ContractPhotographerScalarFieldEnum[] | ContractPhotographerScalarFieldEnum
    having?: ContractPhotographerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractPhotographerCountAggregateInputType | true
    _min?: ContractPhotographerMinAggregateInputType
    _max?: ContractPhotographerMaxAggregateInputType
  }

  export type ContractPhotographerGroupByOutputType = {
    photographerId: string
    contractId: string
    _count: ContractPhotographerCountAggregateOutputType | null
    _min: ContractPhotographerMinAggregateOutputType | null
    _max: ContractPhotographerMaxAggregateOutputType | null
  }

  type GetContractPhotographerGroupByPayload<T extends ContractPhotographerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractPhotographerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractPhotographerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractPhotographerGroupByOutputType[P]>
            : GetScalarType<T[P], ContractPhotographerGroupByOutputType[P]>
        }
      >
    >


  export type ContractPhotographerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    photographerId?: boolean
    contractId?: boolean
    photographer?: boolean | UserDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contractPhotographer"]>



  export type ContractPhotographerSelectScalar = {
    photographerId?: boolean
    contractId?: boolean
  }

  export type ContractPhotographerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"photographerId" | "contractId", ExtArgs["result"]["contractPhotographer"]>
  export type ContractPhotographerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    photographer?: boolean | UserDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
  }

  export type $ContractPhotographerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContractPhotographer"
    objects: {
      photographer: Prisma.$UserPayload<ExtArgs>
      contract: Prisma.$ContractPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      photographerId: string
      contractId: string
    }, ExtArgs["result"]["contractPhotographer"]>
    composites: {}
  }

  type ContractPhotographerGetPayload<S extends boolean | null | undefined | ContractPhotographerDefaultArgs> = $Result.GetResult<Prisma.$ContractPhotographerPayload, S>

  type ContractPhotographerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContractPhotographerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractPhotographerCountAggregateInputType | true
    }

  export interface ContractPhotographerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContractPhotographer'], meta: { name: 'ContractPhotographer' } }
    /**
     * Find zero or one ContractPhotographer that matches the filter.
     * @param {ContractPhotographerFindUniqueArgs} args - Arguments to find a ContractPhotographer
     * @example
     * // Get one ContractPhotographer
     * const contractPhotographer = await prisma.contractPhotographer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractPhotographerFindUniqueArgs>(args: SelectSubset<T, ContractPhotographerFindUniqueArgs<ExtArgs>>): Prisma__ContractPhotographerClient<$Result.GetResult<Prisma.$ContractPhotographerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContractPhotographer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContractPhotographerFindUniqueOrThrowArgs} args - Arguments to find a ContractPhotographer
     * @example
     * // Get one ContractPhotographer
     * const contractPhotographer = await prisma.contractPhotographer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractPhotographerFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractPhotographerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractPhotographerClient<$Result.GetResult<Prisma.$ContractPhotographerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContractPhotographer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractPhotographerFindFirstArgs} args - Arguments to find a ContractPhotographer
     * @example
     * // Get one ContractPhotographer
     * const contractPhotographer = await prisma.contractPhotographer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractPhotographerFindFirstArgs>(args?: SelectSubset<T, ContractPhotographerFindFirstArgs<ExtArgs>>): Prisma__ContractPhotographerClient<$Result.GetResult<Prisma.$ContractPhotographerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContractPhotographer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractPhotographerFindFirstOrThrowArgs} args - Arguments to find a ContractPhotographer
     * @example
     * // Get one ContractPhotographer
     * const contractPhotographer = await prisma.contractPhotographer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractPhotographerFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractPhotographerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractPhotographerClient<$Result.GetResult<Prisma.$ContractPhotographerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContractPhotographers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractPhotographerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContractPhotographers
     * const contractPhotographers = await prisma.contractPhotographer.findMany()
     * 
     * // Get first 10 ContractPhotographers
     * const contractPhotographers = await prisma.contractPhotographer.findMany({ take: 10 })
     * 
     * // Only select the `photographerId`
     * const contractPhotographerWithPhotographerIdOnly = await prisma.contractPhotographer.findMany({ select: { photographerId: true } })
     * 
     */
    findMany<T extends ContractPhotographerFindManyArgs>(args?: SelectSubset<T, ContractPhotographerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPhotographerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContractPhotographer.
     * @param {ContractPhotographerCreateArgs} args - Arguments to create a ContractPhotographer.
     * @example
     * // Create one ContractPhotographer
     * const ContractPhotographer = await prisma.contractPhotographer.create({
     *   data: {
     *     // ... data to create a ContractPhotographer
     *   }
     * })
     * 
     */
    create<T extends ContractPhotographerCreateArgs>(args: SelectSubset<T, ContractPhotographerCreateArgs<ExtArgs>>): Prisma__ContractPhotographerClient<$Result.GetResult<Prisma.$ContractPhotographerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContractPhotographers.
     * @param {ContractPhotographerCreateManyArgs} args - Arguments to create many ContractPhotographers.
     * @example
     * // Create many ContractPhotographers
     * const contractPhotographer = await prisma.contractPhotographer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractPhotographerCreateManyArgs>(args?: SelectSubset<T, ContractPhotographerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ContractPhotographer.
     * @param {ContractPhotographerDeleteArgs} args - Arguments to delete one ContractPhotographer.
     * @example
     * // Delete one ContractPhotographer
     * const ContractPhotographer = await prisma.contractPhotographer.delete({
     *   where: {
     *     // ... filter to delete one ContractPhotographer
     *   }
     * })
     * 
     */
    delete<T extends ContractPhotographerDeleteArgs>(args: SelectSubset<T, ContractPhotographerDeleteArgs<ExtArgs>>): Prisma__ContractPhotographerClient<$Result.GetResult<Prisma.$ContractPhotographerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContractPhotographer.
     * @param {ContractPhotographerUpdateArgs} args - Arguments to update one ContractPhotographer.
     * @example
     * // Update one ContractPhotographer
     * const contractPhotographer = await prisma.contractPhotographer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractPhotographerUpdateArgs>(args: SelectSubset<T, ContractPhotographerUpdateArgs<ExtArgs>>): Prisma__ContractPhotographerClient<$Result.GetResult<Prisma.$ContractPhotographerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContractPhotographers.
     * @param {ContractPhotographerDeleteManyArgs} args - Arguments to filter ContractPhotographers to delete.
     * @example
     * // Delete a few ContractPhotographers
     * const { count } = await prisma.contractPhotographer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractPhotographerDeleteManyArgs>(args?: SelectSubset<T, ContractPhotographerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContractPhotographers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractPhotographerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContractPhotographers
     * const contractPhotographer = await prisma.contractPhotographer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractPhotographerUpdateManyArgs>(args: SelectSubset<T, ContractPhotographerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContractPhotographer.
     * @param {ContractPhotographerUpsertArgs} args - Arguments to update or create a ContractPhotographer.
     * @example
     * // Update or create a ContractPhotographer
     * const contractPhotographer = await prisma.contractPhotographer.upsert({
     *   create: {
     *     // ... data to create a ContractPhotographer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContractPhotographer we want to update
     *   }
     * })
     */
    upsert<T extends ContractPhotographerUpsertArgs>(args: SelectSubset<T, ContractPhotographerUpsertArgs<ExtArgs>>): Prisma__ContractPhotographerClient<$Result.GetResult<Prisma.$ContractPhotographerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContractPhotographers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractPhotographerCountArgs} args - Arguments to filter ContractPhotographers to count.
     * @example
     * // Count the number of ContractPhotographers
     * const count = await prisma.contractPhotographer.count({
     *   where: {
     *     // ... the filter for the ContractPhotographers we want to count
     *   }
     * })
    **/
    count<T extends ContractPhotographerCountArgs>(
      args?: Subset<T, ContractPhotographerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractPhotographerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContractPhotographer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractPhotographerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractPhotographerAggregateArgs>(args: Subset<T, ContractPhotographerAggregateArgs>): Prisma.PrismaPromise<GetContractPhotographerAggregateType<T>>

    /**
     * Group by ContractPhotographer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractPhotographerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractPhotographerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractPhotographerGroupByArgs['orderBy'] }
        : { orderBy?: ContractPhotographerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractPhotographerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractPhotographerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContractPhotographer model
   */
  readonly fields: ContractPhotographerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContractPhotographer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractPhotographerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    photographer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contract<T extends ContractDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractDefaultArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContractPhotographer model
   */
  interface ContractPhotographerFieldRefs {
    readonly photographerId: FieldRef<"ContractPhotographer", 'String'>
    readonly contractId: FieldRef<"ContractPhotographer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ContractPhotographer findUnique
   */
  export type ContractPhotographerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractPhotographer
     */
    select?: ContractPhotographerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractPhotographer
     */
    omit?: ContractPhotographerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractPhotographerInclude<ExtArgs> | null
    /**
     * Filter, which ContractPhotographer to fetch.
     */
    where: ContractPhotographerWhereUniqueInput
  }

  /**
   * ContractPhotographer findUniqueOrThrow
   */
  export type ContractPhotographerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractPhotographer
     */
    select?: ContractPhotographerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractPhotographer
     */
    omit?: ContractPhotographerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractPhotographerInclude<ExtArgs> | null
    /**
     * Filter, which ContractPhotographer to fetch.
     */
    where: ContractPhotographerWhereUniqueInput
  }

  /**
   * ContractPhotographer findFirst
   */
  export type ContractPhotographerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractPhotographer
     */
    select?: ContractPhotographerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractPhotographer
     */
    omit?: ContractPhotographerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractPhotographerInclude<ExtArgs> | null
    /**
     * Filter, which ContractPhotographer to fetch.
     */
    where?: ContractPhotographerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractPhotographers to fetch.
     */
    orderBy?: ContractPhotographerOrderByWithRelationInput | ContractPhotographerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractPhotographers.
     */
    cursor?: ContractPhotographerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractPhotographers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractPhotographers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractPhotographers.
     */
    distinct?: ContractPhotographerScalarFieldEnum | ContractPhotographerScalarFieldEnum[]
  }

  /**
   * ContractPhotographer findFirstOrThrow
   */
  export type ContractPhotographerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractPhotographer
     */
    select?: ContractPhotographerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractPhotographer
     */
    omit?: ContractPhotographerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractPhotographerInclude<ExtArgs> | null
    /**
     * Filter, which ContractPhotographer to fetch.
     */
    where?: ContractPhotographerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractPhotographers to fetch.
     */
    orderBy?: ContractPhotographerOrderByWithRelationInput | ContractPhotographerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContractPhotographers.
     */
    cursor?: ContractPhotographerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractPhotographers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractPhotographers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContractPhotographers.
     */
    distinct?: ContractPhotographerScalarFieldEnum | ContractPhotographerScalarFieldEnum[]
  }

  /**
   * ContractPhotographer findMany
   */
  export type ContractPhotographerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractPhotographer
     */
    select?: ContractPhotographerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractPhotographer
     */
    omit?: ContractPhotographerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractPhotographerInclude<ExtArgs> | null
    /**
     * Filter, which ContractPhotographers to fetch.
     */
    where?: ContractPhotographerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContractPhotographers to fetch.
     */
    orderBy?: ContractPhotographerOrderByWithRelationInput | ContractPhotographerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContractPhotographers.
     */
    cursor?: ContractPhotographerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContractPhotographers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContractPhotographers.
     */
    skip?: number
    distinct?: ContractPhotographerScalarFieldEnum | ContractPhotographerScalarFieldEnum[]
  }

  /**
   * ContractPhotographer create
   */
  export type ContractPhotographerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractPhotographer
     */
    select?: ContractPhotographerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractPhotographer
     */
    omit?: ContractPhotographerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractPhotographerInclude<ExtArgs> | null
    /**
     * The data needed to create a ContractPhotographer.
     */
    data: XOR<ContractPhotographerCreateInput, ContractPhotographerUncheckedCreateInput>
  }

  /**
   * ContractPhotographer createMany
   */
  export type ContractPhotographerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContractPhotographers.
     */
    data: ContractPhotographerCreateManyInput | ContractPhotographerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContractPhotographer update
   */
  export type ContractPhotographerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractPhotographer
     */
    select?: ContractPhotographerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractPhotographer
     */
    omit?: ContractPhotographerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractPhotographerInclude<ExtArgs> | null
    /**
     * The data needed to update a ContractPhotographer.
     */
    data: XOR<ContractPhotographerUpdateInput, ContractPhotographerUncheckedUpdateInput>
    /**
     * Choose, which ContractPhotographer to update.
     */
    where: ContractPhotographerWhereUniqueInput
  }

  /**
   * ContractPhotographer updateMany
   */
  export type ContractPhotographerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContractPhotographers.
     */
    data: XOR<ContractPhotographerUpdateManyMutationInput, ContractPhotographerUncheckedUpdateManyInput>
    /**
     * Filter which ContractPhotographers to update
     */
    where?: ContractPhotographerWhereInput
    /**
     * Limit how many ContractPhotographers to update.
     */
    limit?: number
  }

  /**
   * ContractPhotographer upsert
   */
  export type ContractPhotographerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractPhotographer
     */
    select?: ContractPhotographerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractPhotographer
     */
    omit?: ContractPhotographerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractPhotographerInclude<ExtArgs> | null
    /**
     * The filter to search for the ContractPhotographer to update in case it exists.
     */
    where: ContractPhotographerWhereUniqueInput
    /**
     * In case the ContractPhotographer found by the `where` argument doesn't exist, create a new ContractPhotographer with this data.
     */
    create: XOR<ContractPhotographerCreateInput, ContractPhotographerUncheckedCreateInput>
    /**
     * In case the ContractPhotographer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractPhotographerUpdateInput, ContractPhotographerUncheckedUpdateInput>
  }

  /**
   * ContractPhotographer delete
   */
  export type ContractPhotographerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractPhotographer
     */
    select?: ContractPhotographerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractPhotographer
     */
    omit?: ContractPhotographerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractPhotographerInclude<ExtArgs> | null
    /**
     * Filter which ContractPhotographer to delete.
     */
    where: ContractPhotographerWhereUniqueInput
  }

  /**
   * ContractPhotographer deleteMany
   */
  export type ContractPhotographerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContractPhotographers to delete
     */
    where?: ContractPhotographerWhereInput
    /**
     * Limit how many ContractPhotographers to delete.
     */
    limit?: number
  }

  /**
   * ContractPhotographer without action
   */
  export type ContractPhotographerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractPhotographer
     */
    select?: ContractPhotographerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContractPhotographer
     */
    omit?: ContractPhotographerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractPhotographerInclude<ExtArgs> | null
  }


  /**
   * Model ClientContract
   */

  export type AggregateClientContract = {
    _count: ClientContractCountAggregateOutputType | null
    _min: ClientContractMinAggregateOutputType | null
    _max: ClientContractMaxAggregateOutputType | null
  }

  export type ClientContractMinAggregateOutputType = {
    clientId: string | null
    contractId: string | null
    assignedAt: Date | null
  }

  export type ClientContractMaxAggregateOutputType = {
    clientId: string | null
    contractId: string | null
    assignedAt: Date | null
  }

  export type ClientContractCountAggregateOutputType = {
    clientId: number
    contractId: number
    assignedAt: number
    _all: number
  }


  export type ClientContractMinAggregateInputType = {
    clientId?: true
    contractId?: true
    assignedAt?: true
  }

  export type ClientContractMaxAggregateInputType = {
    clientId?: true
    contractId?: true
    assignedAt?: true
  }

  export type ClientContractCountAggregateInputType = {
    clientId?: true
    contractId?: true
    assignedAt?: true
    _all?: true
  }

  export type ClientContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientContract to aggregate.
     */
    where?: ClientContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientContracts to fetch.
     */
    orderBy?: ClientContractOrderByWithRelationInput | ClientContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClientContracts
    **/
    _count?: true | ClientContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientContractMaxAggregateInputType
  }

  export type GetClientContractAggregateType<T extends ClientContractAggregateArgs> = {
        [P in keyof T & keyof AggregateClientContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientContract[P]>
      : GetScalarType<T[P], AggregateClientContract[P]>
  }




  export type ClientContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientContractWhereInput
    orderBy?: ClientContractOrderByWithAggregationInput | ClientContractOrderByWithAggregationInput[]
    by: ClientContractScalarFieldEnum[] | ClientContractScalarFieldEnum
    having?: ClientContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientContractCountAggregateInputType | true
    _min?: ClientContractMinAggregateInputType
    _max?: ClientContractMaxAggregateInputType
  }

  export type ClientContractGroupByOutputType = {
    clientId: string
    contractId: string
    assignedAt: Date
    _count: ClientContractCountAggregateOutputType | null
    _min: ClientContractMinAggregateOutputType | null
    _max: ClientContractMaxAggregateOutputType | null
  }

  type GetClientContractGroupByPayload<T extends ClientContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientContractGroupByOutputType[P]>
            : GetScalarType<T[P], ClientContractGroupByOutputType[P]>
        }
      >
    >


  export type ClientContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    clientId?: boolean
    contractId?: boolean
    assignedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clientContract"]>



  export type ClientContractSelectScalar = {
    clientId?: boolean
    contractId?: boolean
    assignedAt?: boolean
  }

  export type ClientContractOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"clientId" | "contractId" | "assignedAt", ExtArgs["result"]["clientContract"]>
  export type ClientContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
  }

  export type $ClientContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClientContract"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      contract: Prisma.$ContractPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      clientId: string
      contractId: string
      assignedAt: Date
    }, ExtArgs["result"]["clientContract"]>
    composites: {}
  }

  type ClientContractGetPayload<S extends boolean | null | undefined | ClientContractDefaultArgs> = $Result.GetResult<Prisma.$ClientContractPayload, S>

  type ClientContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientContractFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientContractCountAggregateInputType | true
    }

  export interface ClientContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClientContract'], meta: { name: 'ClientContract' } }
    /**
     * Find zero or one ClientContract that matches the filter.
     * @param {ClientContractFindUniqueArgs} args - Arguments to find a ClientContract
     * @example
     * // Get one ClientContract
     * const clientContract = await prisma.clientContract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientContractFindUniqueArgs>(args: SelectSubset<T, ClientContractFindUniqueArgs<ExtArgs>>): Prisma__ClientContractClient<$Result.GetResult<Prisma.$ClientContractPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClientContract that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientContractFindUniqueOrThrowArgs} args - Arguments to find a ClientContract
     * @example
     * // Get one ClientContract
     * const clientContract = await prisma.clientContract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientContractFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientContractClient<$Result.GetResult<Prisma.$ClientContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClientContract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContractFindFirstArgs} args - Arguments to find a ClientContract
     * @example
     * // Get one ClientContract
     * const clientContract = await prisma.clientContract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientContractFindFirstArgs>(args?: SelectSubset<T, ClientContractFindFirstArgs<ExtArgs>>): Prisma__ClientContractClient<$Result.GetResult<Prisma.$ClientContractPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClientContract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContractFindFirstOrThrowArgs} args - Arguments to find a ClientContract
     * @example
     * // Get one ClientContract
     * const clientContract = await prisma.clientContract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientContractFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientContractClient<$Result.GetResult<Prisma.$ClientContractPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClientContracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClientContracts
     * const clientContracts = await prisma.clientContract.findMany()
     * 
     * // Get first 10 ClientContracts
     * const clientContracts = await prisma.clientContract.findMany({ take: 10 })
     * 
     * // Only select the `clientId`
     * const clientContractWithClientIdOnly = await prisma.clientContract.findMany({ select: { clientId: true } })
     * 
     */
    findMany<T extends ClientContractFindManyArgs>(args?: SelectSubset<T, ClientContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClientContract.
     * @param {ClientContractCreateArgs} args - Arguments to create a ClientContract.
     * @example
     * // Create one ClientContract
     * const ClientContract = await prisma.clientContract.create({
     *   data: {
     *     // ... data to create a ClientContract
     *   }
     * })
     * 
     */
    create<T extends ClientContractCreateArgs>(args: SelectSubset<T, ClientContractCreateArgs<ExtArgs>>): Prisma__ClientContractClient<$Result.GetResult<Prisma.$ClientContractPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClientContracts.
     * @param {ClientContractCreateManyArgs} args - Arguments to create many ClientContracts.
     * @example
     * // Create many ClientContracts
     * const clientContract = await prisma.clientContract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientContractCreateManyArgs>(args?: SelectSubset<T, ClientContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClientContract.
     * @param {ClientContractDeleteArgs} args - Arguments to delete one ClientContract.
     * @example
     * // Delete one ClientContract
     * const ClientContract = await prisma.clientContract.delete({
     *   where: {
     *     // ... filter to delete one ClientContract
     *   }
     * })
     * 
     */
    delete<T extends ClientContractDeleteArgs>(args: SelectSubset<T, ClientContractDeleteArgs<ExtArgs>>): Prisma__ClientContractClient<$Result.GetResult<Prisma.$ClientContractPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClientContract.
     * @param {ClientContractUpdateArgs} args - Arguments to update one ClientContract.
     * @example
     * // Update one ClientContract
     * const clientContract = await prisma.clientContract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientContractUpdateArgs>(args: SelectSubset<T, ClientContractUpdateArgs<ExtArgs>>): Prisma__ClientContractClient<$Result.GetResult<Prisma.$ClientContractPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClientContracts.
     * @param {ClientContractDeleteManyArgs} args - Arguments to filter ClientContracts to delete.
     * @example
     * // Delete a few ClientContracts
     * const { count } = await prisma.clientContract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientContractDeleteManyArgs>(args?: SelectSubset<T, ClientContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientContracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClientContracts
     * const clientContract = await prisma.clientContract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientContractUpdateManyArgs>(args: SelectSubset<T, ClientContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClientContract.
     * @param {ClientContractUpsertArgs} args - Arguments to update or create a ClientContract.
     * @example
     * // Update or create a ClientContract
     * const clientContract = await prisma.clientContract.upsert({
     *   create: {
     *     // ... data to create a ClientContract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClientContract we want to update
     *   }
     * })
     */
    upsert<T extends ClientContractUpsertArgs>(args: SelectSubset<T, ClientContractUpsertArgs<ExtArgs>>): Prisma__ClientContractClient<$Result.GetResult<Prisma.$ClientContractPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClientContracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContractCountArgs} args - Arguments to filter ClientContracts to count.
     * @example
     * // Count the number of ClientContracts
     * const count = await prisma.clientContract.count({
     *   where: {
     *     // ... the filter for the ClientContracts we want to count
     *   }
     * })
    **/
    count<T extends ClientContractCountArgs>(
      args?: Subset<T, ClientContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClientContract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientContractAggregateArgs>(args: Subset<T, ClientContractAggregateArgs>): Prisma.PrismaPromise<GetClientContractAggregateType<T>>

    /**
     * Group by ClientContract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientContractGroupByArgs['orderBy'] }
        : { orderBy?: ClientContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClientContract model
   */
  readonly fields: ClientContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClientContract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contract<T extends ContractDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractDefaultArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClientContract model
   */
  interface ClientContractFieldRefs {
    readonly clientId: FieldRef<"ClientContract", 'String'>
    readonly contractId: FieldRef<"ClientContract", 'String'>
    readonly assignedAt: FieldRef<"ClientContract", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClientContract findUnique
   */
  export type ClientContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContract
     */
    select?: ClientContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientContract
     */
    omit?: ClientContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContractInclude<ExtArgs> | null
    /**
     * Filter, which ClientContract to fetch.
     */
    where: ClientContractWhereUniqueInput
  }

  /**
   * ClientContract findUniqueOrThrow
   */
  export type ClientContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContract
     */
    select?: ClientContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientContract
     */
    omit?: ClientContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContractInclude<ExtArgs> | null
    /**
     * Filter, which ClientContract to fetch.
     */
    where: ClientContractWhereUniqueInput
  }

  /**
   * ClientContract findFirst
   */
  export type ClientContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContract
     */
    select?: ClientContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientContract
     */
    omit?: ClientContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContractInclude<ExtArgs> | null
    /**
     * Filter, which ClientContract to fetch.
     */
    where?: ClientContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientContracts to fetch.
     */
    orderBy?: ClientContractOrderByWithRelationInput | ClientContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientContracts.
     */
    cursor?: ClientContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientContracts.
     */
    distinct?: ClientContractScalarFieldEnum | ClientContractScalarFieldEnum[]
  }

  /**
   * ClientContract findFirstOrThrow
   */
  export type ClientContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContract
     */
    select?: ClientContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientContract
     */
    omit?: ClientContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContractInclude<ExtArgs> | null
    /**
     * Filter, which ClientContract to fetch.
     */
    where?: ClientContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientContracts to fetch.
     */
    orderBy?: ClientContractOrderByWithRelationInput | ClientContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientContracts.
     */
    cursor?: ClientContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientContracts.
     */
    distinct?: ClientContractScalarFieldEnum | ClientContractScalarFieldEnum[]
  }

  /**
   * ClientContract findMany
   */
  export type ClientContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContract
     */
    select?: ClientContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientContract
     */
    omit?: ClientContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContractInclude<ExtArgs> | null
    /**
     * Filter, which ClientContracts to fetch.
     */
    where?: ClientContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientContracts to fetch.
     */
    orderBy?: ClientContractOrderByWithRelationInput | ClientContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClientContracts.
     */
    cursor?: ClientContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientContracts.
     */
    skip?: number
    distinct?: ClientContractScalarFieldEnum | ClientContractScalarFieldEnum[]
  }

  /**
   * ClientContract create
   */
  export type ClientContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContract
     */
    select?: ClientContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientContract
     */
    omit?: ClientContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContractInclude<ExtArgs> | null
    /**
     * The data needed to create a ClientContract.
     */
    data: XOR<ClientContractCreateInput, ClientContractUncheckedCreateInput>
  }

  /**
   * ClientContract createMany
   */
  export type ClientContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClientContracts.
     */
    data: ClientContractCreateManyInput | ClientContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClientContract update
   */
  export type ClientContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContract
     */
    select?: ClientContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientContract
     */
    omit?: ClientContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContractInclude<ExtArgs> | null
    /**
     * The data needed to update a ClientContract.
     */
    data: XOR<ClientContractUpdateInput, ClientContractUncheckedUpdateInput>
    /**
     * Choose, which ClientContract to update.
     */
    where: ClientContractWhereUniqueInput
  }

  /**
   * ClientContract updateMany
   */
  export type ClientContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClientContracts.
     */
    data: XOR<ClientContractUpdateManyMutationInput, ClientContractUncheckedUpdateManyInput>
    /**
     * Filter which ClientContracts to update
     */
    where?: ClientContractWhereInput
    /**
     * Limit how many ClientContracts to update.
     */
    limit?: number
  }

  /**
   * ClientContract upsert
   */
  export type ClientContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContract
     */
    select?: ClientContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientContract
     */
    omit?: ClientContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContractInclude<ExtArgs> | null
    /**
     * The filter to search for the ClientContract to update in case it exists.
     */
    where: ClientContractWhereUniqueInput
    /**
     * In case the ClientContract found by the `where` argument doesn't exist, create a new ClientContract with this data.
     */
    create: XOR<ClientContractCreateInput, ClientContractUncheckedCreateInput>
    /**
     * In case the ClientContract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientContractUpdateInput, ClientContractUncheckedUpdateInput>
  }

  /**
   * ClientContract delete
   */
  export type ClientContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContract
     */
    select?: ClientContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientContract
     */
    omit?: ClientContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContractInclude<ExtArgs> | null
    /**
     * Filter which ClientContract to delete.
     */
    where: ClientContractWhereUniqueInput
  }

  /**
   * ClientContract deleteMany
   */
  export type ClientContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientContracts to delete
     */
    where?: ClientContractWhereInput
    /**
     * Limit how many ClientContracts to delete.
     */
    limit?: number
  }

  /**
   * ClientContract without action
   */
  export type ClientContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContract
     */
    select?: ClientContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientContract
     */
    omit?: ClientContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContractInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    type: $Enums.NotificationType | null
    clientId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    type: $Enums.NotificationType | null
    clientId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    title: number
    message: number
    isRead: number
    type: number
    clientId: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    title?: true
    message?: true
    isRead?: true
    type?: true
    clientId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    title?: true
    message?: true
    isRead?: true
    type?: true
    clientId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    title?: true
    message?: true
    isRead?: true
    type?: true
    clientId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    title: string
    message: string
    isRead: boolean
    type: $Enums.NotificationType
    clientId: string | null
    userId: string | null
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    type?: boolean
    clientId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | Notification$clientArgs<ExtArgs>
    user?: boolean | Notification$userArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>



  export type NotificationSelectScalar = {
    id?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    type?: boolean
    clientId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "message" | "isRead" | "type" | "clientId" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | Notification$clientArgs<ExtArgs>
    user?: boolean | Notification$userArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      message: string
      isRead: boolean
      type: $Enums.NotificationType
      clientId: string | null
      userId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends Notification$clientArgs<ExtArgs> = {}>(args?: Subset<T, Notification$clientArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends Notification$userArgs<ExtArgs> = {}>(args?: Subset<T, Notification$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly clientId: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification.client
   */
  export type Notification$clientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * Notification.user
   */
  export type Notification$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Package
   */

  export type AggregatePackage = {
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  export type PackageAvgAggregateOutputType = {
    id: number | null
    pixPrice: number | null
    cardPrice: number | null
  }

  export type PackageSumAggregateOutputType = {
    id: number | null
    pixPrice: number | null
    cardPrice: number | null
  }

  export type PackageMinAggregateOutputType = {
    id: number | null
    name: string | null
    pixPrice: number | null
    cardPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PackageMaxAggregateOutputType = {
    id: number | null
    name: string | null
    pixPrice: number | null
    cardPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PackageCountAggregateOutputType = {
    id: number
    name: number
    pixPrice: number
    cardPrice: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PackageAvgAggregateInputType = {
    id?: true
    pixPrice?: true
    cardPrice?: true
  }

  export type PackageSumAggregateInputType = {
    id?: true
    pixPrice?: true
    cardPrice?: true
  }

  export type PackageMinAggregateInputType = {
    id?: true
    name?: true
    pixPrice?: true
    cardPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PackageMaxAggregateInputType = {
    id?: true
    name?: true
    pixPrice?: true
    cardPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PackageCountAggregateInputType = {
    id?: true
    name?: true
    pixPrice?: true
    cardPrice?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Package to aggregate.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Packages
    **/
    _count?: true | PackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageMaxAggregateInputType
  }

  export type GetPackageAggregateType<T extends PackageAggregateArgs> = {
        [P in keyof T & keyof AggregatePackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackage[P]>
      : GetScalarType<T[P], AggregatePackage[P]>
  }




  export type PackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithAggregationInput | PackageOrderByWithAggregationInput[]
    by: PackageScalarFieldEnum[] | PackageScalarFieldEnum
    having?: PackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageCountAggregateInputType | true
    _avg?: PackageAvgAggregateInputType
    _sum?: PackageSumAggregateInputType
    _min?: PackageMinAggregateInputType
    _max?: PackageMaxAggregateInputType
  }

  export type PackageGroupByOutputType = {
    id: number
    name: string
    pixPrice: number
    cardPrice: number
    createdAt: Date
    updatedAt: Date
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  type GetPackageGroupByPayload<T extends PackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageGroupByOutputType[P]>
            : GetScalarType<T[P], PackageGroupByOutputType[P]>
        }
      >
    >


  export type PackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    pixPrice?: boolean
    cardPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    contracts?: boolean | Package$contractsArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>



  export type PackageSelectScalar = {
    id?: boolean
    name?: boolean
    pixPrice?: boolean
    cardPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PackageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "pixPrice" | "cardPrice" | "createdAt" | "updatedAt", ExtArgs["result"]["package"]>
  export type PackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | Package$contractsArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Package"
    objects: {
      contracts: Prisma.$ContractPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      pixPrice: number
      cardPrice: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["package"]>
    composites: {}
  }

  type PackageGetPayload<S extends boolean | null | undefined | PackageDefaultArgs> = $Result.GetResult<Prisma.$PackagePayload, S>

  type PackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PackageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PackageCountAggregateInputType | true
    }

  export interface PackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Package'], meta: { name: 'Package' } }
    /**
     * Find zero or one Package that matches the filter.
     * @param {PackageFindUniqueArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageFindUniqueArgs>(args: SelectSubset<T, PackageFindUniqueArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Package that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PackageFindUniqueOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Package that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageFindFirstArgs>(args?: SelectSubset<T, PackageFindFirstArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Package that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Packages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Packages
     * const packages = await prisma.package.findMany()
     * 
     * // Get first 10 Packages
     * const packages = await prisma.package.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packageWithIdOnly = await prisma.package.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackageFindManyArgs>(args?: SelectSubset<T, PackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Package.
     * @param {PackageCreateArgs} args - Arguments to create a Package.
     * @example
     * // Create one Package
     * const Package = await prisma.package.create({
     *   data: {
     *     // ... data to create a Package
     *   }
     * })
     * 
     */
    create<T extends PackageCreateArgs>(args: SelectSubset<T, PackageCreateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Packages.
     * @param {PackageCreateManyArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageCreateManyArgs>(args?: SelectSubset<T, PackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Package.
     * @param {PackageDeleteArgs} args - Arguments to delete one Package.
     * @example
     * // Delete one Package
     * const Package = await prisma.package.delete({
     *   where: {
     *     // ... filter to delete one Package
     *   }
     * })
     * 
     */
    delete<T extends PackageDeleteArgs>(args: SelectSubset<T, PackageDeleteArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Package.
     * @param {PackageUpdateArgs} args - Arguments to update one Package.
     * @example
     * // Update one Package
     * const package = await prisma.package.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageUpdateArgs>(args: SelectSubset<T, PackageUpdateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Packages.
     * @param {PackageDeleteManyArgs} args - Arguments to filter Packages to delete.
     * @example
     * // Delete a few Packages
     * const { count } = await prisma.package.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageDeleteManyArgs>(args?: SelectSubset<T, PackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Packages
     * const package = await prisma.package.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageUpdateManyArgs>(args: SelectSubset<T, PackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Package.
     * @param {PackageUpsertArgs} args - Arguments to update or create a Package.
     * @example
     * // Update or create a Package
     * const package = await prisma.package.upsert({
     *   create: {
     *     // ... data to create a Package
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Package we want to update
     *   }
     * })
     */
    upsert<T extends PackageUpsertArgs>(args: SelectSubset<T, PackageUpsertArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageCountArgs} args - Arguments to filter Packages to count.
     * @example
     * // Count the number of Packages
     * const count = await prisma.package.count({
     *   where: {
     *     // ... the filter for the Packages we want to count
     *   }
     * })
    **/
    count<T extends PackageCountArgs>(
      args?: Subset<T, PackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageAggregateArgs>(args: Subset<T, PackageAggregateArgs>): Prisma.PrismaPromise<GetPackageAggregateType<T>>

    /**
     * Group by Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageGroupByArgs['orderBy'] }
        : { orderBy?: PackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Package model
   */
  readonly fields: PackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Package.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contracts<T extends Package$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Package$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Package model
   */
  interface PackageFieldRefs {
    readonly id: FieldRef<"Package", 'Int'>
    readonly name: FieldRef<"Package", 'String'>
    readonly pixPrice: FieldRef<"Package", 'Float'>
    readonly cardPrice: FieldRef<"Package", 'Float'>
    readonly createdAt: FieldRef<"Package", 'DateTime'>
    readonly updatedAt: FieldRef<"Package", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Package findUnique
   */
  export type PackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findUniqueOrThrow
   */
  export type PackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findFirst
   */
  export type PackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findFirstOrThrow
   */
  export type PackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findMany
   */
  export type PackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Packages to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package create
   */
  export type PackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to create a Package.
     */
    data: XOR<PackageCreateInput, PackageUncheckedCreateInput>
  }

  /**
   * Package createMany
   */
  export type PackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Package update
   */
  export type PackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to update a Package.
     */
    data: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
    /**
     * Choose, which Package to update.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package updateMany
   */
  export type PackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Packages.
     */
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyInput>
    /**
     * Filter which Packages to update
     */
    where?: PackageWhereInput
    /**
     * Limit how many Packages to update.
     */
    limit?: number
  }

  /**
   * Package upsert
   */
  export type PackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The filter to search for the Package to update in case it exists.
     */
    where: PackageWhereUniqueInput
    /**
     * In case the Package found by the `where` argument doesn't exist, create a new Package with this data.
     */
    create: XOR<PackageCreateInput, PackageUncheckedCreateInput>
    /**
     * In case the Package was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
  }

  /**
   * Package delete
   */
  export type PackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter which Package to delete.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package deleteMany
   */
  export type PackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Packages to delete
     */
    where?: PackageWhereInput
    /**
     * Limit how many Packages to delete.
     */
    limit?: number
  }

  /**
   * Package.contracts
   */
  export type Package$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Package without action
   */
  export type PackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    pictureUrl: 'pictureUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    title: 'title',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    userId: 'userId',
    roleId: 'roleId'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    address: 'address',
    neighborhood: 'neighborhood',
    city: 'city',
    cpf: 'cpf',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const ChildScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChildScalarFieldEnum = (typeof ChildScalarFieldEnum)[keyof typeof ChildScalarFieldEnum]


  export const FamilyScalarFieldEnum: {
    clientId: 'clientId',
    childId: 'childId'
  };

  export type FamilyScalarFieldEnum = (typeof FamilyScalarFieldEnum)[keyof typeof FamilyScalarFieldEnum]


  export const YogaClassScalarFieldEnum: {
    id: 'id',
    type: 'type',
    status: 'status',
    locationId: 'locationId',
    date: 'date',
    instructorId: 'instructorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YogaClassScalarFieldEnum = (typeof YogaClassScalarFieldEnum)[keyof typeof YogaClassScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    neighborhood: 'neighborhood',
    city: 'city',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const YogaChildStudentScalarFieldEnum: {
    yogaClassId: 'yogaClassId',
    studentId: 'studentId'
  };

  export type YogaChildStudentScalarFieldEnum = (typeof YogaChildStudentScalarFieldEnum)[keyof typeof YogaChildStudentScalarFieldEnum]


  export const YogaAdultStudentScalarFieldEnum: {
    yogaClassId: 'yogaClassId',
    studentId: 'studentId'
  };

  export type YogaAdultStudentScalarFieldEnum = (typeof YogaAdultStudentScalarFieldEnum)[keyof typeof YogaAdultStudentScalarFieldEnum]


  export const RollCallScalarFieldEnum: {
    id: 'id',
    classId: 'classId',
    date: 'date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RollCallScalarFieldEnum = (typeof RollCallScalarFieldEnum)[keyof typeof RollCallScalarFieldEnum]


  export const PresenceScalarFieldEnum: {
    id: 'id',
    studentType: 'studentType',
    rollCallId: 'rollCallId',
    adultStudentId: 'adultStudentId',
    childStudentId: 'childStudentId',
    isPresent: 'isPresent',
    absenceReason: 'absenceReason',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PresenceScalarFieldEnum = (typeof PresenceScalarFieldEnum)[keyof typeof PresenceScalarFieldEnum]


  export const ContractScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    address: 'address',
    neighborhood: 'neighborhood',
    city: 'city',
    date: 'date',
    eventStartTime: 'eventStartTime',
    commutingFee: 'commutingFee',
    discountPercentage: 'discountPercentage',
    paymentDueDate: 'paymentDueDate',
    observations: 'observations',
    fileUrl: 'fileUrl',
    videomakerId: 'videomakerId',
    packageId: 'packageId',
    isSigned: 'isSigned',
    isPaid: 'isPaid',
    generalStatus: 'generalStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContractScalarFieldEnum = (typeof ContractScalarFieldEnum)[keyof typeof ContractScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    date: 'date',
    description: 'description',
    method: 'method',
    isPaid: 'isPaid',
    contractId: 'contractId',
    yogaClassId: 'yogaClassId',
    clientId: 'clientId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const ContractPhotographerScalarFieldEnum: {
    photographerId: 'photographerId',
    contractId: 'contractId'
  };

  export type ContractPhotographerScalarFieldEnum = (typeof ContractPhotographerScalarFieldEnum)[keyof typeof ContractPhotographerScalarFieldEnum]


  export const ClientContractScalarFieldEnum: {
    clientId: 'clientId',
    contractId: 'contractId',
    assignedAt: 'assignedAt'
  };

  export type ClientContractScalarFieldEnum = (typeof ClientContractScalarFieldEnum)[keyof typeof ClientContractScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    message: 'message',
    isRead: 'isRead',
    type: 'type',
    clientId: 'clientId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const PackageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    pixPrice: 'pixPrice',
    cardPrice: 'cardPrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PackageScalarFieldEnum = (typeof PackageScalarFieldEnum)[keyof typeof PackageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    pictureUrl: 'pictureUrl'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const RoleOrderByRelevanceFieldEnum: {
    id: 'id',
    title: 'title'
  };

  export type RoleOrderByRelevanceFieldEnum = (typeof RoleOrderByRelevanceFieldEnum)[keyof typeof RoleOrderByRelevanceFieldEnum]


  export const UserRoleOrderByRelevanceFieldEnum: {
    userId: 'userId',
    roleId: 'roleId'
  };

  export type UserRoleOrderByRelevanceFieldEnum = (typeof UserRoleOrderByRelevanceFieldEnum)[keyof typeof UserRoleOrderByRelevanceFieldEnum]


  export const ClientOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    address: 'address',
    neighborhood: 'neighborhood',
    city: 'city',
    cpf: 'cpf'
  };

  export type ClientOrderByRelevanceFieldEnum = (typeof ClientOrderByRelevanceFieldEnum)[keyof typeof ClientOrderByRelevanceFieldEnum]


  export const ChildOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ChildOrderByRelevanceFieldEnum = (typeof ChildOrderByRelevanceFieldEnum)[keyof typeof ChildOrderByRelevanceFieldEnum]


  export const FamilyOrderByRelevanceFieldEnum: {
    clientId: 'clientId',
    childId: 'childId'
  };

  export type FamilyOrderByRelevanceFieldEnum = (typeof FamilyOrderByRelevanceFieldEnum)[keyof typeof FamilyOrderByRelevanceFieldEnum]


  export const YogaClassOrderByRelevanceFieldEnum: {
    instructorId: 'instructorId'
  };

  export type YogaClassOrderByRelevanceFieldEnum = (typeof YogaClassOrderByRelevanceFieldEnum)[keyof typeof YogaClassOrderByRelevanceFieldEnum]


  export const LocationOrderByRelevanceFieldEnum: {
    name: 'name',
    address: 'address',
    neighborhood: 'neighborhood',
    city: 'city'
  };

  export type LocationOrderByRelevanceFieldEnum = (typeof LocationOrderByRelevanceFieldEnum)[keyof typeof LocationOrderByRelevanceFieldEnum]


  export const YogaChildStudentOrderByRelevanceFieldEnum: {
    studentId: 'studentId'
  };

  export type YogaChildStudentOrderByRelevanceFieldEnum = (typeof YogaChildStudentOrderByRelevanceFieldEnum)[keyof typeof YogaChildStudentOrderByRelevanceFieldEnum]


  export const YogaAdultStudentOrderByRelevanceFieldEnum: {
    studentId: 'studentId'
  };

  export type YogaAdultStudentOrderByRelevanceFieldEnum = (typeof YogaAdultStudentOrderByRelevanceFieldEnum)[keyof typeof YogaAdultStudentOrderByRelevanceFieldEnum]


  export const PresenceOrderByRelevanceFieldEnum: {
    adultStudentId: 'adultStudentId',
    childStudentId: 'childStudentId',
    absenceReason: 'absenceReason'
  };

  export type PresenceOrderByRelevanceFieldEnum = (typeof PresenceOrderByRelevanceFieldEnum)[keyof typeof PresenceOrderByRelevanceFieldEnum]


  export const ContractOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    neighborhood: 'neighborhood',
    city: 'city',
    observations: 'observations',
    fileUrl: 'fileUrl',
    videomakerId: 'videomakerId'
  };

  export type ContractOrderByRelevanceFieldEnum = (typeof ContractOrderByRelevanceFieldEnum)[keyof typeof ContractOrderByRelevanceFieldEnum]


  export const TransactionOrderByRelevanceFieldEnum: {
    id: 'id',
    description: 'description',
    contractId: 'contractId',
    clientId: 'clientId'
  };

  export type TransactionOrderByRelevanceFieldEnum = (typeof TransactionOrderByRelevanceFieldEnum)[keyof typeof TransactionOrderByRelevanceFieldEnum]


  export const ContractPhotographerOrderByRelevanceFieldEnum: {
    photographerId: 'photographerId',
    contractId: 'contractId'
  };

  export type ContractPhotographerOrderByRelevanceFieldEnum = (typeof ContractPhotographerOrderByRelevanceFieldEnum)[keyof typeof ContractPhotographerOrderByRelevanceFieldEnum]


  export const ClientContractOrderByRelevanceFieldEnum: {
    clientId: 'clientId',
    contractId: 'contractId'
  };

  export type ClientContractOrderByRelevanceFieldEnum = (typeof ClientContractOrderByRelevanceFieldEnum)[keyof typeof ClientContractOrderByRelevanceFieldEnum]


  export const NotificationOrderByRelevanceFieldEnum: {
    id: 'id',
    title: 'title',
    message: 'message',
    clientId: 'clientId',
    userId: 'userId'
  };

  export type NotificationOrderByRelevanceFieldEnum = (typeof NotificationOrderByRelevanceFieldEnum)[keyof typeof NotificationOrderByRelevanceFieldEnum]


  export const PackageOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type PackageOrderByRelevanceFieldEnum = (typeof PackageOrderByRelevanceFieldEnum)[keyof typeof PackageOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'YogaClassType'
   */
  export type EnumYogaClassTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YogaClassType'>
    


  /**
   * Reference to a field of type 'YogaClassStatus'
   */
  export type EnumYogaClassStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YogaClassStatus'>
    


  /**
   * Reference to a field of type 'StudentType'
   */
  export type EnumStudentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StudentType'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ContractType'
   */
  export type EnumContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'SignatureStatus'
   */
  export type EnumSignatureStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SignatureStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'GeneralStatus'
   */
  export type EnumGeneralStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GeneralStatus'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    pictureUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    notifications?: NotificationListRelationFilter
    roles?: UserRoleListRelationFilter
    classes?: YogaClassListRelationFilter
    videoContracts?: ContractListRelationFilter
    photoContracts?: ContractPhotographerListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pictureUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    notifications?: NotificationOrderByRelationAggregateInput
    roles?: UserRoleOrderByRelationAggregateInput
    classes?: YogaClassOrderByRelationAggregateInput
    videoContracts?: ContractOrderByRelationAggregateInput
    photoContracts?: ContractPhotographerOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    pictureUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    notifications?: NotificationListRelationFilter
    roles?: UserRoleListRelationFilter
    classes?: YogaClassListRelationFilter
    videoContracts?: ContractListRelationFilter
    photoContracts?: ContractPhotographerListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pictureUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    pictureUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    title?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    users?: UserRoleListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserRoleOrderByRelationAggregateInput
    _relevance?: RoleOrderByRelevanceInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    title?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    users?: UserRoleListRelationFilter
  }, "id">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    title?: StringWithAggregatesFilter<"Role"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }

  export type UserRoleOrderByWithRelationInput = {
    userId?: SortOrder
    roleId?: SortOrder
    user?: UserOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
    _relevance?: UserRoleOrderByRelevanceInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    userId_roleId?: UserRoleUserIdRoleIdCompoundUniqueInput
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }, "userId_roleId">

  export type UserRoleOrderByWithAggregationInput = {
    userId?: SortOrder
    roleId?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserRole"> | string
    roleId?: StringWithAggregatesFilter<"UserRole"> | string
  }

  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: StringFilter<"Client"> | string
    name?: StringFilter<"Client"> | string
    email?: StringFilter<"Client"> | string
    address?: StringFilter<"Client"> | string
    neighborhood?: StringFilter<"Client"> | string
    city?: StringFilter<"Client"> | string
    cpf?: StringFilter<"Client"> | string
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    children?: FamilyListRelationFilter
    contracts?: ClientContractListRelationFilter
    yogaClasses?: YogaAdultStudentListRelationFilter
    presences?: PresenceListRelationFilter
    transactions?: TransactionListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    children?: FamilyOrderByRelationAggregateInput
    contracts?: ClientContractOrderByRelationAggregateInput
    yogaClasses?: YogaAdultStudentOrderByRelationAggregateInput
    presences?: PresenceOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    _relevance?: ClientOrderByRelevanceInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    cpf?: string
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    name?: StringFilter<"Client"> | string
    address?: StringFilter<"Client"> | string
    neighborhood?: StringFilter<"Client"> | string
    city?: StringFilter<"Client"> | string
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    children?: FamilyListRelationFilter
    contracts?: ClientContractListRelationFilter
    yogaClasses?: YogaAdultStudentListRelationFilter
    presences?: PresenceListRelationFilter
    transactions?: TransactionListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id" | "email" | "cpf">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Client"> | string
    name?: StringWithAggregatesFilter<"Client"> | string
    email?: StringWithAggregatesFilter<"Client"> | string
    address?: StringWithAggregatesFilter<"Client"> | string
    neighborhood?: StringWithAggregatesFilter<"Client"> | string
    city?: StringWithAggregatesFilter<"Client"> | string
    cpf?: StringWithAggregatesFilter<"Client"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
  }

  export type ChildWhereInput = {
    AND?: ChildWhereInput | ChildWhereInput[]
    OR?: ChildWhereInput[]
    NOT?: ChildWhereInput | ChildWhereInput[]
    id?: StringFilter<"Child"> | string
    name?: StringFilter<"Child"> | string
    createdAt?: DateTimeFilter<"Child"> | Date | string
    updatedAt?: DateTimeFilter<"Child"> | Date | string
    parents?: FamilyListRelationFilter
    yogaClasses?: YogaChildStudentListRelationFilter
    presences?: PresenceListRelationFilter
  }

  export type ChildOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parents?: FamilyOrderByRelationAggregateInput
    yogaClasses?: YogaChildStudentOrderByRelationAggregateInput
    presences?: PresenceOrderByRelationAggregateInput
    _relevance?: ChildOrderByRelevanceInput
  }

  export type ChildWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChildWhereInput | ChildWhereInput[]
    OR?: ChildWhereInput[]
    NOT?: ChildWhereInput | ChildWhereInput[]
    name?: StringFilter<"Child"> | string
    createdAt?: DateTimeFilter<"Child"> | Date | string
    updatedAt?: DateTimeFilter<"Child"> | Date | string
    parents?: FamilyListRelationFilter
    yogaClasses?: YogaChildStudentListRelationFilter
    presences?: PresenceListRelationFilter
  }, "id">

  export type ChildOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChildCountOrderByAggregateInput
    _max?: ChildMaxOrderByAggregateInput
    _min?: ChildMinOrderByAggregateInput
  }

  export type ChildScalarWhereWithAggregatesInput = {
    AND?: ChildScalarWhereWithAggregatesInput | ChildScalarWhereWithAggregatesInput[]
    OR?: ChildScalarWhereWithAggregatesInput[]
    NOT?: ChildScalarWhereWithAggregatesInput | ChildScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Child"> | string
    name?: StringWithAggregatesFilter<"Child"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Child"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Child"> | Date | string
  }

  export type FamilyWhereInput = {
    AND?: FamilyWhereInput | FamilyWhereInput[]
    OR?: FamilyWhereInput[]
    NOT?: FamilyWhereInput | FamilyWhereInput[]
    clientId?: StringFilter<"Family"> | string
    childId?: StringFilter<"Family"> | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
  }

  export type FamilyOrderByWithRelationInput = {
    clientId?: SortOrder
    childId?: SortOrder
    client?: ClientOrderByWithRelationInput
    child?: ChildOrderByWithRelationInput
    _relevance?: FamilyOrderByRelevanceInput
  }

  export type FamilyWhereUniqueInput = Prisma.AtLeast<{
    clientId_childId?: FamilyClientIdChildIdCompoundUniqueInput
    AND?: FamilyWhereInput | FamilyWhereInput[]
    OR?: FamilyWhereInput[]
    NOT?: FamilyWhereInput | FamilyWhereInput[]
    clientId?: StringFilter<"Family"> | string
    childId?: StringFilter<"Family"> | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
  }, "clientId_childId">

  export type FamilyOrderByWithAggregationInput = {
    clientId?: SortOrder
    childId?: SortOrder
    _count?: FamilyCountOrderByAggregateInput
    _max?: FamilyMaxOrderByAggregateInput
    _min?: FamilyMinOrderByAggregateInput
  }

  export type FamilyScalarWhereWithAggregatesInput = {
    AND?: FamilyScalarWhereWithAggregatesInput | FamilyScalarWhereWithAggregatesInput[]
    OR?: FamilyScalarWhereWithAggregatesInput[]
    NOT?: FamilyScalarWhereWithAggregatesInput | FamilyScalarWhereWithAggregatesInput[]
    clientId?: StringWithAggregatesFilter<"Family"> | string
    childId?: StringWithAggregatesFilter<"Family"> | string
  }

  export type YogaClassWhereInput = {
    AND?: YogaClassWhereInput | YogaClassWhereInput[]
    OR?: YogaClassWhereInput[]
    NOT?: YogaClassWhereInput | YogaClassWhereInput[]
    id?: IntFilter<"YogaClass"> | number
    type?: EnumYogaClassTypeFilter<"YogaClass"> | $Enums.YogaClassType
    status?: EnumYogaClassStatusFilter<"YogaClass"> | $Enums.YogaClassStatus
    locationId?: IntFilter<"YogaClass"> | number
    date?: DateTimeFilter<"YogaClass"> | Date | string
    instructorId?: StringFilter<"YogaClass"> | string
    createdAt?: DateTimeFilter<"YogaClass"> | Date | string
    updatedAt?: DateTimeFilter<"YogaClass"> | Date | string
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    transactions?: TransactionListRelationFilter
    instructor?: XOR<UserScalarRelationFilter, UserWhereInput>
    adultStudents?: YogaAdultStudentListRelationFilter
    childStudents?: YogaChildStudentListRelationFilter
    rollCall?: XOR<RollCallNullableScalarRelationFilter, RollCallWhereInput> | null
  }

  export type YogaClassOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    instructorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    location?: LocationOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
    instructor?: UserOrderByWithRelationInput
    adultStudents?: YogaAdultStudentOrderByRelationAggregateInput
    childStudents?: YogaChildStudentOrderByRelationAggregateInput
    rollCall?: RollCallOrderByWithRelationInput
    _relevance?: YogaClassOrderByRelevanceInput
  }

  export type YogaClassWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: YogaClassWhereInput | YogaClassWhereInput[]
    OR?: YogaClassWhereInput[]
    NOT?: YogaClassWhereInput | YogaClassWhereInput[]
    type?: EnumYogaClassTypeFilter<"YogaClass"> | $Enums.YogaClassType
    status?: EnumYogaClassStatusFilter<"YogaClass"> | $Enums.YogaClassStatus
    locationId?: IntFilter<"YogaClass"> | number
    date?: DateTimeFilter<"YogaClass"> | Date | string
    instructorId?: StringFilter<"YogaClass"> | string
    createdAt?: DateTimeFilter<"YogaClass"> | Date | string
    updatedAt?: DateTimeFilter<"YogaClass"> | Date | string
    location?: XOR<LocationScalarRelationFilter, LocationWhereInput>
    transactions?: TransactionListRelationFilter
    instructor?: XOR<UserScalarRelationFilter, UserWhereInput>
    adultStudents?: YogaAdultStudentListRelationFilter
    childStudents?: YogaChildStudentListRelationFilter
    rollCall?: XOR<RollCallNullableScalarRelationFilter, RollCallWhereInput> | null
  }, "id">

  export type YogaClassOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    instructorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YogaClassCountOrderByAggregateInput
    _avg?: YogaClassAvgOrderByAggregateInput
    _max?: YogaClassMaxOrderByAggregateInput
    _min?: YogaClassMinOrderByAggregateInput
    _sum?: YogaClassSumOrderByAggregateInput
  }

  export type YogaClassScalarWhereWithAggregatesInput = {
    AND?: YogaClassScalarWhereWithAggregatesInput | YogaClassScalarWhereWithAggregatesInput[]
    OR?: YogaClassScalarWhereWithAggregatesInput[]
    NOT?: YogaClassScalarWhereWithAggregatesInput | YogaClassScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"YogaClass"> | number
    type?: EnumYogaClassTypeWithAggregatesFilter<"YogaClass"> | $Enums.YogaClassType
    status?: EnumYogaClassStatusWithAggregatesFilter<"YogaClass"> | $Enums.YogaClassStatus
    locationId?: IntWithAggregatesFilter<"YogaClass"> | number
    date?: DateTimeWithAggregatesFilter<"YogaClass"> | Date | string
    instructorId?: StringWithAggregatesFilter<"YogaClass"> | string
    createdAt?: DateTimeWithAggregatesFilter<"YogaClass"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"YogaClass"> | Date | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: IntFilter<"Location"> | number
    name?: StringFilter<"Location"> | string
    address?: StringFilter<"Location"> | string
    neighborhood?: StringFilter<"Location"> | string
    city?: StringFilter<"Location"> | string
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    classes?: YogaClassListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    classes?: YogaClassOrderByRelationAggregateInput
    _relevance?: LocationOrderByRelevanceInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    name?: StringFilter<"Location"> | string
    address?: StringFilter<"Location"> | string
    neighborhood?: StringFilter<"Location"> | string
    city?: StringFilter<"Location"> | string
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    classes?: YogaClassListRelationFilter
  }, "id">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Location"> | number
    name?: StringWithAggregatesFilter<"Location"> | string
    address?: StringWithAggregatesFilter<"Location"> | string
    neighborhood?: StringWithAggregatesFilter<"Location"> | string
    city?: StringWithAggregatesFilter<"Location"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type YogaChildStudentWhereInput = {
    AND?: YogaChildStudentWhereInput | YogaChildStudentWhereInput[]
    OR?: YogaChildStudentWhereInput[]
    NOT?: YogaChildStudentWhereInput | YogaChildStudentWhereInput[]
    yogaClassId?: IntFilter<"YogaChildStudent"> | number
    studentId?: StringFilter<"YogaChildStudent"> | string
    yogaClass?: XOR<YogaClassScalarRelationFilter, YogaClassWhereInput>
    student?: XOR<ChildScalarRelationFilter, ChildWhereInput>
  }

  export type YogaChildStudentOrderByWithRelationInput = {
    yogaClassId?: SortOrder
    studentId?: SortOrder
    yogaClass?: YogaClassOrderByWithRelationInput
    student?: ChildOrderByWithRelationInput
    _relevance?: YogaChildStudentOrderByRelevanceInput
  }

  export type YogaChildStudentWhereUniqueInput = Prisma.AtLeast<{
    yogaClassId_studentId?: YogaChildStudentYogaClassIdStudentIdCompoundUniqueInput
    AND?: YogaChildStudentWhereInput | YogaChildStudentWhereInput[]
    OR?: YogaChildStudentWhereInput[]
    NOT?: YogaChildStudentWhereInput | YogaChildStudentWhereInput[]
    yogaClassId?: IntFilter<"YogaChildStudent"> | number
    studentId?: StringFilter<"YogaChildStudent"> | string
    yogaClass?: XOR<YogaClassScalarRelationFilter, YogaClassWhereInput>
    student?: XOR<ChildScalarRelationFilter, ChildWhereInput>
  }, "yogaClassId_studentId">

  export type YogaChildStudentOrderByWithAggregationInput = {
    yogaClassId?: SortOrder
    studentId?: SortOrder
    _count?: YogaChildStudentCountOrderByAggregateInput
    _avg?: YogaChildStudentAvgOrderByAggregateInput
    _max?: YogaChildStudentMaxOrderByAggregateInput
    _min?: YogaChildStudentMinOrderByAggregateInput
    _sum?: YogaChildStudentSumOrderByAggregateInput
  }

  export type YogaChildStudentScalarWhereWithAggregatesInput = {
    AND?: YogaChildStudentScalarWhereWithAggregatesInput | YogaChildStudentScalarWhereWithAggregatesInput[]
    OR?: YogaChildStudentScalarWhereWithAggregatesInput[]
    NOT?: YogaChildStudentScalarWhereWithAggregatesInput | YogaChildStudentScalarWhereWithAggregatesInput[]
    yogaClassId?: IntWithAggregatesFilter<"YogaChildStudent"> | number
    studentId?: StringWithAggregatesFilter<"YogaChildStudent"> | string
  }

  export type YogaAdultStudentWhereInput = {
    AND?: YogaAdultStudentWhereInput | YogaAdultStudentWhereInput[]
    OR?: YogaAdultStudentWhereInput[]
    NOT?: YogaAdultStudentWhereInput | YogaAdultStudentWhereInput[]
    yogaClassId?: IntFilter<"YogaAdultStudent"> | number
    studentId?: StringFilter<"YogaAdultStudent"> | string
    yogaClass?: XOR<YogaClassScalarRelationFilter, YogaClassWhereInput>
    student?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }

  export type YogaAdultStudentOrderByWithRelationInput = {
    yogaClassId?: SortOrder
    studentId?: SortOrder
    yogaClass?: YogaClassOrderByWithRelationInput
    student?: ClientOrderByWithRelationInput
    _relevance?: YogaAdultStudentOrderByRelevanceInput
  }

  export type YogaAdultStudentWhereUniqueInput = Prisma.AtLeast<{
    yogaClassId_studentId?: YogaAdultStudentYogaClassIdStudentIdCompoundUniqueInput
    AND?: YogaAdultStudentWhereInput | YogaAdultStudentWhereInput[]
    OR?: YogaAdultStudentWhereInput[]
    NOT?: YogaAdultStudentWhereInput | YogaAdultStudentWhereInput[]
    yogaClassId?: IntFilter<"YogaAdultStudent"> | number
    studentId?: StringFilter<"YogaAdultStudent"> | string
    yogaClass?: XOR<YogaClassScalarRelationFilter, YogaClassWhereInput>
    student?: XOR<ClientScalarRelationFilter, ClientWhereInput>
  }, "yogaClassId_studentId">

  export type YogaAdultStudentOrderByWithAggregationInput = {
    yogaClassId?: SortOrder
    studentId?: SortOrder
    _count?: YogaAdultStudentCountOrderByAggregateInput
    _avg?: YogaAdultStudentAvgOrderByAggregateInput
    _max?: YogaAdultStudentMaxOrderByAggregateInput
    _min?: YogaAdultStudentMinOrderByAggregateInput
    _sum?: YogaAdultStudentSumOrderByAggregateInput
  }

  export type YogaAdultStudentScalarWhereWithAggregatesInput = {
    AND?: YogaAdultStudentScalarWhereWithAggregatesInput | YogaAdultStudentScalarWhereWithAggregatesInput[]
    OR?: YogaAdultStudentScalarWhereWithAggregatesInput[]
    NOT?: YogaAdultStudentScalarWhereWithAggregatesInput | YogaAdultStudentScalarWhereWithAggregatesInput[]
    yogaClassId?: IntWithAggregatesFilter<"YogaAdultStudent"> | number
    studentId?: StringWithAggregatesFilter<"YogaAdultStudent"> | string
  }

  export type RollCallWhereInput = {
    AND?: RollCallWhereInput | RollCallWhereInput[]
    OR?: RollCallWhereInput[]
    NOT?: RollCallWhereInput | RollCallWhereInput[]
    id?: IntFilter<"RollCall"> | number
    classId?: IntFilter<"RollCall"> | number
    date?: DateTimeFilter<"RollCall"> | Date | string
    createdAt?: DateTimeFilter<"RollCall"> | Date | string
    updatedAt?: DateTimeFilter<"RollCall"> | Date | string
    class?: XOR<YogaClassScalarRelationFilter, YogaClassWhereInput>
    presences?: PresenceListRelationFilter
  }

  export type RollCallOrderByWithRelationInput = {
    id?: SortOrder
    classId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    class?: YogaClassOrderByWithRelationInput
    presences?: PresenceOrderByRelationAggregateInput
  }

  export type RollCallWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    classId?: number
    AND?: RollCallWhereInput | RollCallWhereInput[]
    OR?: RollCallWhereInput[]
    NOT?: RollCallWhereInput | RollCallWhereInput[]
    date?: DateTimeFilter<"RollCall"> | Date | string
    createdAt?: DateTimeFilter<"RollCall"> | Date | string
    updatedAt?: DateTimeFilter<"RollCall"> | Date | string
    class?: XOR<YogaClassScalarRelationFilter, YogaClassWhereInput>
    presences?: PresenceListRelationFilter
  }, "id" | "classId">

  export type RollCallOrderByWithAggregationInput = {
    id?: SortOrder
    classId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RollCallCountOrderByAggregateInput
    _avg?: RollCallAvgOrderByAggregateInput
    _max?: RollCallMaxOrderByAggregateInput
    _min?: RollCallMinOrderByAggregateInput
    _sum?: RollCallSumOrderByAggregateInput
  }

  export type RollCallScalarWhereWithAggregatesInput = {
    AND?: RollCallScalarWhereWithAggregatesInput | RollCallScalarWhereWithAggregatesInput[]
    OR?: RollCallScalarWhereWithAggregatesInput[]
    NOT?: RollCallScalarWhereWithAggregatesInput | RollCallScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RollCall"> | number
    classId?: IntWithAggregatesFilter<"RollCall"> | number
    date?: DateTimeWithAggregatesFilter<"RollCall"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RollCall"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RollCall"> | Date | string
  }

  export type PresenceWhereInput = {
    AND?: PresenceWhereInput | PresenceWhereInput[]
    OR?: PresenceWhereInput[]
    NOT?: PresenceWhereInput | PresenceWhereInput[]
    id?: IntFilter<"Presence"> | number
    studentType?: EnumStudentTypeFilter<"Presence"> | $Enums.StudentType
    rollCallId?: IntFilter<"Presence"> | number
    adultStudentId?: StringNullableFilter<"Presence"> | string | null
    childStudentId?: StringNullableFilter<"Presence"> | string | null
    isPresent?: BoolFilter<"Presence"> | boolean
    absenceReason?: StringNullableFilter<"Presence"> | string | null
    createdAt?: DateTimeFilter<"Presence"> | Date | string
    updatedAt?: DateTimeFilter<"Presence"> | Date | string
    rollCall?: XOR<RollCallScalarRelationFilter, RollCallWhereInput>
    adultStudent?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
    childStudent?: XOR<ChildNullableScalarRelationFilter, ChildWhereInput> | null
  }

  export type PresenceOrderByWithRelationInput = {
    id?: SortOrder
    studentType?: SortOrder
    rollCallId?: SortOrder
    adultStudentId?: SortOrderInput | SortOrder
    childStudentId?: SortOrderInput | SortOrder
    isPresent?: SortOrder
    absenceReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rollCall?: RollCallOrderByWithRelationInput
    adultStudent?: ClientOrderByWithRelationInput
    childStudent?: ChildOrderByWithRelationInput
    _relevance?: PresenceOrderByRelevanceInput
  }

  export type PresenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PresenceWhereInput | PresenceWhereInput[]
    OR?: PresenceWhereInput[]
    NOT?: PresenceWhereInput | PresenceWhereInput[]
    studentType?: EnumStudentTypeFilter<"Presence"> | $Enums.StudentType
    rollCallId?: IntFilter<"Presence"> | number
    adultStudentId?: StringNullableFilter<"Presence"> | string | null
    childStudentId?: StringNullableFilter<"Presence"> | string | null
    isPresent?: BoolFilter<"Presence"> | boolean
    absenceReason?: StringNullableFilter<"Presence"> | string | null
    createdAt?: DateTimeFilter<"Presence"> | Date | string
    updatedAt?: DateTimeFilter<"Presence"> | Date | string
    rollCall?: XOR<RollCallScalarRelationFilter, RollCallWhereInput>
    adultStudent?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
    childStudent?: XOR<ChildNullableScalarRelationFilter, ChildWhereInput> | null
  }, "id">

  export type PresenceOrderByWithAggregationInput = {
    id?: SortOrder
    studentType?: SortOrder
    rollCallId?: SortOrder
    adultStudentId?: SortOrderInput | SortOrder
    childStudentId?: SortOrderInput | SortOrder
    isPresent?: SortOrder
    absenceReason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PresenceCountOrderByAggregateInput
    _avg?: PresenceAvgOrderByAggregateInput
    _max?: PresenceMaxOrderByAggregateInput
    _min?: PresenceMinOrderByAggregateInput
    _sum?: PresenceSumOrderByAggregateInput
  }

  export type PresenceScalarWhereWithAggregatesInput = {
    AND?: PresenceScalarWhereWithAggregatesInput | PresenceScalarWhereWithAggregatesInput[]
    OR?: PresenceScalarWhereWithAggregatesInput[]
    NOT?: PresenceScalarWhereWithAggregatesInput | PresenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Presence"> | number
    studentType?: EnumStudentTypeWithAggregatesFilter<"Presence"> | $Enums.StudentType
    rollCallId?: IntWithAggregatesFilter<"Presence"> | number
    adultStudentId?: StringNullableWithAggregatesFilter<"Presence"> | string | null
    childStudentId?: StringNullableWithAggregatesFilter<"Presence"> | string | null
    isPresent?: BoolWithAggregatesFilter<"Presence"> | boolean
    absenceReason?: StringNullableWithAggregatesFilter<"Presence"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Presence"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Presence"> | Date | string
  }

  export type ContractWhereInput = {
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    id?: StringFilter<"Contract"> | string
    name?: StringFilter<"Contract"> | string
    type?: EnumContractTypeFilter<"Contract"> | $Enums.ContractType
    address?: StringFilter<"Contract"> | string
    neighborhood?: StringFilter<"Contract"> | string
    city?: StringFilter<"Contract"> | string
    date?: DateTimeFilter<"Contract"> | Date | string
    eventStartTime?: DateTimeFilter<"Contract"> | Date | string
    commutingFee?: FloatFilter<"Contract"> | number
    discountPercentage?: FloatFilter<"Contract"> | number
    paymentDueDate?: DateTimeFilter<"Contract"> | Date | string
    observations?: StringFilter<"Contract"> | string
    fileUrl?: StringNullableFilter<"Contract"> | string | null
    videomakerId?: StringNullableFilter<"Contract"> | string | null
    packageId?: IntFilter<"Contract"> | number
    isSigned?: EnumSignatureStatusFilter<"Contract"> | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFilter<"Contract"> | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFilter<"Contract"> | $Enums.GeneralStatus
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    clients?: ClientContractListRelationFilter
    photographers?: ContractPhotographerListRelationFilter
    videomaker?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    package?: XOR<PackageScalarRelationFilter, PackageWhereInput>
    transactions?: TransactionListRelationFilter
  }

  export type ContractOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    date?: SortOrder
    eventStartTime?: SortOrder
    commutingFee?: SortOrder
    discountPercentage?: SortOrder
    paymentDueDate?: SortOrder
    observations?: SortOrder
    fileUrl?: SortOrderInput | SortOrder
    videomakerId?: SortOrderInput | SortOrder
    packageId?: SortOrder
    isSigned?: SortOrder
    isPaid?: SortOrder
    generalStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clients?: ClientContractOrderByRelationAggregateInput
    photographers?: ContractPhotographerOrderByRelationAggregateInput
    videomaker?: UserOrderByWithRelationInput
    package?: PackageOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
    _relevance?: ContractOrderByRelevanceInput
  }

  export type ContractWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    name?: StringFilter<"Contract"> | string
    type?: EnumContractTypeFilter<"Contract"> | $Enums.ContractType
    address?: StringFilter<"Contract"> | string
    neighborhood?: StringFilter<"Contract"> | string
    city?: StringFilter<"Contract"> | string
    date?: DateTimeFilter<"Contract"> | Date | string
    eventStartTime?: DateTimeFilter<"Contract"> | Date | string
    commutingFee?: FloatFilter<"Contract"> | number
    discountPercentage?: FloatFilter<"Contract"> | number
    paymentDueDate?: DateTimeFilter<"Contract"> | Date | string
    observations?: StringFilter<"Contract"> | string
    fileUrl?: StringNullableFilter<"Contract"> | string | null
    videomakerId?: StringNullableFilter<"Contract"> | string | null
    packageId?: IntFilter<"Contract"> | number
    isSigned?: EnumSignatureStatusFilter<"Contract"> | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFilter<"Contract"> | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFilter<"Contract"> | $Enums.GeneralStatus
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    clients?: ClientContractListRelationFilter
    photographers?: ContractPhotographerListRelationFilter
    videomaker?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    package?: XOR<PackageScalarRelationFilter, PackageWhereInput>
    transactions?: TransactionListRelationFilter
  }, "id">

  export type ContractOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    date?: SortOrder
    eventStartTime?: SortOrder
    commutingFee?: SortOrder
    discountPercentage?: SortOrder
    paymentDueDate?: SortOrder
    observations?: SortOrder
    fileUrl?: SortOrderInput | SortOrder
    videomakerId?: SortOrderInput | SortOrder
    packageId?: SortOrder
    isSigned?: SortOrder
    isPaid?: SortOrder
    generalStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContractCountOrderByAggregateInput
    _avg?: ContractAvgOrderByAggregateInput
    _max?: ContractMaxOrderByAggregateInput
    _min?: ContractMinOrderByAggregateInput
    _sum?: ContractSumOrderByAggregateInput
  }

  export type ContractScalarWhereWithAggregatesInput = {
    AND?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    OR?: ContractScalarWhereWithAggregatesInput[]
    NOT?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contract"> | string
    name?: StringWithAggregatesFilter<"Contract"> | string
    type?: EnumContractTypeWithAggregatesFilter<"Contract"> | $Enums.ContractType
    address?: StringWithAggregatesFilter<"Contract"> | string
    neighborhood?: StringWithAggregatesFilter<"Contract"> | string
    city?: StringWithAggregatesFilter<"Contract"> | string
    date?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    eventStartTime?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    commutingFee?: FloatWithAggregatesFilter<"Contract"> | number
    discountPercentage?: FloatWithAggregatesFilter<"Contract"> | number
    paymentDueDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    observations?: StringWithAggregatesFilter<"Contract"> | string
    fileUrl?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    videomakerId?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    packageId?: IntWithAggregatesFilter<"Contract"> | number
    isSigned?: EnumSignatureStatusWithAggregatesFilter<"Contract"> | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusWithAggregatesFilter<"Contract"> | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusWithAggregatesFilter<"Contract"> | $Enums.GeneralStatus
    createdAt?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    date?: DateTimeFilter<"Transaction"> | Date | string
    description?: StringNullableFilter<"Transaction"> | string | null
    method?: EnumPaymentMethodFilter<"Transaction"> | $Enums.PaymentMethod
    isPaid?: BoolFilter<"Transaction"> | boolean
    contractId?: StringNullableFilter<"Transaction"> | string | null
    yogaClassId?: IntNullableFilter<"Transaction"> | number | null
    clientId?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    contract?: XOR<ContractNullableScalarRelationFilter, ContractWhereInput> | null
    yogaClass?: XOR<YogaClassNullableScalarRelationFilter, YogaClassWhereInput> | null
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    description?: SortOrderInput | SortOrder
    method?: SortOrder
    isPaid?: SortOrder
    contractId?: SortOrderInput | SortOrder
    yogaClassId?: SortOrderInput | SortOrder
    clientId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contract?: ContractOrderByWithRelationInput
    yogaClass?: YogaClassOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
    _relevance?: TransactionOrderByRelevanceInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    amount?: FloatFilter<"Transaction"> | number
    date?: DateTimeFilter<"Transaction"> | Date | string
    description?: StringNullableFilter<"Transaction"> | string | null
    method?: EnumPaymentMethodFilter<"Transaction"> | $Enums.PaymentMethod
    isPaid?: BoolFilter<"Transaction"> | boolean
    contractId?: StringNullableFilter<"Transaction"> | string | null
    yogaClassId?: IntNullableFilter<"Transaction"> | number | null
    clientId?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    contract?: XOR<ContractNullableScalarRelationFilter, ContractWhereInput> | null
    yogaClass?: XOR<YogaClassNullableScalarRelationFilter, YogaClassWhereInput> | null
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    description?: SortOrderInput | SortOrder
    method?: SortOrder
    isPaid?: SortOrder
    contractId?: SortOrderInput | SortOrder
    yogaClassId?: SortOrderInput | SortOrder
    clientId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    amount?: FloatWithAggregatesFilter<"Transaction"> | number
    date?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    description?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    method?: EnumPaymentMethodWithAggregatesFilter<"Transaction"> | $Enums.PaymentMethod
    isPaid?: BoolWithAggregatesFilter<"Transaction"> | boolean
    contractId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    yogaClassId?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    clientId?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type ContractPhotographerWhereInput = {
    AND?: ContractPhotographerWhereInput | ContractPhotographerWhereInput[]
    OR?: ContractPhotographerWhereInput[]
    NOT?: ContractPhotographerWhereInput | ContractPhotographerWhereInput[]
    photographerId?: StringFilter<"ContractPhotographer"> | string
    contractId?: StringFilter<"ContractPhotographer"> | string
    photographer?: XOR<UserScalarRelationFilter, UserWhereInput>
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
  }

  export type ContractPhotographerOrderByWithRelationInput = {
    photographerId?: SortOrder
    contractId?: SortOrder
    photographer?: UserOrderByWithRelationInput
    contract?: ContractOrderByWithRelationInput
    _relevance?: ContractPhotographerOrderByRelevanceInput
  }

  export type ContractPhotographerWhereUniqueInput = Prisma.AtLeast<{
    photographerId_contractId?: ContractPhotographerPhotographerIdContractIdCompoundUniqueInput
    AND?: ContractPhotographerWhereInput | ContractPhotographerWhereInput[]
    OR?: ContractPhotographerWhereInput[]
    NOT?: ContractPhotographerWhereInput | ContractPhotographerWhereInput[]
    photographerId?: StringFilter<"ContractPhotographer"> | string
    contractId?: StringFilter<"ContractPhotographer"> | string
    photographer?: XOR<UserScalarRelationFilter, UserWhereInput>
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
  }, "photographerId_contractId">

  export type ContractPhotographerOrderByWithAggregationInput = {
    photographerId?: SortOrder
    contractId?: SortOrder
    _count?: ContractPhotographerCountOrderByAggregateInput
    _max?: ContractPhotographerMaxOrderByAggregateInput
    _min?: ContractPhotographerMinOrderByAggregateInput
  }

  export type ContractPhotographerScalarWhereWithAggregatesInput = {
    AND?: ContractPhotographerScalarWhereWithAggregatesInput | ContractPhotographerScalarWhereWithAggregatesInput[]
    OR?: ContractPhotographerScalarWhereWithAggregatesInput[]
    NOT?: ContractPhotographerScalarWhereWithAggregatesInput | ContractPhotographerScalarWhereWithAggregatesInput[]
    photographerId?: StringWithAggregatesFilter<"ContractPhotographer"> | string
    contractId?: StringWithAggregatesFilter<"ContractPhotographer"> | string
  }

  export type ClientContractWhereInput = {
    AND?: ClientContractWhereInput | ClientContractWhereInput[]
    OR?: ClientContractWhereInput[]
    NOT?: ClientContractWhereInput | ClientContractWhereInput[]
    clientId?: StringFilter<"ClientContract"> | string
    contractId?: StringFilter<"ClientContract"> | string
    assignedAt?: DateTimeFilter<"ClientContract"> | Date | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
  }

  export type ClientContractOrderByWithRelationInput = {
    clientId?: SortOrder
    contractId?: SortOrder
    assignedAt?: SortOrder
    client?: ClientOrderByWithRelationInput
    contract?: ContractOrderByWithRelationInput
    _relevance?: ClientContractOrderByRelevanceInput
  }

  export type ClientContractWhereUniqueInput = Prisma.AtLeast<{
    clientId_contractId?: ClientContractClientIdContractIdCompoundUniqueInput
    AND?: ClientContractWhereInput | ClientContractWhereInput[]
    OR?: ClientContractWhereInput[]
    NOT?: ClientContractWhereInput | ClientContractWhereInput[]
    clientId?: StringFilter<"ClientContract"> | string
    contractId?: StringFilter<"ClientContract"> | string
    assignedAt?: DateTimeFilter<"ClientContract"> | Date | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
  }, "clientId_contractId">

  export type ClientContractOrderByWithAggregationInput = {
    clientId?: SortOrder
    contractId?: SortOrder
    assignedAt?: SortOrder
    _count?: ClientContractCountOrderByAggregateInput
    _max?: ClientContractMaxOrderByAggregateInput
    _min?: ClientContractMinOrderByAggregateInput
  }

  export type ClientContractScalarWhereWithAggregatesInput = {
    AND?: ClientContractScalarWhereWithAggregatesInput | ClientContractScalarWhereWithAggregatesInput[]
    OR?: ClientContractScalarWhereWithAggregatesInput[]
    NOT?: ClientContractScalarWhereWithAggregatesInput | ClientContractScalarWhereWithAggregatesInput[]
    clientId?: StringWithAggregatesFilter<"ClientContract"> | string
    contractId?: StringWithAggregatesFilter<"ClientContract"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"ClientContract"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    clientId?: StringNullableFilter<"Notification"> | string | null
    userId?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    type?: SortOrder
    clientId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: ClientOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    _relevance?: NotificationOrderByRelevanceInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    clientId?: StringNullableFilter<"Notification"> | string | null
    userId?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    type?: SortOrder
    clientId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    clientId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    userId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type PackageWhereInput = {
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    id?: IntFilter<"Package"> | number
    name?: StringFilter<"Package"> | string
    pixPrice?: FloatFilter<"Package"> | number
    cardPrice?: FloatFilter<"Package"> | number
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
    contracts?: ContractListRelationFilter
  }

  export type PackageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    pixPrice?: SortOrder
    cardPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    contracts?: ContractOrderByRelationAggregateInput
    _relevance?: PackageOrderByRelevanceInput
  }

  export type PackageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    name?: StringFilter<"Package"> | string
    pixPrice?: FloatFilter<"Package"> | number
    cardPrice?: FloatFilter<"Package"> | number
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
    contracts?: ContractListRelationFilter
  }, "id">

  export type PackageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    pixPrice?: SortOrder
    cardPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PackageCountOrderByAggregateInput
    _avg?: PackageAvgOrderByAggregateInput
    _max?: PackageMaxOrderByAggregateInput
    _min?: PackageMinOrderByAggregateInput
    _sum?: PackageSumOrderByAggregateInput
  }

  export type PackageScalarWhereWithAggregatesInput = {
    AND?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    OR?: PackageScalarWhereWithAggregatesInput[]
    NOT?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Package"> | number
    name?: StringWithAggregatesFilter<"Package"> | string
    pixPrice?: FloatWithAggregatesFilter<"Package"> | number
    cardPrice?: FloatWithAggregatesFilter<"Package"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Package"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Package"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    classes?: YogaClassCreateNestedManyWithoutInstructorInput
    videoContracts?: ContractCreateNestedManyWithoutVideomakerInput
    photoContracts?: ContractPhotographerCreateNestedManyWithoutPhotographerInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    classes?: YogaClassUncheckedCreateNestedManyWithoutInstructorInput
    videoContracts?: ContractUncheckedCreateNestedManyWithoutVideomakerInput
    photoContracts?: ContractPhotographerUncheckedCreateNestedManyWithoutPhotographerInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    classes?: YogaClassUpdateManyWithoutInstructorNestedInput
    videoContracts?: ContractUpdateManyWithoutVideomakerNestedInput
    photoContracts?: ContractPhotographerUpdateManyWithoutPhotographerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    classes?: YogaClassUncheckedUpdateManyWithoutInstructorNestedInput
    videoContracts?: ContractUncheckedUpdateManyWithoutVideomakerNestedInput
    photoContracts?: ContractPhotographerUncheckedUpdateManyWithoutPhotographerNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleCreateInput = {
    user: UserCreateNestedOneWithoutRolesInput
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserRoleUncheckedCreateInput = {
    userId: string
    roleId: string
  }

  export type UserRoleUpdateInput = {
    user?: UserUpdateOneRequiredWithoutRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleCreateManyInput = {
    userId: string
    roleId: string
  }

  export type UserRoleUpdateManyMutationInput = {

  }

  export type UserRoleUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type ClientCreateInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FamilyCreateNestedManyWithoutClientInput
    contracts?: ClientContractCreateNestedManyWithoutClientInput
    yogaClasses?: YogaAdultStudentCreateNestedManyWithoutStudentInput
    presences?: PresenceCreateNestedManyWithoutAdultStudentInput
    transactions?: TransactionCreateNestedManyWithoutClientInput
    notifications?: NotificationCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FamilyUncheckedCreateNestedManyWithoutClientInput
    contracts?: ClientContractUncheckedCreateNestedManyWithoutClientInput
    yogaClasses?: YogaAdultStudentUncheckedCreateNestedManyWithoutStudentInput
    presences?: PresenceUncheckedCreateNestedManyWithoutAdultStudentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutClientInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FamilyUpdateManyWithoutClientNestedInput
    contracts?: ClientContractUpdateManyWithoutClientNestedInput
    yogaClasses?: YogaAdultStudentUpdateManyWithoutStudentNestedInput
    presences?: PresenceUpdateManyWithoutAdultStudentNestedInput
    transactions?: TransactionUpdateManyWithoutClientNestedInput
    notifications?: NotificationUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FamilyUncheckedUpdateManyWithoutClientNestedInput
    contracts?: ClientContractUncheckedUpdateManyWithoutClientNestedInput
    yogaClasses?: YogaAdultStudentUncheckedUpdateManyWithoutStudentNestedInput
    presences?: PresenceUncheckedUpdateManyWithoutAdultStudentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutClientNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parents?: FamilyCreateNestedManyWithoutChildInput
    yogaClasses?: YogaChildStudentCreateNestedManyWithoutStudentInput
    presences?: PresenceCreateNestedManyWithoutChildStudentInput
  }

  export type ChildUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parents?: FamilyUncheckedCreateNestedManyWithoutChildInput
    yogaClasses?: YogaChildStudentUncheckedCreateNestedManyWithoutStudentInput
    presences?: PresenceUncheckedCreateNestedManyWithoutChildStudentInput
  }

  export type ChildUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parents?: FamilyUpdateManyWithoutChildNestedInput
    yogaClasses?: YogaChildStudentUpdateManyWithoutStudentNestedInput
    presences?: PresenceUpdateManyWithoutChildStudentNestedInput
  }

  export type ChildUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parents?: FamilyUncheckedUpdateManyWithoutChildNestedInput
    yogaClasses?: YogaChildStudentUncheckedUpdateManyWithoutStudentNestedInput
    presences?: PresenceUncheckedUpdateManyWithoutChildStudentNestedInput
  }

  export type ChildCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChildUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyCreateInput = {
    client: ClientCreateNestedOneWithoutChildrenInput
    child: ChildCreateNestedOneWithoutParentsInput
  }

  export type FamilyUncheckedCreateInput = {
    clientId: string
    childId: string
  }

  export type FamilyUpdateInput = {
    client?: ClientUpdateOneRequiredWithoutChildrenNestedInput
    child?: ChildUpdateOneRequiredWithoutParentsNestedInput
  }

  export type FamilyUncheckedUpdateInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
  }

  export type FamilyCreateManyInput = {
    clientId: string
    childId: string
  }

  export type FamilyUpdateManyMutationInput = {

  }

  export type FamilyUncheckedUpdateManyInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
  }

  export type YogaClassCreateInput = {
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutClassesInput
    transactions?: TransactionCreateNestedManyWithoutYogaClassInput
    instructor: UserCreateNestedOneWithoutClassesInput
    adultStudents?: YogaAdultStudentCreateNestedManyWithoutYogaClassInput
    childStudents?: YogaChildStudentCreateNestedManyWithoutYogaClassInput
    rollCall?: RollCallCreateNestedOneWithoutClassInput
  }

  export type YogaClassUncheckedCreateInput = {
    id?: number
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    locationId: number
    date: Date | string
    instructorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutYogaClassInput
    adultStudents?: YogaAdultStudentUncheckedCreateNestedManyWithoutYogaClassInput
    childStudents?: YogaChildStudentUncheckedCreateNestedManyWithoutYogaClassInput
    rollCall?: RollCallUncheckedCreateNestedOneWithoutClassInput
  }

  export type YogaClassUpdateInput = {
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutClassesNestedInput
    transactions?: TransactionUpdateManyWithoutYogaClassNestedInput
    instructor?: UserUpdateOneRequiredWithoutClassesNestedInput
    adultStudents?: YogaAdultStudentUpdateManyWithoutYogaClassNestedInput
    childStudents?: YogaChildStudentUpdateManyWithoutYogaClassNestedInput
    rollCall?: RollCallUpdateOneWithoutClassNestedInput
  }

  export type YogaClassUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    instructorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutYogaClassNestedInput
    adultStudents?: YogaAdultStudentUncheckedUpdateManyWithoutYogaClassNestedInput
    childStudents?: YogaChildStudentUncheckedUpdateManyWithoutYogaClassNestedInput
    rollCall?: RollCallUncheckedUpdateOneWithoutClassNestedInput
  }

  export type YogaClassCreateManyInput = {
    id?: number
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    locationId: number
    date: Date | string
    instructorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YogaClassUpdateManyMutationInput = {
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YogaClassUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    instructorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateInput = {
    name: string
    address: string
    neighborhood: string
    city: string
    createdAt?: Date | string
    updatedAt?: Date | string
    classes?: YogaClassCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    neighborhood: string
    city: string
    createdAt?: Date | string
    updatedAt?: Date | string
    classes?: YogaClassUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: YogaClassUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: YogaClassUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: number
    name: string
    address: string
    neighborhood: string
    city: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YogaChildStudentCreateInput = {
    yogaClass: YogaClassCreateNestedOneWithoutChildStudentsInput
    student: ChildCreateNestedOneWithoutYogaClassesInput
  }

  export type YogaChildStudentUncheckedCreateInput = {
    yogaClassId: number
    studentId: string
  }

  export type YogaChildStudentUpdateInput = {
    yogaClass?: YogaClassUpdateOneRequiredWithoutChildStudentsNestedInput
    student?: ChildUpdateOneRequiredWithoutYogaClassesNestedInput
  }

  export type YogaChildStudentUncheckedUpdateInput = {
    yogaClassId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type YogaChildStudentCreateManyInput = {
    yogaClassId: number
    studentId: string
  }

  export type YogaChildStudentUpdateManyMutationInput = {

  }

  export type YogaChildStudentUncheckedUpdateManyInput = {
    yogaClassId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type YogaAdultStudentCreateInput = {
    yogaClass: YogaClassCreateNestedOneWithoutAdultStudentsInput
    student: ClientCreateNestedOneWithoutYogaClassesInput
  }

  export type YogaAdultStudentUncheckedCreateInput = {
    yogaClassId: number
    studentId: string
  }

  export type YogaAdultStudentUpdateInput = {
    yogaClass?: YogaClassUpdateOneRequiredWithoutAdultStudentsNestedInput
    student?: ClientUpdateOneRequiredWithoutYogaClassesNestedInput
  }

  export type YogaAdultStudentUncheckedUpdateInput = {
    yogaClassId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type YogaAdultStudentCreateManyInput = {
    yogaClassId: number
    studentId: string
  }

  export type YogaAdultStudentUpdateManyMutationInput = {

  }

  export type YogaAdultStudentUncheckedUpdateManyInput = {
    yogaClassId?: IntFieldUpdateOperationsInput | number
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type RollCallCreateInput = {
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    class: YogaClassCreateNestedOneWithoutRollCallInput
    presences?: PresenceCreateNestedManyWithoutRollCallInput
  }

  export type RollCallUncheckedCreateInput = {
    id?: number
    classId: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    presences?: PresenceUncheckedCreateNestedManyWithoutRollCallInput
  }

  export type RollCallUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: YogaClassUpdateOneRequiredWithoutRollCallNestedInput
    presences?: PresenceUpdateManyWithoutRollCallNestedInput
  }

  export type RollCallUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presences?: PresenceUncheckedUpdateManyWithoutRollCallNestedInput
  }

  export type RollCallCreateManyInput = {
    id?: number
    classId: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RollCallUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RollCallUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceCreateInput = {
    studentType: $Enums.StudentType
    isPresent: boolean
    absenceReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rollCall: RollCallCreateNestedOneWithoutPresencesInput
    adultStudent?: ClientCreateNestedOneWithoutPresencesInput
    childStudent?: ChildCreateNestedOneWithoutPresencesInput
  }

  export type PresenceUncheckedCreateInput = {
    id?: number
    studentType: $Enums.StudentType
    rollCallId: number
    adultStudentId?: string | null
    childStudentId?: string | null
    isPresent: boolean
    absenceReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PresenceUpdateInput = {
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rollCall?: RollCallUpdateOneRequiredWithoutPresencesNestedInput
    adultStudent?: ClientUpdateOneWithoutPresencesNestedInput
    childStudent?: ChildUpdateOneWithoutPresencesNestedInput
  }

  export type PresenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    rollCallId?: IntFieldUpdateOperationsInput | number
    adultStudentId?: NullableStringFieldUpdateOperationsInput | string | null
    childStudentId?: NullableStringFieldUpdateOperationsInput | string | null
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceCreateManyInput = {
    id?: number
    studentType: $Enums.StudentType
    rollCallId: number
    adultStudentId?: string | null
    childStudentId?: string | null
    isPresent: boolean
    absenceReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PresenceUpdateManyMutationInput = {
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    rollCallId?: IntFieldUpdateOperationsInput | number
    adultStudentId?: NullableStringFieldUpdateOperationsInput | string | null
    childStudentId?: NullableStringFieldUpdateOperationsInput | string | null
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractCreateInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientContractCreateNestedManyWithoutContractInput
    photographers?: ContractPhotographerCreateNestedManyWithoutContractInput
    videomaker?: UserCreateNestedOneWithoutVideoContractsInput
    package: PackageCreateNestedOneWithoutContractsInput
    transactions?: TransactionCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    videomakerId?: string | null
    packageId: number
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientContractUncheckedCreateNestedManyWithoutContractInput
    photographers?: ContractPhotographerUncheckedCreateNestedManyWithoutContractInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientContractUpdateManyWithoutContractNestedInput
    photographers?: ContractPhotographerUpdateManyWithoutContractNestedInput
    videomaker?: UserUpdateOneWithoutVideoContractsNestedInput
    package?: PackageUpdateOneRequiredWithoutContractsNestedInput
    transactions?: TransactionUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videomakerId?: NullableStringFieldUpdateOperationsInput | string | null
    packageId?: IntFieldUpdateOperationsInput | number
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientContractUncheckedUpdateManyWithoutContractNestedInput
    photographers?: ContractPhotographerUncheckedUpdateManyWithoutContractNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractCreateManyInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    videomakerId?: string | null
    packageId: number
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videomakerId?: NullableStringFieldUpdateOperationsInput | string | null
    packageId?: IntFieldUpdateOperationsInput | number
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    amount: number
    date?: Date | string
    description?: string | null
    method: $Enums.PaymentMethod
    isPaid?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    contract?: ContractCreateNestedOneWithoutTransactionsInput
    yogaClass?: YogaClassCreateNestedOneWithoutTransactionsInput
    client?: ClientCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    amount: number
    date?: Date | string
    description?: string | null
    method: $Enums.PaymentMethod
    isPaid?: boolean
    contractId?: string | null
    yogaClassId?: number | null
    clientId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneWithoutTransactionsNestedInput
    yogaClass?: YogaClassUpdateOneWithoutTransactionsNestedInput
    client?: ClientUpdateOneWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    yogaClassId?: NullableIntFieldUpdateOperationsInput | number | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    amount: number
    date?: Date | string
    description?: string | null
    method: $Enums.PaymentMethod
    isPaid?: boolean
    contractId?: string | null
    yogaClassId?: number | null
    clientId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    yogaClassId?: NullableIntFieldUpdateOperationsInput | number | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractPhotographerCreateInput = {
    photographer: UserCreateNestedOneWithoutPhotoContractsInput
    contract: ContractCreateNestedOneWithoutPhotographersInput
  }

  export type ContractPhotographerUncheckedCreateInput = {
    photographerId: string
    contractId: string
  }

  export type ContractPhotographerUpdateInput = {
    photographer?: UserUpdateOneRequiredWithoutPhotoContractsNestedInput
    contract?: ContractUpdateOneRequiredWithoutPhotographersNestedInput
  }

  export type ContractPhotographerUncheckedUpdateInput = {
    photographerId?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
  }

  export type ContractPhotographerCreateManyInput = {
    photographerId: string
    contractId: string
  }

  export type ContractPhotographerUpdateManyMutationInput = {

  }

  export type ContractPhotographerUncheckedUpdateManyInput = {
    photographerId?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
  }

  export type ClientContractCreateInput = {
    assignedAt?: Date | string
    client: ClientCreateNestedOneWithoutContractsInput
    contract: ContractCreateNestedOneWithoutClientsInput
  }

  export type ClientContractUncheckedCreateInput = {
    clientId: string
    contractId: string
    assignedAt?: Date | string
  }

  export type ClientContractUpdateInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutContractsNestedInput
    contract?: ContractUpdateOneRequiredWithoutClientsNestedInput
  }

  export type ClientContractUncheckedUpdateInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientContractCreateManyInput = {
    clientId: string
    contractId: string
    assignedAt?: Date | string
  }

  export type ClientContractUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientContractUncheckedUpdateManyInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    isRead?: boolean
    type: $Enums.NotificationType
    createdAt?: Date | string
    updatedAt?: Date | string
    client?: ClientCreateNestedOneWithoutNotificationsInput
    user?: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    title: string
    message: string
    isRead?: boolean
    type: $Enums.NotificationType
    clientId?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneWithoutNotificationsNestedInput
    user?: UserUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    title: string
    message: string
    isRead?: boolean
    type: $Enums.NotificationType
    clientId?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageCreateInput = {
    name: string
    pixPrice: number
    cardPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateInput = {
    id?: number
    name: string
    pixPrice: number
    cardPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    pixPrice?: FloatFieldUpdateOperationsInput | number
    cardPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pixPrice?: FloatFieldUpdateOperationsInput | number
    cardPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageCreateManyInput = {
    id?: number
    name: string
    pixPrice: number
    cardPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    pixPrice?: FloatFieldUpdateOperationsInput | number
    cardPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pixPrice?: FloatFieldUpdateOperationsInput | number
    cardPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type UserRoleListRelationFilter = {
    every?: UserRoleWhereInput
    some?: UserRoleWhereInput
    none?: UserRoleWhereInput
  }

  export type YogaClassListRelationFilter = {
    every?: YogaClassWhereInput
    some?: YogaClassWhereInput
    none?: YogaClassWhereInput
  }

  export type ContractListRelationFilter = {
    every?: ContractWhereInput
    some?: ContractWhereInput
    none?: ContractWhereInput
  }

  export type ContractPhotographerListRelationFilter = {
    every?: ContractPhotographerWhereInput
    some?: ContractPhotographerWhereInput
    none?: ContractPhotographerWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YogaClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractPhotographerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pictureUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pictureUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pictureUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RoleOrderByRelevanceInput = {
    fields: RoleOrderByRelevanceFieldEnum | RoleOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type UserRoleOrderByRelevanceInput = {
    fields: UserRoleOrderByRelevanceFieldEnum | UserRoleOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserRoleUserIdRoleIdCompoundUniqueInput = {
    userId: string
    roleId: string
  }

  export type UserRoleCountOrderByAggregateInput = {
    userId?: SortOrder
    roleId?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    userId?: SortOrder
    roleId?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    userId?: SortOrder
    roleId?: SortOrder
  }

  export type FamilyListRelationFilter = {
    every?: FamilyWhereInput
    some?: FamilyWhereInput
    none?: FamilyWhereInput
  }

  export type ClientContractListRelationFilter = {
    every?: ClientContractWhereInput
    some?: ClientContractWhereInput
    none?: ClientContractWhereInput
  }

  export type YogaAdultStudentListRelationFilter = {
    every?: YogaAdultStudentWhereInput
    some?: YogaAdultStudentWhereInput
    none?: YogaAdultStudentWhereInput
  }

  export type PresenceListRelationFilter = {
    every?: PresenceWhereInput
    some?: PresenceWhereInput
    none?: PresenceWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type FamilyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YogaAdultStudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PresenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientOrderByRelevanceInput = {
    fields: ClientOrderByRelevanceFieldEnum | ClientOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YogaChildStudentListRelationFilter = {
    every?: YogaChildStudentWhereInput
    some?: YogaChildStudentWhereInput
    none?: YogaChildStudentWhereInput
  }

  export type YogaChildStudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChildOrderByRelevanceInput = {
    fields: ChildOrderByRelevanceFieldEnum | ChildOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ChildCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChildMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChildMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientScalarRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type ChildScalarRelationFilter = {
    is?: ChildWhereInput
    isNot?: ChildWhereInput
  }

  export type FamilyOrderByRelevanceInput = {
    fields: FamilyOrderByRelevanceFieldEnum | FamilyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FamilyClientIdChildIdCompoundUniqueInput = {
    clientId: string
    childId: string
  }

  export type FamilyCountOrderByAggregateInput = {
    clientId?: SortOrder
    childId?: SortOrder
  }

  export type FamilyMaxOrderByAggregateInput = {
    clientId?: SortOrder
    childId?: SortOrder
  }

  export type FamilyMinOrderByAggregateInput = {
    clientId?: SortOrder
    childId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumYogaClassTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.YogaClassType | EnumYogaClassTypeFieldRefInput<$PrismaModel>
    in?: $Enums.YogaClassType[]
    notIn?: $Enums.YogaClassType[]
    not?: NestedEnumYogaClassTypeFilter<$PrismaModel> | $Enums.YogaClassType
  }

  export type EnumYogaClassStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.YogaClassStatus | EnumYogaClassStatusFieldRefInput<$PrismaModel>
    in?: $Enums.YogaClassStatus[]
    notIn?: $Enums.YogaClassStatus[]
    not?: NestedEnumYogaClassStatusFilter<$PrismaModel> | $Enums.YogaClassStatus
  }

  export type LocationScalarRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type RollCallNullableScalarRelationFilter = {
    is?: RollCallWhereInput | null
    isNot?: RollCallWhereInput | null
  }

  export type YogaClassOrderByRelevanceInput = {
    fields: YogaClassOrderByRelevanceFieldEnum | YogaClassOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type YogaClassCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    instructorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YogaClassAvgOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type YogaClassMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    instructorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YogaClassMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    instructorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YogaClassSumOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumYogaClassTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YogaClassType | EnumYogaClassTypeFieldRefInput<$PrismaModel>
    in?: $Enums.YogaClassType[]
    notIn?: $Enums.YogaClassType[]
    not?: NestedEnumYogaClassTypeWithAggregatesFilter<$PrismaModel> | $Enums.YogaClassType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumYogaClassTypeFilter<$PrismaModel>
    _max?: NestedEnumYogaClassTypeFilter<$PrismaModel>
  }

  export type EnumYogaClassStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YogaClassStatus | EnumYogaClassStatusFieldRefInput<$PrismaModel>
    in?: $Enums.YogaClassStatus[]
    notIn?: $Enums.YogaClassStatus[]
    not?: NestedEnumYogaClassStatusWithAggregatesFilter<$PrismaModel> | $Enums.YogaClassStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumYogaClassStatusFilter<$PrismaModel>
    _max?: NestedEnumYogaClassStatusFilter<$PrismaModel>
  }

  export type LocationOrderByRelevanceInput = {
    fields: LocationOrderByRelevanceFieldEnum | LocationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YogaClassScalarRelationFilter = {
    is?: YogaClassWhereInput
    isNot?: YogaClassWhereInput
  }

  export type YogaChildStudentOrderByRelevanceInput = {
    fields: YogaChildStudentOrderByRelevanceFieldEnum | YogaChildStudentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type YogaChildStudentYogaClassIdStudentIdCompoundUniqueInput = {
    yogaClassId: number
    studentId: string
  }

  export type YogaChildStudentCountOrderByAggregateInput = {
    yogaClassId?: SortOrder
    studentId?: SortOrder
  }

  export type YogaChildStudentAvgOrderByAggregateInput = {
    yogaClassId?: SortOrder
  }

  export type YogaChildStudentMaxOrderByAggregateInput = {
    yogaClassId?: SortOrder
    studentId?: SortOrder
  }

  export type YogaChildStudentMinOrderByAggregateInput = {
    yogaClassId?: SortOrder
    studentId?: SortOrder
  }

  export type YogaChildStudentSumOrderByAggregateInput = {
    yogaClassId?: SortOrder
  }

  export type YogaAdultStudentOrderByRelevanceInput = {
    fields: YogaAdultStudentOrderByRelevanceFieldEnum | YogaAdultStudentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type YogaAdultStudentYogaClassIdStudentIdCompoundUniqueInput = {
    yogaClassId: number
    studentId: string
  }

  export type YogaAdultStudentCountOrderByAggregateInput = {
    yogaClassId?: SortOrder
    studentId?: SortOrder
  }

  export type YogaAdultStudentAvgOrderByAggregateInput = {
    yogaClassId?: SortOrder
  }

  export type YogaAdultStudentMaxOrderByAggregateInput = {
    yogaClassId?: SortOrder
    studentId?: SortOrder
  }

  export type YogaAdultStudentMinOrderByAggregateInput = {
    yogaClassId?: SortOrder
    studentId?: SortOrder
  }

  export type YogaAdultStudentSumOrderByAggregateInput = {
    yogaClassId?: SortOrder
  }

  export type RollCallCountOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RollCallAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type RollCallMaxOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RollCallMinOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RollCallSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type EnumStudentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StudentType | EnumStudentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StudentType[]
    notIn?: $Enums.StudentType[]
    not?: NestedEnumStudentTypeFilter<$PrismaModel> | $Enums.StudentType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type RollCallScalarRelationFilter = {
    is?: RollCallWhereInput
    isNot?: RollCallWhereInput
  }

  export type ClientNullableScalarRelationFilter = {
    is?: ClientWhereInput | null
    isNot?: ClientWhereInput | null
  }

  export type ChildNullableScalarRelationFilter = {
    is?: ChildWhereInput | null
    isNot?: ChildWhereInput | null
  }

  export type PresenceOrderByRelevanceInput = {
    fields: PresenceOrderByRelevanceFieldEnum | PresenceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PresenceCountOrderByAggregateInput = {
    id?: SortOrder
    studentType?: SortOrder
    rollCallId?: SortOrder
    adultStudentId?: SortOrder
    childStudentId?: SortOrder
    isPresent?: SortOrder
    absenceReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PresenceAvgOrderByAggregateInput = {
    id?: SortOrder
    rollCallId?: SortOrder
  }

  export type PresenceMaxOrderByAggregateInput = {
    id?: SortOrder
    studentType?: SortOrder
    rollCallId?: SortOrder
    adultStudentId?: SortOrder
    childStudentId?: SortOrder
    isPresent?: SortOrder
    absenceReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PresenceMinOrderByAggregateInput = {
    id?: SortOrder
    studentType?: SortOrder
    rollCallId?: SortOrder
    adultStudentId?: SortOrder
    childStudentId?: SortOrder
    isPresent?: SortOrder
    absenceReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PresenceSumOrderByAggregateInput = {
    id?: SortOrder
    rollCallId?: SortOrder
  }

  export type EnumStudentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StudentType | EnumStudentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StudentType[]
    notIn?: $Enums.StudentType[]
    not?: NestedEnumStudentTypeWithAggregatesFilter<$PrismaModel> | $Enums.StudentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStudentTypeFilter<$PrismaModel>
    _max?: NestedEnumStudentTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumContractTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[]
    notIn?: $Enums.ContractType[]
    not?: NestedEnumContractTypeFilter<$PrismaModel> | $Enums.ContractType
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumSignatureStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SignatureStatus | EnumSignatureStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SignatureStatus[]
    notIn?: $Enums.SignatureStatus[]
    not?: NestedEnumSignatureStatusFilter<$PrismaModel> | $Enums.SignatureStatus
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type EnumGeneralStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GeneralStatus | EnumGeneralStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GeneralStatus[]
    notIn?: $Enums.GeneralStatus[]
    not?: NestedEnumGeneralStatusFilter<$PrismaModel> | $Enums.GeneralStatus
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type PackageScalarRelationFilter = {
    is?: PackageWhereInput
    isNot?: PackageWhereInput
  }

  export type ContractOrderByRelevanceInput = {
    fields: ContractOrderByRelevanceFieldEnum | ContractOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ContractCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    date?: SortOrder
    eventStartTime?: SortOrder
    commutingFee?: SortOrder
    discountPercentage?: SortOrder
    paymentDueDate?: SortOrder
    observations?: SortOrder
    fileUrl?: SortOrder
    videomakerId?: SortOrder
    packageId?: SortOrder
    isSigned?: SortOrder
    isPaid?: SortOrder
    generalStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractAvgOrderByAggregateInput = {
    commutingFee?: SortOrder
    discountPercentage?: SortOrder
    packageId?: SortOrder
  }

  export type ContractMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    date?: SortOrder
    eventStartTime?: SortOrder
    commutingFee?: SortOrder
    discountPercentage?: SortOrder
    paymentDueDate?: SortOrder
    observations?: SortOrder
    fileUrl?: SortOrder
    videomakerId?: SortOrder
    packageId?: SortOrder
    isSigned?: SortOrder
    isPaid?: SortOrder
    generalStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    address?: SortOrder
    neighborhood?: SortOrder
    city?: SortOrder
    date?: SortOrder
    eventStartTime?: SortOrder
    commutingFee?: SortOrder
    discountPercentage?: SortOrder
    paymentDueDate?: SortOrder
    observations?: SortOrder
    fileUrl?: SortOrder
    videomakerId?: SortOrder
    packageId?: SortOrder
    isSigned?: SortOrder
    isPaid?: SortOrder
    generalStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractSumOrderByAggregateInput = {
    commutingFee?: SortOrder
    discountPercentage?: SortOrder
    packageId?: SortOrder
  }

  export type EnumContractTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[]
    notIn?: $Enums.ContractType[]
    not?: NestedEnumContractTypeWithAggregatesFilter<$PrismaModel> | $Enums.ContractType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractTypeFilter<$PrismaModel>
    _max?: NestedEnumContractTypeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumSignatureStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignatureStatus | EnumSignatureStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SignatureStatus[]
    notIn?: $Enums.SignatureStatus[]
    not?: NestedEnumSignatureStatusWithAggregatesFilter<$PrismaModel> | $Enums.SignatureStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignatureStatusFilter<$PrismaModel>
    _max?: NestedEnumSignatureStatusFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type EnumGeneralStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GeneralStatus | EnumGeneralStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GeneralStatus[]
    notIn?: $Enums.GeneralStatus[]
    not?: NestedEnumGeneralStatusWithAggregatesFilter<$PrismaModel> | $Enums.GeneralStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGeneralStatusFilter<$PrismaModel>
    _max?: NestedEnumGeneralStatusFilter<$PrismaModel>
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ContractNullableScalarRelationFilter = {
    is?: ContractWhereInput | null
    isNot?: ContractWhereInput | null
  }

  export type YogaClassNullableScalarRelationFilter = {
    is?: YogaClassWhereInput | null
    isNot?: YogaClassWhereInput | null
  }

  export type TransactionOrderByRelevanceInput = {
    fields: TransactionOrderByRelevanceFieldEnum | TransactionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    description?: SortOrder
    method?: SortOrder
    isPaid?: SortOrder
    contractId?: SortOrder
    yogaClassId?: SortOrder
    clientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
    yogaClassId?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    description?: SortOrder
    method?: SortOrder
    isPaid?: SortOrder
    contractId?: SortOrder
    yogaClassId?: SortOrder
    clientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    description?: SortOrder
    method?: SortOrder
    isPaid?: SortOrder
    contractId?: SortOrder
    yogaClassId?: SortOrder
    clientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
    yogaClassId?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ContractScalarRelationFilter = {
    is?: ContractWhereInput
    isNot?: ContractWhereInput
  }

  export type ContractPhotographerOrderByRelevanceInput = {
    fields: ContractPhotographerOrderByRelevanceFieldEnum | ContractPhotographerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ContractPhotographerPhotographerIdContractIdCompoundUniqueInput = {
    photographerId: string
    contractId: string
  }

  export type ContractPhotographerCountOrderByAggregateInput = {
    photographerId?: SortOrder
    contractId?: SortOrder
  }

  export type ContractPhotographerMaxOrderByAggregateInput = {
    photographerId?: SortOrder
    contractId?: SortOrder
  }

  export type ContractPhotographerMinOrderByAggregateInput = {
    photographerId?: SortOrder
    contractId?: SortOrder
  }

  export type ClientContractOrderByRelevanceInput = {
    fields: ClientContractOrderByRelevanceFieldEnum | ClientContractOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClientContractClientIdContractIdCompoundUniqueInput = {
    clientId: string
    contractId: string
  }

  export type ClientContractCountOrderByAggregateInput = {
    clientId?: SortOrder
    contractId?: SortOrder
    assignedAt?: SortOrder
  }

  export type ClientContractMaxOrderByAggregateInput = {
    clientId?: SortOrder
    contractId?: SortOrder
    assignedAt?: SortOrder
  }

  export type ClientContractMinOrderByAggregateInput = {
    clientId?: SortOrder
    contractId?: SortOrder
    assignedAt?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationOrderByRelevanceInput = {
    fields: NotificationOrderByRelevanceFieldEnum | NotificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    type?: SortOrder
    clientId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    type?: SortOrder
    clientId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    type?: SortOrder
    clientId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type PackageOrderByRelevanceInput = {
    fields: PackageOrderByRelevanceFieldEnum | PackageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PackageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pixPrice?: SortOrder
    cardPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PackageAvgOrderByAggregateInput = {
    id?: SortOrder
    pixPrice?: SortOrder
    cardPrice?: SortOrder
  }

  export type PackageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pixPrice?: SortOrder
    cardPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PackageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    pixPrice?: SortOrder
    cardPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PackageSumOrderByAggregateInput = {
    id?: SortOrder
    pixPrice?: SortOrder
    cardPrice?: SortOrder
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserRoleCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type YogaClassCreateNestedManyWithoutInstructorInput = {
    create?: XOR<YogaClassCreateWithoutInstructorInput, YogaClassUncheckedCreateWithoutInstructorInput> | YogaClassCreateWithoutInstructorInput[] | YogaClassUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: YogaClassCreateOrConnectWithoutInstructorInput | YogaClassCreateOrConnectWithoutInstructorInput[]
    createMany?: YogaClassCreateManyInstructorInputEnvelope
    connect?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
  }

  export type ContractCreateNestedManyWithoutVideomakerInput = {
    create?: XOR<ContractCreateWithoutVideomakerInput, ContractUncheckedCreateWithoutVideomakerInput> | ContractCreateWithoutVideomakerInput[] | ContractUncheckedCreateWithoutVideomakerInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutVideomakerInput | ContractCreateOrConnectWithoutVideomakerInput[]
    createMany?: ContractCreateManyVideomakerInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type ContractPhotographerCreateNestedManyWithoutPhotographerInput = {
    create?: XOR<ContractPhotographerCreateWithoutPhotographerInput, ContractPhotographerUncheckedCreateWithoutPhotographerInput> | ContractPhotographerCreateWithoutPhotographerInput[] | ContractPhotographerUncheckedCreateWithoutPhotographerInput[]
    connectOrCreate?: ContractPhotographerCreateOrConnectWithoutPhotographerInput | ContractPhotographerCreateOrConnectWithoutPhotographerInput[]
    createMany?: ContractPhotographerCreateManyPhotographerInputEnvelope
    connect?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type YogaClassUncheckedCreateNestedManyWithoutInstructorInput = {
    create?: XOR<YogaClassCreateWithoutInstructorInput, YogaClassUncheckedCreateWithoutInstructorInput> | YogaClassCreateWithoutInstructorInput[] | YogaClassUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: YogaClassCreateOrConnectWithoutInstructorInput | YogaClassCreateOrConnectWithoutInstructorInput[]
    createMany?: YogaClassCreateManyInstructorInputEnvelope
    connect?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutVideomakerInput = {
    create?: XOR<ContractCreateWithoutVideomakerInput, ContractUncheckedCreateWithoutVideomakerInput> | ContractCreateWithoutVideomakerInput[] | ContractUncheckedCreateWithoutVideomakerInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutVideomakerInput | ContractCreateOrConnectWithoutVideomakerInput[]
    createMany?: ContractCreateManyVideomakerInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type ContractPhotographerUncheckedCreateNestedManyWithoutPhotographerInput = {
    create?: XOR<ContractPhotographerCreateWithoutPhotographerInput, ContractPhotographerUncheckedCreateWithoutPhotographerInput> | ContractPhotographerCreateWithoutPhotographerInput[] | ContractPhotographerUncheckedCreateWithoutPhotographerInput[]
    connectOrCreate?: ContractPhotographerCreateOrConnectWithoutPhotographerInput | ContractPhotographerCreateOrConnectWithoutPhotographerInput[]
    createMany?: ContractPhotographerCreateManyPhotographerInputEnvelope
    connect?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserRoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type YogaClassUpdateManyWithoutInstructorNestedInput = {
    create?: XOR<YogaClassCreateWithoutInstructorInput, YogaClassUncheckedCreateWithoutInstructorInput> | YogaClassCreateWithoutInstructorInput[] | YogaClassUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: YogaClassCreateOrConnectWithoutInstructorInput | YogaClassCreateOrConnectWithoutInstructorInput[]
    upsert?: YogaClassUpsertWithWhereUniqueWithoutInstructorInput | YogaClassUpsertWithWhereUniqueWithoutInstructorInput[]
    createMany?: YogaClassCreateManyInstructorInputEnvelope
    set?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    disconnect?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    delete?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    connect?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    update?: YogaClassUpdateWithWhereUniqueWithoutInstructorInput | YogaClassUpdateWithWhereUniqueWithoutInstructorInput[]
    updateMany?: YogaClassUpdateManyWithWhereWithoutInstructorInput | YogaClassUpdateManyWithWhereWithoutInstructorInput[]
    deleteMany?: YogaClassScalarWhereInput | YogaClassScalarWhereInput[]
  }

  export type ContractUpdateManyWithoutVideomakerNestedInput = {
    create?: XOR<ContractCreateWithoutVideomakerInput, ContractUncheckedCreateWithoutVideomakerInput> | ContractCreateWithoutVideomakerInput[] | ContractUncheckedCreateWithoutVideomakerInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutVideomakerInput | ContractCreateOrConnectWithoutVideomakerInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutVideomakerInput | ContractUpsertWithWhereUniqueWithoutVideomakerInput[]
    createMany?: ContractCreateManyVideomakerInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutVideomakerInput | ContractUpdateWithWhereUniqueWithoutVideomakerInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutVideomakerInput | ContractUpdateManyWithWhereWithoutVideomakerInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type ContractPhotographerUpdateManyWithoutPhotographerNestedInput = {
    create?: XOR<ContractPhotographerCreateWithoutPhotographerInput, ContractPhotographerUncheckedCreateWithoutPhotographerInput> | ContractPhotographerCreateWithoutPhotographerInput[] | ContractPhotographerUncheckedCreateWithoutPhotographerInput[]
    connectOrCreate?: ContractPhotographerCreateOrConnectWithoutPhotographerInput | ContractPhotographerCreateOrConnectWithoutPhotographerInput[]
    upsert?: ContractPhotographerUpsertWithWhereUniqueWithoutPhotographerInput | ContractPhotographerUpsertWithWhereUniqueWithoutPhotographerInput[]
    createMany?: ContractPhotographerCreateManyPhotographerInputEnvelope
    set?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    disconnect?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    delete?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    connect?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    update?: ContractPhotographerUpdateWithWhereUniqueWithoutPhotographerInput | ContractPhotographerUpdateWithWhereUniqueWithoutPhotographerInput[]
    updateMany?: ContractPhotographerUpdateManyWithWhereWithoutPhotographerInput | ContractPhotographerUpdateManyWithWhereWithoutPhotographerInput[]
    deleteMany?: ContractPhotographerScalarWhereInput | ContractPhotographerScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type YogaClassUncheckedUpdateManyWithoutInstructorNestedInput = {
    create?: XOR<YogaClassCreateWithoutInstructorInput, YogaClassUncheckedCreateWithoutInstructorInput> | YogaClassCreateWithoutInstructorInput[] | YogaClassUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: YogaClassCreateOrConnectWithoutInstructorInput | YogaClassCreateOrConnectWithoutInstructorInput[]
    upsert?: YogaClassUpsertWithWhereUniqueWithoutInstructorInput | YogaClassUpsertWithWhereUniqueWithoutInstructorInput[]
    createMany?: YogaClassCreateManyInstructorInputEnvelope
    set?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    disconnect?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    delete?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    connect?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    update?: YogaClassUpdateWithWhereUniqueWithoutInstructorInput | YogaClassUpdateWithWhereUniqueWithoutInstructorInput[]
    updateMany?: YogaClassUpdateManyWithWhereWithoutInstructorInput | YogaClassUpdateManyWithWhereWithoutInstructorInput[]
    deleteMany?: YogaClassScalarWhereInput | YogaClassScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutVideomakerNestedInput = {
    create?: XOR<ContractCreateWithoutVideomakerInput, ContractUncheckedCreateWithoutVideomakerInput> | ContractCreateWithoutVideomakerInput[] | ContractUncheckedCreateWithoutVideomakerInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutVideomakerInput | ContractCreateOrConnectWithoutVideomakerInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutVideomakerInput | ContractUpsertWithWhereUniqueWithoutVideomakerInput[]
    createMany?: ContractCreateManyVideomakerInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutVideomakerInput | ContractUpdateWithWhereUniqueWithoutVideomakerInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutVideomakerInput | ContractUpdateManyWithWhereWithoutVideomakerInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type ContractPhotographerUncheckedUpdateManyWithoutPhotographerNestedInput = {
    create?: XOR<ContractPhotographerCreateWithoutPhotographerInput, ContractPhotographerUncheckedCreateWithoutPhotographerInput> | ContractPhotographerCreateWithoutPhotographerInput[] | ContractPhotographerUncheckedCreateWithoutPhotographerInput[]
    connectOrCreate?: ContractPhotographerCreateOrConnectWithoutPhotographerInput | ContractPhotographerCreateOrConnectWithoutPhotographerInput[]
    upsert?: ContractPhotographerUpsertWithWhereUniqueWithoutPhotographerInput | ContractPhotographerUpsertWithWhereUniqueWithoutPhotographerInput[]
    createMany?: ContractPhotographerCreateManyPhotographerInputEnvelope
    set?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    disconnect?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    delete?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    connect?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    update?: ContractPhotographerUpdateWithWhereUniqueWithoutPhotographerInput | ContractPhotographerUpdateWithWhereUniqueWithoutPhotographerInput[]
    updateMany?: ContractPhotographerUpdateManyWithWhereWithoutPhotographerInput | ContractPhotographerUpdateManyWithWhereWithoutPhotographerInput[]
    deleteMany?: ContractPhotographerScalarWhereInput | ContractPhotographerScalarWhereInput[]
  }

  export type UserRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRolesInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    connect?: UserWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    upsert?: UserUpsertWithoutRolesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRolesInput, UserUpdateWithoutRolesInput>, UserUncheckedUpdateWithoutRolesInput>
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type FamilyCreateNestedManyWithoutClientInput = {
    create?: XOR<FamilyCreateWithoutClientInput, FamilyUncheckedCreateWithoutClientInput> | FamilyCreateWithoutClientInput[] | FamilyUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FamilyCreateOrConnectWithoutClientInput | FamilyCreateOrConnectWithoutClientInput[]
    createMany?: FamilyCreateManyClientInputEnvelope
    connect?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
  }

  export type ClientContractCreateNestedManyWithoutClientInput = {
    create?: XOR<ClientContractCreateWithoutClientInput, ClientContractUncheckedCreateWithoutClientInput> | ClientContractCreateWithoutClientInput[] | ClientContractUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ClientContractCreateOrConnectWithoutClientInput | ClientContractCreateOrConnectWithoutClientInput[]
    createMany?: ClientContractCreateManyClientInputEnvelope
    connect?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
  }

  export type YogaAdultStudentCreateNestedManyWithoutStudentInput = {
    create?: XOR<YogaAdultStudentCreateWithoutStudentInput, YogaAdultStudentUncheckedCreateWithoutStudentInput> | YogaAdultStudentCreateWithoutStudentInput[] | YogaAdultStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: YogaAdultStudentCreateOrConnectWithoutStudentInput | YogaAdultStudentCreateOrConnectWithoutStudentInput[]
    createMany?: YogaAdultStudentCreateManyStudentInputEnvelope
    connect?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
  }

  export type PresenceCreateNestedManyWithoutAdultStudentInput = {
    create?: XOR<PresenceCreateWithoutAdultStudentInput, PresenceUncheckedCreateWithoutAdultStudentInput> | PresenceCreateWithoutAdultStudentInput[] | PresenceUncheckedCreateWithoutAdultStudentInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutAdultStudentInput | PresenceCreateOrConnectWithoutAdultStudentInput[]
    createMany?: PresenceCreateManyAdultStudentInputEnvelope
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutClientInput = {
    create?: XOR<TransactionCreateWithoutClientInput, TransactionUncheckedCreateWithoutClientInput> | TransactionCreateWithoutClientInput[] | TransactionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutClientInput | TransactionCreateOrConnectWithoutClientInput[]
    createMany?: TransactionCreateManyClientInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutClientInput = {
    create?: XOR<NotificationCreateWithoutClientInput, NotificationUncheckedCreateWithoutClientInput> | NotificationCreateWithoutClientInput[] | NotificationUncheckedCreateWithoutClientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutClientInput | NotificationCreateOrConnectWithoutClientInput[]
    createMany?: NotificationCreateManyClientInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type FamilyUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<FamilyCreateWithoutClientInput, FamilyUncheckedCreateWithoutClientInput> | FamilyCreateWithoutClientInput[] | FamilyUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FamilyCreateOrConnectWithoutClientInput | FamilyCreateOrConnectWithoutClientInput[]
    createMany?: FamilyCreateManyClientInputEnvelope
    connect?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
  }

  export type ClientContractUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<ClientContractCreateWithoutClientInput, ClientContractUncheckedCreateWithoutClientInput> | ClientContractCreateWithoutClientInput[] | ClientContractUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ClientContractCreateOrConnectWithoutClientInput | ClientContractCreateOrConnectWithoutClientInput[]
    createMany?: ClientContractCreateManyClientInputEnvelope
    connect?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
  }

  export type YogaAdultStudentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<YogaAdultStudentCreateWithoutStudentInput, YogaAdultStudentUncheckedCreateWithoutStudentInput> | YogaAdultStudentCreateWithoutStudentInput[] | YogaAdultStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: YogaAdultStudentCreateOrConnectWithoutStudentInput | YogaAdultStudentCreateOrConnectWithoutStudentInput[]
    createMany?: YogaAdultStudentCreateManyStudentInputEnvelope
    connect?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
  }

  export type PresenceUncheckedCreateNestedManyWithoutAdultStudentInput = {
    create?: XOR<PresenceCreateWithoutAdultStudentInput, PresenceUncheckedCreateWithoutAdultStudentInput> | PresenceCreateWithoutAdultStudentInput[] | PresenceUncheckedCreateWithoutAdultStudentInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutAdultStudentInput | PresenceCreateOrConnectWithoutAdultStudentInput[]
    createMany?: PresenceCreateManyAdultStudentInputEnvelope
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<TransactionCreateWithoutClientInput, TransactionUncheckedCreateWithoutClientInput> | TransactionCreateWithoutClientInput[] | TransactionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutClientInput | TransactionCreateOrConnectWithoutClientInput[]
    createMany?: TransactionCreateManyClientInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<NotificationCreateWithoutClientInput, NotificationUncheckedCreateWithoutClientInput> | NotificationCreateWithoutClientInput[] | NotificationUncheckedCreateWithoutClientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutClientInput | NotificationCreateOrConnectWithoutClientInput[]
    createMany?: NotificationCreateManyClientInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type FamilyUpdateManyWithoutClientNestedInput = {
    create?: XOR<FamilyCreateWithoutClientInput, FamilyUncheckedCreateWithoutClientInput> | FamilyCreateWithoutClientInput[] | FamilyUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FamilyCreateOrConnectWithoutClientInput | FamilyCreateOrConnectWithoutClientInput[]
    upsert?: FamilyUpsertWithWhereUniqueWithoutClientInput | FamilyUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: FamilyCreateManyClientInputEnvelope
    set?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    disconnect?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    delete?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    connect?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    update?: FamilyUpdateWithWhereUniqueWithoutClientInput | FamilyUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: FamilyUpdateManyWithWhereWithoutClientInput | FamilyUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: FamilyScalarWhereInput | FamilyScalarWhereInput[]
  }

  export type ClientContractUpdateManyWithoutClientNestedInput = {
    create?: XOR<ClientContractCreateWithoutClientInput, ClientContractUncheckedCreateWithoutClientInput> | ClientContractCreateWithoutClientInput[] | ClientContractUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ClientContractCreateOrConnectWithoutClientInput | ClientContractCreateOrConnectWithoutClientInput[]
    upsert?: ClientContractUpsertWithWhereUniqueWithoutClientInput | ClientContractUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ClientContractCreateManyClientInputEnvelope
    set?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    disconnect?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    delete?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    connect?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    update?: ClientContractUpdateWithWhereUniqueWithoutClientInput | ClientContractUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ClientContractUpdateManyWithWhereWithoutClientInput | ClientContractUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ClientContractScalarWhereInput | ClientContractScalarWhereInput[]
  }

  export type YogaAdultStudentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<YogaAdultStudentCreateWithoutStudentInput, YogaAdultStudentUncheckedCreateWithoutStudentInput> | YogaAdultStudentCreateWithoutStudentInput[] | YogaAdultStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: YogaAdultStudentCreateOrConnectWithoutStudentInput | YogaAdultStudentCreateOrConnectWithoutStudentInput[]
    upsert?: YogaAdultStudentUpsertWithWhereUniqueWithoutStudentInput | YogaAdultStudentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: YogaAdultStudentCreateManyStudentInputEnvelope
    set?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    disconnect?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    delete?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    connect?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    update?: YogaAdultStudentUpdateWithWhereUniqueWithoutStudentInput | YogaAdultStudentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: YogaAdultStudentUpdateManyWithWhereWithoutStudentInput | YogaAdultStudentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: YogaAdultStudentScalarWhereInput | YogaAdultStudentScalarWhereInput[]
  }

  export type PresenceUpdateManyWithoutAdultStudentNestedInput = {
    create?: XOR<PresenceCreateWithoutAdultStudentInput, PresenceUncheckedCreateWithoutAdultStudentInput> | PresenceCreateWithoutAdultStudentInput[] | PresenceUncheckedCreateWithoutAdultStudentInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutAdultStudentInput | PresenceCreateOrConnectWithoutAdultStudentInput[]
    upsert?: PresenceUpsertWithWhereUniqueWithoutAdultStudentInput | PresenceUpsertWithWhereUniqueWithoutAdultStudentInput[]
    createMany?: PresenceCreateManyAdultStudentInputEnvelope
    set?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    disconnect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    delete?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    update?: PresenceUpdateWithWhereUniqueWithoutAdultStudentInput | PresenceUpdateWithWhereUniqueWithoutAdultStudentInput[]
    updateMany?: PresenceUpdateManyWithWhereWithoutAdultStudentInput | PresenceUpdateManyWithWhereWithoutAdultStudentInput[]
    deleteMany?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutClientNestedInput = {
    create?: XOR<TransactionCreateWithoutClientInput, TransactionUncheckedCreateWithoutClientInput> | TransactionCreateWithoutClientInput[] | TransactionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutClientInput | TransactionCreateOrConnectWithoutClientInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutClientInput | TransactionUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: TransactionCreateManyClientInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutClientInput | TransactionUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutClientInput | TransactionUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutClientNestedInput = {
    create?: XOR<NotificationCreateWithoutClientInput, NotificationUncheckedCreateWithoutClientInput> | NotificationCreateWithoutClientInput[] | NotificationUncheckedCreateWithoutClientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutClientInput | NotificationCreateOrConnectWithoutClientInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutClientInput | NotificationUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: NotificationCreateManyClientInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutClientInput | NotificationUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutClientInput | NotificationUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type FamilyUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<FamilyCreateWithoutClientInput, FamilyUncheckedCreateWithoutClientInput> | FamilyCreateWithoutClientInput[] | FamilyUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FamilyCreateOrConnectWithoutClientInput | FamilyCreateOrConnectWithoutClientInput[]
    upsert?: FamilyUpsertWithWhereUniqueWithoutClientInput | FamilyUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: FamilyCreateManyClientInputEnvelope
    set?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    disconnect?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    delete?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    connect?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    update?: FamilyUpdateWithWhereUniqueWithoutClientInput | FamilyUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: FamilyUpdateManyWithWhereWithoutClientInput | FamilyUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: FamilyScalarWhereInput | FamilyScalarWhereInput[]
  }

  export type ClientContractUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<ClientContractCreateWithoutClientInput, ClientContractUncheckedCreateWithoutClientInput> | ClientContractCreateWithoutClientInput[] | ClientContractUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ClientContractCreateOrConnectWithoutClientInput | ClientContractCreateOrConnectWithoutClientInput[]
    upsert?: ClientContractUpsertWithWhereUniqueWithoutClientInput | ClientContractUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ClientContractCreateManyClientInputEnvelope
    set?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    disconnect?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    delete?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    connect?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    update?: ClientContractUpdateWithWhereUniqueWithoutClientInput | ClientContractUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ClientContractUpdateManyWithWhereWithoutClientInput | ClientContractUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ClientContractScalarWhereInput | ClientContractScalarWhereInput[]
  }

  export type YogaAdultStudentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<YogaAdultStudentCreateWithoutStudentInput, YogaAdultStudentUncheckedCreateWithoutStudentInput> | YogaAdultStudentCreateWithoutStudentInput[] | YogaAdultStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: YogaAdultStudentCreateOrConnectWithoutStudentInput | YogaAdultStudentCreateOrConnectWithoutStudentInput[]
    upsert?: YogaAdultStudentUpsertWithWhereUniqueWithoutStudentInput | YogaAdultStudentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: YogaAdultStudentCreateManyStudentInputEnvelope
    set?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    disconnect?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    delete?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    connect?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    update?: YogaAdultStudentUpdateWithWhereUniqueWithoutStudentInput | YogaAdultStudentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: YogaAdultStudentUpdateManyWithWhereWithoutStudentInput | YogaAdultStudentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: YogaAdultStudentScalarWhereInput | YogaAdultStudentScalarWhereInput[]
  }

  export type PresenceUncheckedUpdateManyWithoutAdultStudentNestedInput = {
    create?: XOR<PresenceCreateWithoutAdultStudentInput, PresenceUncheckedCreateWithoutAdultStudentInput> | PresenceCreateWithoutAdultStudentInput[] | PresenceUncheckedCreateWithoutAdultStudentInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutAdultStudentInput | PresenceCreateOrConnectWithoutAdultStudentInput[]
    upsert?: PresenceUpsertWithWhereUniqueWithoutAdultStudentInput | PresenceUpsertWithWhereUniqueWithoutAdultStudentInput[]
    createMany?: PresenceCreateManyAdultStudentInputEnvelope
    set?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    disconnect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    delete?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    update?: PresenceUpdateWithWhereUniqueWithoutAdultStudentInput | PresenceUpdateWithWhereUniqueWithoutAdultStudentInput[]
    updateMany?: PresenceUpdateManyWithWhereWithoutAdultStudentInput | PresenceUpdateManyWithWhereWithoutAdultStudentInput[]
    deleteMany?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<TransactionCreateWithoutClientInput, TransactionUncheckedCreateWithoutClientInput> | TransactionCreateWithoutClientInput[] | TransactionUncheckedCreateWithoutClientInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutClientInput | TransactionCreateOrConnectWithoutClientInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutClientInput | TransactionUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: TransactionCreateManyClientInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutClientInput | TransactionUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutClientInput | TransactionUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<NotificationCreateWithoutClientInput, NotificationUncheckedCreateWithoutClientInput> | NotificationCreateWithoutClientInput[] | NotificationUncheckedCreateWithoutClientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutClientInput | NotificationCreateOrConnectWithoutClientInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutClientInput | NotificationUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: NotificationCreateManyClientInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutClientInput | NotificationUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutClientInput | NotificationUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type FamilyCreateNestedManyWithoutChildInput = {
    create?: XOR<FamilyCreateWithoutChildInput, FamilyUncheckedCreateWithoutChildInput> | FamilyCreateWithoutChildInput[] | FamilyUncheckedCreateWithoutChildInput[]
    connectOrCreate?: FamilyCreateOrConnectWithoutChildInput | FamilyCreateOrConnectWithoutChildInput[]
    createMany?: FamilyCreateManyChildInputEnvelope
    connect?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
  }

  export type YogaChildStudentCreateNestedManyWithoutStudentInput = {
    create?: XOR<YogaChildStudentCreateWithoutStudentInput, YogaChildStudentUncheckedCreateWithoutStudentInput> | YogaChildStudentCreateWithoutStudentInput[] | YogaChildStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: YogaChildStudentCreateOrConnectWithoutStudentInput | YogaChildStudentCreateOrConnectWithoutStudentInput[]
    createMany?: YogaChildStudentCreateManyStudentInputEnvelope
    connect?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
  }

  export type PresenceCreateNestedManyWithoutChildStudentInput = {
    create?: XOR<PresenceCreateWithoutChildStudentInput, PresenceUncheckedCreateWithoutChildStudentInput> | PresenceCreateWithoutChildStudentInput[] | PresenceUncheckedCreateWithoutChildStudentInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutChildStudentInput | PresenceCreateOrConnectWithoutChildStudentInput[]
    createMany?: PresenceCreateManyChildStudentInputEnvelope
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
  }

  export type FamilyUncheckedCreateNestedManyWithoutChildInput = {
    create?: XOR<FamilyCreateWithoutChildInput, FamilyUncheckedCreateWithoutChildInput> | FamilyCreateWithoutChildInput[] | FamilyUncheckedCreateWithoutChildInput[]
    connectOrCreate?: FamilyCreateOrConnectWithoutChildInput | FamilyCreateOrConnectWithoutChildInput[]
    createMany?: FamilyCreateManyChildInputEnvelope
    connect?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
  }

  export type YogaChildStudentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<YogaChildStudentCreateWithoutStudentInput, YogaChildStudentUncheckedCreateWithoutStudentInput> | YogaChildStudentCreateWithoutStudentInput[] | YogaChildStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: YogaChildStudentCreateOrConnectWithoutStudentInput | YogaChildStudentCreateOrConnectWithoutStudentInput[]
    createMany?: YogaChildStudentCreateManyStudentInputEnvelope
    connect?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
  }

  export type PresenceUncheckedCreateNestedManyWithoutChildStudentInput = {
    create?: XOR<PresenceCreateWithoutChildStudentInput, PresenceUncheckedCreateWithoutChildStudentInput> | PresenceCreateWithoutChildStudentInput[] | PresenceUncheckedCreateWithoutChildStudentInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutChildStudentInput | PresenceCreateOrConnectWithoutChildStudentInput[]
    createMany?: PresenceCreateManyChildStudentInputEnvelope
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
  }

  export type FamilyUpdateManyWithoutChildNestedInput = {
    create?: XOR<FamilyCreateWithoutChildInput, FamilyUncheckedCreateWithoutChildInput> | FamilyCreateWithoutChildInput[] | FamilyUncheckedCreateWithoutChildInput[]
    connectOrCreate?: FamilyCreateOrConnectWithoutChildInput | FamilyCreateOrConnectWithoutChildInput[]
    upsert?: FamilyUpsertWithWhereUniqueWithoutChildInput | FamilyUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: FamilyCreateManyChildInputEnvelope
    set?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    disconnect?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    delete?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    connect?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    update?: FamilyUpdateWithWhereUniqueWithoutChildInput | FamilyUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: FamilyUpdateManyWithWhereWithoutChildInput | FamilyUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: FamilyScalarWhereInput | FamilyScalarWhereInput[]
  }

  export type YogaChildStudentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<YogaChildStudentCreateWithoutStudentInput, YogaChildStudentUncheckedCreateWithoutStudentInput> | YogaChildStudentCreateWithoutStudentInput[] | YogaChildStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: YogaChildStudentCreateOrConnectWithoutStudentInput | YogaChildStudentCreateOrConnectWithoutStudentInput[]
    upsert?: YogaChildStudentUpsertWithWhereUniqueWithoutStudentInput | YogaChildStudentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: YogaChildStudentCreateManyStudentInputEnvelope
    set?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    disconnect?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    delete?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    connect?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    update?: YogaChildStudentUpdateWithWhereUniqueWithoutStudentInput | YogaChildStudentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: YogaChildStudentUpdateManyWithWhereWithoutStudentInput | YogaChildStudentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: YogaChildStudentScalarWhereInput | YogaChildStudentScalarWhereInput[]
  }

  export type PresenceUpdateManyWithoutChildStudentNestedInput = {
    create?: XOR<PresenceCreateWithoutChildStudentInput, PresenceUncheckedCreateWithoutChildStudentInput> | PresenceCreateWithoutChildStudentInput[] | PresenceUncheckedCreateWithoutChildStudentInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutChildStudentInput | PresenceCreateOrConnectWithoutChildStudentInput[]
    upsert?: PresenceUpsertWithWhereUniqueWithoutChildStudentInput | PresenceUpsertWithWhereUniqueWithoutChildStudentInput[]
    createMany?: PresenceCreateManyChildStudentInputEnvelope
    set?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    disconnect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    delete?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    update?: PresenceUpdateWithWhereUniqueWithoutChildStudentInput | PresenceUpdateWithWhereUniqueWithoutChildStudentInput[]
    updateMany?: PresenceUpdateManyWithWhereWithoutChildStudentInput | PresenceUpdateManyWithWhereWithoutChildStudentInput[]
    deleteMany?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
  }

  export type FamilyUncheckedUpdateManyWithoutChildNestedInput = {
    create?: XOR<FamilyCreateWithoutChildInput, FamilyUncheckedCreateWithoutChildInput> | FamilyCreateWithoutChildInput[] | FamilyUncheckedCreateWithoutChildInput[]
    connectOrCreate?: FamilyCreateOrConnectWithoutChildInput | FamilyCreateOrConnectWithoutChildInput[]
    upsert?: FamilyUpsertWithWhereUniqueWithoutChildInput | FamilyUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: FamilyCreateManyChildInputEnvelope
    set?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    disconnect?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    delete?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    connect?: FamilyWhereUniqueInput | FamilyWhereUniqueInput[]
    update?: FamilyUpdateWithWhereUniqueWithoutChildInput | FamilyUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: FamilyUpdateManyWithWhereWithoutChildInput | FamilyUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: FamilyScalarWhereInput | FamilyScalarWhereInput[]
  }

  export type YogaChildStudentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<YogaChildStudentCreateWithoutStudentInput, YogaChildStudentUncheckedCreateWithoutStudentInput> | YogaChildStudentCreateWithoutStudentInput[] | YogaChildStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: YogaChildStudentCreateOrConnectWithoutStudentInput | YogaChildStudentCreateOrConnectWithoutStudentInput[]
    upsert?: YogaChildStudentUpsertWithWhereUniqueWithoutStudentInput | YogaChildStudentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: YogaChildStudentCreateManyStudentInputEnvelope
    set?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    disconnect?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    delete?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    connect?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    update?: YogaChildStudentUpdateWithWhereUniqueWithoutStudentInput | YogaChildStudentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: YogaChildStudentUpdateManyWithWhereWithoutStudentInput | YogaChildStudentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: YogaChildStudentScalarWhereInput | YogaChildStudentScalarWhereInput[]
  }

  export type PresenceUncheckedUpdateManyWithoutChildStudentNestedInput = {
    create?: XOR<PresenceCreateWithoutChildStudentInput, PresenceUncheckedCreateWithoutChildStudentInput> | PresenceCreateWithoutChildStudentInput[] | PresenceUncheckedCreateWithoutChildStudentInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutChildStudentInput | PresenceCreateOrConnectWithoutChildStudentInput[]
    upsert?: PresenceUpsertWithWhereUniqueWithoutChildStudentInput | PresenceUpsertWithWhereUniqueWithoutChildStudentInput[]
    createMany?: PresenceCreateManyChildStudentInputEnvelope
    set?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    disconnect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    delete?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    update?: PresenceUpdateWithWhereUniqueWithoutChildStudentInput | PresenceUpdateWithWhereUniqueWithoutChildStudentInput[]
    updateMany?: PresenceUpdateManyWithWhereWithoutChildStudentInput | PresenceUpdateManyWithWhereWithoutChildStudentInput[]
    deleteMany?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
  }

  export type ClientCreateNestedOneWithoutChildrenInput = {
    create?: XOR<ClientCreateWithoutChildrenInput, ClientUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: ClientCreateOrConnectWithoutChildrenInput
    connect?: ClientWhereUniqueInput
  }

  export type ChildCreateNestedOneWithoutParentsInput = {
    create?: XOR<ChildCreateWithoutParentsInput, ChildUncheckedCreateWithoutParentsInput>
    connectOrCreate?: ChildCreateOrConnectWithoutParentsInput
    connect?: ChildWhereUniqueInput
  }

  export type ClientUpdateOneRequiredWithoutChildrenNestedInput = {
    create?: XOR<ClientCreateWithoutChildrenInput, ClientUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: ClientCreateOrConnectWithoutChildrenInput
    upsert?: ClientUpsertWithoutChildrenInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutChildrenInput, ClientUpdateWithoutChildrenInput>, ClientUncheckedUpdateWithoutChildrenInput>
  }

  export type ChildUpdateOneRequiredWithoutParentsNestedInput = {
    create?: XOR<ChildCreateWithoutParentsInput, ChildUncheckedCreateWithoutParentsInput>
    connectOrCreate?: ChildCreateOrConnectWithoutParentsInput
    upsert?: ChildUpsertWithoutParentsInput
    connect?: ChildWhereUniqueInput
    update?: XOR<XOR<ChildUpdateToOneWithWhereWithoutParentsInput, ChildUpdateWithoutParentsInput>, ChildUncheckedUpdateWithoutParentsInput>
  }

  export type LocationCreateNestedOneWithoutClassesInput = {
    create?: XOR<LocationCreateWithoutClassesInput, LocationUncheckedCreateWithoutClassesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutClassesInput
    connect?: LocationWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutYogaClassInput = {
    create?: XOR<TransactionCreateWithoutYogaClassInput, TransactionUncheckedCreateWithoutYogaClassInput> | TransactionCreateWithoutYogaClassInput[] | TransactionUncheckedCreateWithoutYogaClassInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutYogaClassInput | TransactionCreateOrConnectWithoutYogaClassInput[]
    createMany?: TransactionCreateManyYogaClassInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutClassesInput = {
    create?: XOR<UserCreateWithoutClassesInput, UserUncheckedCreateWithoutClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutClassesInput
    connect?: UserWhereUniqueInput
  }

  export type YogaAdultStudentCreateNestedManyWithoutYogaClassInput = {
    create?: XOR<YogaAdultStudentCreateWithoutYogaClassInput, YogaAdultStudentUncheckedCreateWithoutYogaClassInput> | YogaAdultStudentCreateWithoutYogaClassInput[] | YogaAdultStudentUncheckedCreateWithoutYogaClassInput[]
    connectOrCreate?: YogaAdultStudentCreateOrConnectWithoutYogaClassInput | YogaAdultStudentCreateOrConnectWithoutYogaClassInput[]
    createMany?: YogaAdultStudentCreateManyYogaClassInputEnvelope
    connect?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
  }

  export type YogaChildStudentCreateNestedManyWithoutYogaClassInput = {
    create?: XOR<YogaChildStudentCreateWithoutYogaClassInput, YogaChildStudentUncheckedCreateWithoutYogaClassInput> | YogaChildStudentCreateWithoutYogaClassInput[] | YogaChildStudentUncheckedCreateWithoutYogaClassInput[]
    connectOrCreate?: YogaChildStudentCreateOrConnectWithoutYogaClassInput | YogaChildStudentCreateOrConnectWithoutYogaClassInput[]
    createMany?: YogaChildStudentCreateManyYogaClassInputEnvelope
    connect?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
  }

  export type RollCallCreateNestedOneWithoutClassInput = {
    create?: XOR<RollCallCreateWithoutClassInput, RollCallUncheckedCreateWithoutClassInput>
    connectOrCreate?: RollCallCreateOrConnectWithoutClassInput
    connect?: RollCallWhereUniqueInput
  }

  export type TransactionUncheckedCreateNestedManyWithoutYogaClassInput = {
    create?: XOR<TransactionCreateWithoutYogaClassInput, TransactionUncheckedCreateWithoutYogaClassInput> | TransactionCreateWithoutYogaClassInput[] | TransactionUncheckedCreateWithoutYogaClassInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutYogaClassInput | TransactionCreateOrConnectWithoutYogaClassInput[]
    createMany?: TransactionCreateManyYogaClassInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type YogaAdultStudentUncheckedCreateNestedManyWithoutYogaClassInput = {
    create?: XOR<YogaAdultStudentCreateWithoutYogaClassInput, YogaAdultStudentUncheckedCreateWithoutYogaClassInput> | YogaAdultStudentCreateWithoutYogaClassInput[] | YogaAdultStudentUncheckedCreateWithoutYogaClassInput[]
    connectOrCreate?: YogaAdultStudentCreateOrConnectWithoutYogaClassInput | YogaAdultStudentCreateOrConnectWithoutYogaClassInput[]
    createMany?: YogaAdultStudentCreateManyYogaClassInputEnvelope
    connect?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
  }

  export type YogaChildStudentUncheckedCreateNestedManyWithoutYogaClassInput = {
    create?: XOR<YogaChildStudentCreateWithoutYogaClassInput, YogaChildStudentUncheckedCreateWithoutYogaClassInput> | YogaChildStudentCreateWithoutYogaClassInput[] | YogaChildStudentUncheckedCreateWithoutYogaClassInput[]
    connectOrCreate?: YogaChildStudentCreateOrConnectWithoutYogaClassInput | YogaChildStudentCreateOrConnectWithoutYogaClassInput[]
    createMany?: YogaChildStudentCreateManyYogaClassInputEnvelope
    connect?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
  }

  export type RollCallUncheckedCreateNestedOneWithoutClassInput = {
    create?: XOR<RollCallCreateWithoutClassInput, RollCallUncheckedCreateWithoutClassInput>
    connectOrCreate?: RollCallCreateOrConnectWithoutClassInput
    connect?: RollCallWhereUniqueInput
  }

  export type EnumYogaClassTypeFieldUpdateOperationsInput = {
    set?: $Enums.YogaClassType
  }

  export type EnumYogaClassStatusFieldUpdateOperationsInput = {
    set?: $Enums.YogaClassStatus
  }

  export type LocationUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<LocationCreateWithoutClassesInput, LocationUncheckedCreateWithoutClassesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutClassesInput
    upsert?: LocationUpsertWithoutClassesInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutClassesInput, LocationUpdateWithoutClassesInput>, LocationUncheckedUpdateWithoutClassesInput>
  }

  export type TransactionUpdateManyWithoutYogaClassNestedInput = {
    create?: XOR<TransactionCreateWithoutYogaClassInput, TransactionUncheckedCreateWithoutYogaClassInput> | TransactionCreateWithoutYogaClassInput[] | TransactionUncheckedCreateWithoutYogaClassInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutYogaClassInput | TransactionCreateOrConnectWithoutYogaClassInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutYogaClassInput | TransactionUpsertWithWhereUniqueWithoutYogaClassInput[]
    createMany?: TransactionCreateManyYogaClassInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutYogaClassInput | TransactionUpdateWithWhereUniqueWithoutYogaClassInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutYogaClassInput | TransactionUpdateManyWithWhereWithoutYogaClassInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<UserCreateWithoutClassesInput, UserUncheckedCreateWithoutClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutClassesInput
    upsert?: UserUpsertWithoutClassesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClassesInput, UserUpdateWithoutClassesInput>, UserUncheckedUpdateWithoutClassesInput>
  }

  export type YogaAdultStudentUpdateManyWithoutYogaClassNestedInput = {
    create?: XOR<YogaAdultStudentCreateWithoutYogaClassInput, YogaAdultStudentUncheckedCreateWithoutYogaClassInput> | YogaAdultStudentCreateWithoutYogaClassInput[] | YogaAdultStudentUncheckedCreateWithoutYogaClassInput[]
    connectOrCreate?: YogaAdultStudentCreateOrConnectWithoutYogaClassInput | YogaAdultStudentCreateOrConnectWithoutYogaClassInput[]
    upsert?: YogaAdultStudentUpsertWithWhereUniqueWithoutYogaClassInput | YogaAdultStudentUpsertWithWhereUniqueWithoutYogaClassInput[]
    createMany?: YogaAdultStudentCreateManyYogaClassInputEnvelope
    set?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    disconnect?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    delete?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    connect?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    update?: YogaAdultStudentUpdateWithWhereUniqueWithoutYogaClassInput | YogaAdultStudentUpdateWithWhereUniqueWithoutYogaClassInput[]
    updateMany?: YogaAdultStudentUpdateManyWithWhereWithoutYogaClassInput | YogaAdultStudentUpdateManyWithWhereWithoutYogaClassInput[]
    deleteMany?: YogaAdultStudentScalarWhereInput | YogaAdultStudentScalarWhereInput[]
  }

  export type YogaChildStudentUpdateManyWithoutYogaClassNestedInput = {
    create?: XOR<YogaChildStudentCreateWithoutYogaClassInput, YogaChildStudentUncheckedCreateWithoutYogaClassInput> | YogaChildStudentCreateWithoutYogaClassInput[] | YogaChildStudentUncheckedCreateWithoutYogaClassInput[]
    connectOrCreate?: YogaChildStudentCreateOrConnectWithoutYogaClassInput | YogaChildStudentCreateOrConnectWithoutYogaClassInput[]
    upsert?: YogaChildStudentUpsertWithWhereUniqueWithoutYogaClassInput | YogaChildStudentUpsertWithWhereUniqueWithoutYogaClassInput[]
    createMany?: YogaChildStudentCreateManyYogaClassInputEnvelope
    set?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    disconnect?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    delete?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    connect?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    update?: YogaChildStudentUpdateWithWhereUniqueWithoutYogaClassInput | YogaChildStudentUpdateWithWhereUniqueWithoutYogaClassInput[]
    updateMany?: YogaChildStudentUpdateManyWithWhereWithoutYogaClassInput | YogaChildStudentUpdateManyWithWhereWithoutYogaClassInput[]
    deleteMany?: YogaChildStudentScalarWhereInput | YogaChildStudentScalarWhereInput[]
  }

  export type RollCallUpdateOneWithoutClassNestedInput = {
    create?: XOR<RollCallCreateWithoutClassInput, RollCallUncheckedCreateWithoutClassInput>
    connectOrCreate?: RollCallCreateOrConnectWithoutClassInput
    upsert?: RollCallUpsertWithoutClassInput
    disconnect?: RollCallWhereInput | boolean
    delete?: RollCallWhereInput | boolean
    connect?: RollCallWhereUniqueInput
    update?: XOR<XOR<RollCallUpdateToOneWithWhereWithoutClassInput, RollCallUpdateWithoutClassInput>, RollCallUncheckedUpdateWithoutClassInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TransactionUncheckedUpdateManyWithoutYogaClassNestedInput = {
    create?: XOR<TransactionCreateWithoutYogaClassInput, TransactionUncheckedCreateWithoutYogaClassInput> | TransactionCreateWithoutYogaClassInput[] | TransactionUncheckedCreateWithoutYogaClassInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutYogaClassInput | TransactionCreateOrConnectWithoutYogaClassInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutYogaClassInput | TransactionUpsertWithWhereUniqueWithoutYogaClassInput[]
    createMany?: TransactionCreateManyYogaClassInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutYogaClassInput | TransactionUpdateWithWhereUniqueWithoutYogaClassInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutYogaClassInput | TransactionUpdateManyWithWhereWithoutYogaClassInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type YogaAdultStudentUncheckedUpdateManyWithoutYogaClassNestedInput = {
    create?: XOR<YogaAdultStudentCreateWithoutYogaClassInput, YogaAdultStudentUncheckedCreateWithoutYogaClassInput> | YogaAdultStudentCreateWithoutYogaClassInput[] | YogaAdultStudentUncheckedCreateWithoutYogaClassInput[]
    connectOrCreate?: YogaAdultStudentCreateOrConnectWithoutYogaClassInput | YogaAdultStudentCreateOrConnectWithoutYogaClassInput[]
    upsert?: YogaAdultStudentUpsertWithWhereUniqueWithoutYogaClassInput | YogaAdultStudentUpsertWithWhereUniqueWithoutYogaClassInput[]
    createMany?: YogaAdultStudentCreateManyYogaClassInputEnvelope
    set?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    disconnect?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    delete?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    connect?: YogaAdultStudentWhereUniqueInput | YogaAdultStudentWhereUniqueInput[]
    update?: YogaAdultStudentUpdateWithWhereUniqueWithoutYogaClassInput | YogaAdultStudentUpdateWithWhereUniqueWithoutYogaClassInput[]
    updateMany?: YogaAdultStudentUpdateManyWithWhereWithoutYogaClassInput | YogaAdultStudentUpdateManyWithWhereWithoutYogaClassInput[]
    deleteMany?: YogaAdultStudentScalarWhereInput | YogaAdultStudentScalarWhereInput[]
  }

  export type YogaChildStudentUncheckedUpdateManyWithoutYogaClassNestedInput = {
    create?: XOR<YogaChildStudentCreateWithoutYogaClassInput, YogaChildStudentUncheckedCreateWithoutYogaClassInput> | YogaChildStudentCreateWithoutYogaClassInput[] | YogaChildStudentUncheckedCreateWithoutYogaClassInput[]
    connectOrCreate?: YogaChildStudentCreateOrConnectWithoutYogaClassInput | YogaChildStudentCreateOrConnectWithoutYogaClassInput[]
    upsert?: YogaChildStudentUpsertWithWhereUniqueWithoutYogaClassInput | YogaChildStudentUpsertWithWhereUniqueWithoutYogaClassInput[]
    createMany?: YogaChildStudentCreateManyYogaClassInputEnvelope
    set?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    disconnect?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    delete?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    connect?: YogaChildStudentWhereUniqueInput | YogaChildStudentWhereUniqueInput[]
    update?: YogaChildStudentUpdateWithWhereUniqueWithoutYogaClassInput | YogaChildStudentUpdateWithWhereUniqueWithoutYogaClassInput[]
    updateMany?: YogaChildStudentUpdateManyWithWhereWithoutYogaClassInput | YogaChildStudentUpdateManyWithWhereWithoutYogaClassInput[]
    deleteMany?: YogaChildStudentScalarWhereInput | YogaChildStudentScalarWhereInput[]
  }

  export type RollCallUncheckedUpdateOneWithoutClassNestedInput = {
    create?: XOR<RollCallCreateWithoutClassInput, RollCallUncheckedCreateWithoutClassInput>
    connectOrCreate?: RollCallCreateOrConnectWithoutClassInput
    upsert?: RollCallUpsertWithoutClassInput
    disconnect?: RollCallWhereInput | boolean
    delete?: RollCallWhereInput | boolean
    connect?: RollCallWhereUniqueInput
    update?: XOR<XOR<RollCallUpdateToOneWithWhereWithoutClassInput, RollCallUpdateWithoutClassInput>, RollCallUncheckedUpdateWithoutClassInput>
  }

  export type YogaClassCreateNestedManyWithoutLocationInput = {
    create?: XOR<YogaClassCreateWithoutLocationInput, YogaClassUncheckedCreateWithoutLocationInput> | YogaClassCreateWithoutLocationInput[] | YogaClassUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: YogaClassCreateOrConnectWithoutLocationInput | YogaClassCreateOrConnectWithoutLocationInput[]
    createMany?: YogaClassCreateManyLocationInputEnvelope
    connect?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
  }

  export type YogaClassUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<YogaClassCreateWithoutLocationInput, YogaClassUncheckedCreateWithoutLocationInput> | YogaClassCreateWithoutLocationInput[] | YogaClassUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: YogaClassCreateOrConnectWithoutLocationInput | YogaClassCreateOrConnectWithoutLocationInput[]
    createMany?: YogaClassCreateManyLocationInputEnvelope
    connect?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
  }

  export type YogaClassUpdateManyWithoutLocationNestedInput = {
    create?: XOR<YogaClassCreateWithoutLocationInput, YogaClassUncheckedCreateWithoutLocationInput> | YogaClassCreateWithoutLocationInput[] | YogaClassUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: YogaClassCreateOrConnectWithoutLocationInput | YogaClassCreateOrConnectWithoutLocationInput[]
    upsert?: YogaClassUpsertWithWhereUniqueWithoutLocationInput | YogaClassUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: YogaClassCreateManyLocationInputEnvelope
    set?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    disconnect?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    delete?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    connect?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    update?: YogaClassUpdateWithWhereUniqueWithoutLocationInput | YogaClassUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: YogaClassUpdateManyWithWhereWithoutLocationInput | YogaClassUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: YogaClassScalarWhereInput | YogaClassScalarWhereInput[]
  }

  export type YogaClassUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<YogaClassCreateWithoutLocationInput, YogaClassUncheckedCreateWithoutLocationInput> | YogaClassCreateWithoutLocationInput[] | YogaClassUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: YogaClassCreateOrConnectWithoutLocationInput | YogaClassCreateOrConnectWithoutLocationInput[]
    upsert?: YogaClassUpsertWithWhereUniqueWithoutLocationInput | YogaClassUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: YogaClassCreateManyLocationInputEnvelope
    set?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    disconnect?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    delete?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    connect?: YogaClassWhereUniqueInput | YogaClassWhereUniqueInput[]
    update?: YogaClassUpdateWithWhereUniqueWithoutLocationInput | YogaClassUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: YogaClassUpdateManyWithWhereWithoutLocationInput | YogaClassUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: YogaClassScalarWhereInput | YogaClassScalarWhereInput[]
  }

  export type YogaClassCreateNestedOneWithoutChildStudentsInput = {
    create?: XOR<YogaClassCreateWithoutChildStudentsInput, YogaClassUncheckedCreateWithoutChildStudentsInput>
    connectOrCreate?: YogaClassCreateOrConnectWithoutChildStudentsInput
    connect?: YogaClassWhereUniqueInput
  }

  export type ChildCreateNestedOneWithoutYogaClassesInput = {
    create?: XOR<ChildCreateWithoutYogaClassesInput, ChildUncheckedCreateWithoutYogaClassesInput>
    connectOrCreate?: ChildCreateOrConnectWithoutYogaClassesInput
    connect?: ChildWhereUniqueInput
  }

  export type YogaClassUpdateOneRequiredWithoutChildStudentsNestedInput = {
    create?: XOR<YogaClassCreateWithoutChildStudentsInput, YogaClassUncheckedCreateWithoutChildStudentsInput>
    connectOrCreate?: YogaClassCreateOrConnectWithoutChildStudentsInput
    upsert?: YogaClassUpsertWithoutChildStudentsInput
    connect?: YogaClassWhereUniqueInput
    update?: XOR<XOR<YogaClassUpdateToOneWithWhereWithoutChildStudentsInput, YogaClassUpdateWithoutChildStudentsInput>, YogaClassUncheckedUpdateWithoutChildStudentsInput>
  }

  export type ChildUpdateOneRequiredWithoutYogaClassesNestedInput = {
    create?: XOR<ChildCreateWithoutYogaClassesInput, ChildUncheckedCreateWithoutYogaClassesInput>
    connectOrCreate?: ChildCreateOrConnectWithoutYogaClassesInput
    upsert?: ChildUpsertWithoutYogaClassesInput
    connect?: ChildWhereUniqueInput
    update?: XOR<XOR<ChildUpdateToOneWithWhereWithoutYogaClassesInput, ChildUpdateWithoutYogaClassesInput>, ChildUncheckedUpdateWithoutYogaClassesInput>
  }

  export type YogaClassCreateNestedOneWithoutAdultStudentsInput = {
    create?: XOR<YogaClassCreateWithoutAdultStudentsInput, YogaClassUncheckedCreateWithoutAdultStudentsInput>
    connectOrCreate?: YogaClassCreateOrConnectWithoutAdultStudentsInput
    connect?: YogaClassWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutYogaClassesInput = {
    create?: XOR<ClientCreateWithoutYogaClassesInput, ClientUncheckedCreateWithoutYogaClassesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutYogaClassesInput
    connect?: ClientWhereUniqueInput
  }

  export type YogaClassUpdateOneRequiredWithoutAdultStudentsNestedInput = {
    create?: XOR<YogaClassCreateWithoutAdultStudentsInput, YogaClassUncheckedCreateWithoutAdultStudentsInput>
    connectOrCreate?: YogaClassCreateOrConnectWithoutAdultStudentsInput
    upsert?: YogaClassUpsertWithoutAdultStudentsInput
    connect?: YogaClassWhereUniqueInput
    update?: XOR<XOR<YogaClassUpdateToOneWithWhereWithoutAdultStudentsInput, YogaClassUpdateWithoutAdultStudentsInput>, YogaClassUncheckedUpdateWithoutAdultStudentsInput>
  }

  export type ClientUpdateOneRequiredWithoutYogaClassesNestedInput = {
    create?: XOR<ClientCreateWithoutYogaClassesInput, ClientUncheckedCreateWithoutYogaClassesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutYogaClassesInput
    upsert?: ClientUpsertWithoutYogaClassesInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutYogaClassesInput, ClientUpdateWithoutYogaClassesInput>, ClientUncheckedUpdateWithoutYogaClassesInput>
  }

  export type YogaClassCreateNestedOneWithoutRollCallInput = {
    create?: XOR<YogaClassCreateWithoutRollCallInput, YogaClassUncheckedCreateWithoutRollCallInput>
    connectOrCreate?: YogaClassCreateOrConnectWithoutRollCallInput
    connect?: YogaClassWhereUniqueInput
  }

  export type PresenceCreateNestedManyWithoutRollCallInput = {
    create?: XOR<PresenceCreateWithoutRollCallInput, PresenceUncheckedCreateWithoutRollCallInput> | PresenceCreateWithoutRollCallInput[] | PresenceUncheckedCreateWithoutRollCallInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutRollCallInput | PresenceCreateOrConnectWithoutRollCallInput[]
    createMany?: PresenceCreateManyRollCallInputEnvelope
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
  }

  export type PresenceUncheckedCreateNestedManyWithoutRollCallInput = {
    create?: XOR<PresenceCreateWithoutRollCallInput, PresenceUncheckedCreateWithoutRollCallInput> | PresenceCreateWithoutRollCallInput[] | PresenceUncheckedCreateWithoutRollCallInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutRollCallInput | PresenceCreateOrConnectWithoutRollCallInput[]
    createMany?: PresenceCreateManyRollCallInputEnvelope
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
  }

  export type YogaClassUpdateOneRequiredWithoutRollCallNestedInput = {
    create?: XOR<YogaClassCreateWithoutRollCallInput, YogaClassUncheckedCreateWithoutRollCallInput>
    connectOrCreate?: YogaClassCreateOrConnectWithoutRollCallInput
    upsert?: YogaClassUpsertWithoutRollCallInput
    connect?: YogaClassWhereUniqueInput
    update?: XOR<XOR<YogaClassUpdateToOneWithWhereWithoutRollCallInput, YogaClassUpdateWithoutRollCallInput>, YogaClassUncheckedUpdateWithoutRollCallInput>
  }

  export type PresenceUpdateManyWithoutRollCallNestedInput = {
    create?: XOR<PresenceCreateWithoutRollCallInput, PresenceUncheckedCreateWithoutRollCallInput> | PresenceCreateWithoutRollCallInput[] | PresenceUncheckedCreateWithoutRollCallInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutRollCallInput | PresenceCreateOrConnectWithoutRollCallInput[]
    upsert?: PresenceUpsertWithWhereUniqueWithoutRollCallInput | PresenceUpsertWithWhereUniqueWithoutRollCallInput[]
    createMany?: PresenceCreateManyRollCallInputEnvelope
    set?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    disconnect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    delete?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    update?: PresenceUpdateWithWhereUniqueWithoutRollCallInput | PresenceUpdateWithWhereUniqueWithoutRollCallInput[]
    updateMany?: PresenceUpdateManyWithWhereWithoutRollCallInput | PresenceUpdateManyWithWhereWithoutRollCallInput[]
    deleteMany?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
  }

  export type PresenceUncheckedUpdateManyWithoutRollCallNestedInput = {
    create?: XOR<PresenceCreateWithoutRollCallInput, PresenceUncheckedCreateWithoutRollCallInput> | PresenceCreateWithoutRollCallInput[] | PresenceUncheckedCreateWithoutRollCallInput[]
    connectOrCreate?: PresenceCreateOrConnectWithoutRollCallInput | PresenceCreateOrConnectWithoutRollCallInput[]
    upsert?: PresenceUpsertWithWhereUniqueWithoutRollCallInput | PresenceUpsertWithWhereUniqueWithoutRollCallInput[]
    createMany?: PresenceCreateManyRollCallInputEnvelope
    set?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    disconnect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    delete?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    connect?: PresenceWhereUniqueInput | PresenceWhereUniqueInput[]
    update?: PresenceUpdateWithWhereUniqueWithoutRollCallInput | PresenceUpdateWithWhereUniqueWithoutRollCallInput[]
    updateMany?: PresenceUpdateManyWithWhereWithoutRollCallInput | PresenceUpdateManyWithWhereWithoutRollCallInput[]
    deleteMany?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
  }

  export type RollCallCreateNestedOneWithoutPresencesInput = {
    create?: XOR<RollCallCreateWithoutPresencesInput, RollCallUncheckedCreateWithoutPresencesInput>
    connectOrCreate?: RollCallCreateOrConnectWithoutPresencesInput
    connect?: RollCallWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutPresencesInput = {
    create?: XOR<ClientCreateWithoutPresencesInput, ClientUncheckedCreateWithoutPresencesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutPresencesInput
    connect?: ClientWhereUniqueInput
  }

  export type ChildCreateNestedOneWithoutPresencesInput = {
    create?: XOR<ChildCreateWithoutPresencesInput, ChildUncheckedCreateWithoutPresencesInput>
    connectOrCreate?: ChildCreateOrConnectWithoutPresencesInput
    connect?: ChildWhereUniqueInput
  }

  export type EnumStudentTypeFieldUpdateOperationsInput = {
    set?: $Enums.StudentType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type RollCallUpdateOneRequiredWithoutPresencesNestedInput = {
    create?: XOR<RollCallCreateWithoutPresencesInput, RollCallUncheckedCreateWithoutPresencesInput>
    connectOrCreate?: RollCallCreateOrConnectWithoutPresencesInput
    upsert?: RollCallUpsertWithoutPresencesInput
    connect?: RollCallWhereUniqueInput
    update?: XOR<XOR<RollCallUpdateToOneWithWhereWithoutPresencesInput, RollCallUpdateWithoutPresencesInput>, RollCallUncheckedUpdateWithoutPresencesInput>
  }

  export type ClientUpdateOneWithoutPresencesNestedInput = {
    create?: XOR<ClientCreateWithoutPresencesInput, ClientUncheckedCreateWithoutPresencesInput>
    connectOrCreate?: ClientCreateOrConnectWithoutPresencesInput
    upsert?: ClientUpsertWithoutPresencesInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutPresencesInput, ClientUpdateWithoutPresencesInput>, ClientUncheckedUpdateWithoutPresencesInput>
  }

  export type ChildUpdateOneWithoutPresencesNestedInput = {
    create?: XOR<ChildCreateWithoutPresencesInput, ChildUncheckedCreateWithoutPresencesInput>
    connectOrCreate?: ChildCreateOrConnectWithoutPresencesInput
    upsert?: ChildUpsertWithoutPresencesInput
    disconnect?: ChildWhereInput | boolean
    delete?: ChildWhereInput | boolean
    connect?: ChildWhereUniqueInput
    update?: XOR<XOR<ChildUpdateToOneWithWhereWithoutPresencesInput, ChildUpdateWithoutPresencesInput>, ChildUncheckedUpdateWithoutPresencesInput>
  }

  export type ClientContractCreateNestedManyWithoutContractInput = {
    create?: XOR<ClientContractCreateWithoutContractInput, ClientContractUncheckedCreateWithoutContractInput> | ClientContractCreateWithoutContractInput[] | ClientContractUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ClientContractCreateOrConnectWithoutContractInput | ClientContractCreateOrConnectWithoutContractInput[]
    createMany?: ClientContractCreateManyContractInputEnvelope
    connect?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
  }

  export type ContractPhotographerCreateNestedManyWithoutContractInput = {
    create?: XOR<ContractPhotographerCreateWithoutContractInput, ContractPhotographerUncheckedCreateWithoutContractInput> | ContractPhotographerCreateWithoutContractInput[] | ContractPhotographerUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractPhotographerCreateOrConnectWithoutContractInput | ContractPhotographerCreateOrConnectWithoutContractInput[]
    createMany?: ContractPhotographerCreateManyContractInputEnvelope
    connect?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutVideoContractsInput = {
    create?: XOR<UserCreateWithoutVideoContractsInput, UserUncheckedCreateWithoutVideoContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVideoContractsInput
    connect?: UserWhereUniqueInput
  }

  export type PackageCreateNestedOneWithoutContractsInput = {
    create?: XOR<PackageCreateWithoutContractsInput, PackageUncheckedCreateWithoutContractsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutContractsInput
    connect?: PackageWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutContractInput = {
    create?: XOR<TransactionCreateWithoutContractInput, TransactionUncheckedCreateWithoutContractInput> | TransactionCreateWithoutContractInput[] | TransactionUncheckedCreateWithoutContractInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutContractInput | TransactionCreateOrConnectWithoutContractInput[]
    createMany?: TransactionCreateManyContractInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type ClientContractUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<ClientContractCreateWithoutContractInput, ClientContractUncheckedCreateWithoutContractInput> | ClientContractCreateWithoutContractInput[] | ClientContractUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ClientContractCreateOrConnectWithoutContractInput | ClientContractCreateOrConnectWithoutContractInput[]
    createMany?: ClientContractCreateManyContractInputEnvelope
    connect?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
  }

  export type ContractPhotographerUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<ContractPhotographerCreateWithoutContractInput, ContractPhotographerUncheckedCreateWithoutContractInput> | ContractPhotographerCreateWithoutContractInput[] | ContractPhotographerUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractPhotographerCreateOrConnectWithoutContractInput | ContractPhotographerCreateOrConnectWithoutContractInput[]
    createMany?: ContractPhotographerCreateManyContractInputEnvelope
    connect?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<TransactionCreateWithoutContractInput, TransactionUncheckedCreateWithoutContractInput> | TransactionCreateWithoutContractInput[] | TransactionUncheckedCreateWithoutContractInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutContractInput | TransactionCreateOrConnectWithoutContractInput[]
    createMany?: TransactionCreateManyContractInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type EnumContractTypeFieldUpdateOperationsInput = {
    set?: $Enums.ContractType
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumSignatureStatusFieldUpdateOperationsInput = {
    set?: $Enums.SignatureStatus
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type EnumGeneralStatusFieldUpdateOperationsInput = {
    set?: $Enums.GeneralStatus
  }

  export type ClientContractUpdateManyWithoutContractNestedInput = {
    create?: XOR<ClientContractCreateWithoutContractInput, ClientContractUncheckedCreateWithoutContractInput> | ClientContractCreateWithoutContractInput[] | ClientContractUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ClientContractCreateOrConnectWithoutContractInput | ClientContractCreateOrConnectWithoutContractInput[]
    upsert?: ClientContractUpsertWithWhereUniqueWithoutContractInput | ClientContractUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ClientContractCreateManyContractInputEnvelope
    set?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    disconnect?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    delete?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    connect?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    update?: ClientContractUpdateWithWhereUniqueWithoutContractInput | ClientContractUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ClientContractUpdateManyWithWhereWithoutContractInput | ClientContractUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ClientContractScalarWhereInput | ClientContractScalarWhereInput[]
  }

  export type ContractPhotographerUpdateManyWithoutContractNestedInput = {
    create?: XOR<ContractPhotographerCreateWithoutContractInput, ContractPhotographerUncheckedCreateWithoutContractInput> | ContractPhotographerCreateWithoutContractInput[] | ContractPhotographerUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractPhotographerCreateOrConnectWithoutContractInput | ContractPhotographerCreateOrConnectWithoutContractInput[]
    upsert?: ContractPhotographerUpsertWithWhereUniqueWithoutContractInput | ContractPhotographerUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ContractPhotographerCreateManyContractInputEnvelope
    set?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    disconnect?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    delete?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    connect?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    update?: ContractPhotographerUpdateWithWhereUniqueWithoutContractInput | ContractPhotographerUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ContractPhotographerUpdateManyWithWhereWithoutContractInput | ContractPhotographerUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ContractPhotographerScalarWhereInput | ContractPhotographerScalarWhereInput[]
  }

  export type UserUpdateOneWithoutVideoContractsNestedInput = {
    create?: XOR<UserCreateWithoutVideoContractsInput, UserUncheckedCreateWithoutVideoContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVideoContractsInput
    upsert?: UserUpsertWithoutVideoContractsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVideoContractsInput, UserUpdateWithoutVideoContractsInput>, UserUncheckedUpdateWithoutVideoContractsInput>
  }

  export type PackageUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<PackageCreateWithoutContractsInput, PackageUncheckedCreateWithoutContractsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutContractsInput
    upsert?: PackageUpsertWithoutContractsInput
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutContractsInput, PackageUpdateWithoutContractsInput>, PackageUncheckedUpdateWithoutContractsInput>
  }

  export type TransactionUpdateManyWithoutContractNestedInput = {
    create?: XOR<TransactionCreateWithoutContractInput, TransactionUncheckedCreateWithoutContractInput> | TransactionCreateWithoutContractInput[] | TransactionUncheckedCreateWithoutContractInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutContractInput | TransactionCreateOrConnectWithoutContractInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutContractInput | TransactionUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: TransactionCreateManyContractInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutContractInput | TransactionUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutContractInput | TransactionUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type ClientContractUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<ClientContractCreateWithoutContractInput, ClientContractUncheckedCreateWithoutContractInput> | ClientContractCreateWithoutContractInput[] | ClientContractUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ClientContractCreateOrConnectWithoutContractInput | ClientContractCreateOrConnectWithoutContractInput[]
    upsert?: ClientContractUpsertWithWhereUniqueWithoutContractInput | ClientContractUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ClientContractCreateManyContractInputEnvelope
    set?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    disconnect?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    delete?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    connect?: ClientContractWhereUniqueInput | ClientContractWhereUniqueInput[]
    update?: ClientContractUpdateWithWhereUniqueWithoutContractInput | ClientContractUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ClientContractUpdateManyWithWhereWithoutContractInput | ClientContractUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ClientContractScalarWhereInput | ClientContractScalarWhereInput[]
  }

  export type ContractPhotographerUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<ContractPhotographerCreateWithoutContractInput, ContractPhotographerUncheckedCreateWithoutContractInput> | ContractPhotographerCreateWithoutContractInput[] | ContractPhotographerUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ContractPhotographerCreateOrConnectWithoutContractInput | ContractPhotographerCreateOrConnectWithoutContractInput[]
    upsert?: ContractPhotographerUpsertWithWhereUniqueWithoutContractInput | ContractPhotographerUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ContractPhotographerCreateManyContractInputEnvelope
    set?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    disconnect?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    delete?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    connect?: ContractPhotographerWhereUniqueInput | ContractPhotographerWhereUniqueInput[]
    update?: ContractPhotographerUpdateWithWhereUniqueWithoutContractInput | ContractPhotographerUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ContractPhotographerUpdateManyWithWhereWithoutContractInput | ContractPhotographerUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ContractPhotographerScalarWhereInput | ContractPhotographerScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<TransactionCreateWithoutContractInput, TransactionUncheckedCreateWithoutContractInput> | TransactionCreateWithoutContractInput[] | TransactionUncheckedCreateWithoutContractInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutContractInput | TransactionCreateOrConnectWithoutContractInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutContractInput | TransactionUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: TransactionCreateManyContractInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutContractInput | TransactionUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutContractInput | TransactionUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type ContractCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<ContractCreateWithoutTransactionsInput, ContractUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutTransactionsInput
    connect?: ContractWhereUniqueInput
  }

  export type YogaClassCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<YogaClassCreateWithoutTransactionsInput, YogaClassUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: YogaClassCreateOrConnectWithoutTransactionsInput
    connect?: YogaClassWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<ClientCreateWithoutTransactionsInput, ClientUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutTransactionsInput
    connect?: ClientWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type ContractUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<ContractCreateWithoutTransactionsInput, ContractUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutTransactionsInput
    upsert?: ContractUpsertWithoutTransactionsInput
    disconnect?: ContractWhereInput | boolean
    delete?: ContractWhereInput | boolean
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutTransactionsInput, ContractUpdateWithoutTransactionsInput>, ContractUncheckedUpdateWithoutTransactionsInput>
  }

  export type YogaClassUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<YogaClassCreateWithoutTransactionsInput, YogaClassUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: YogaClassCreateOrConnectWithoutTransactionsInput
    upsert?: YogaClassUpsertWithoutTransactionsInput
    disconnect?: YogaClassWhereInput | boolean
    delete?: YogaClassWhereInput | boolean
    connect?: YogaClassWhereUniqueInput
    update?: XOR<XOR<YogaClassUpdateToOneWithWhereWithoutTransactionsInput, YogaClassUpdateWithoutTransactionsInput>, YogaClassUncheckedUpdateWithoutTransactionsInput>
  }

  export type ClientUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<ClientCreateWithoutTransactionsInput, ClientUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutTransactionsInput
    upsert?: ClientUpsertWithoutTransactionsInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutTransactionsInput, ClientUpdateWithoutTransactionsInput>, ClientUncheckedUpdateWithoutTransactionsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutPhotoContractsInput = {
    create?: XOR<UserCreateWithoutPhotoContractsInput, UserUncheckedCreateWithoutPhotoContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPhotoContractsInput
    connect?: UserWhereUniqueInput
  }

  export type ContractCreateNestedOneWithoutPhotographersInput = {
    create?: XOR<ContractCreateWithoutPhotographersInput, ContractUncheckedCreateWithoutPhotographersInput>
    connectOrCreate?: ContractCreateOrConnectWithoutPhotographersInput
    connect?: ContractWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPhotoContractsNestedInput = {
    create?: XOR<UserCreateWithoutPhotoContractsInput, UserUncheckedCreateWithoutPhotoContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPhotoContractsInput
    upsert?: UserUpsertWithoutPhotoContractsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPhotoContractsInput, UserUpdateWithoutPhotoContractsInput>, UserUncheckedUpdateWithoutPhotoContractsInput>
  }

  export type ContractUpdateOneRequiredWithoutPhotographersNestedInput = {
    create?: XOR<ContractCreateWithoutPhotographersInput, ContractUncheckedCreateWithoutPhotographersInput>
    connectOrCreate?: ContractCreateOrConnectWithoutPhotographersInput
    upsert?: ContractUpsertWithoutPhotographersInput
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutPhotographersInput, ContractUpdateWithoutPhotographersInput>, ContractUncheckedUpdateWithoutPhotographersInput>
  }

  export type ClientCreateNestedOneWithoutContractsInput = {
    create?: XOR<ClientCreateWithoutContractsInput, ClientUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutContractsInput
    connect?: ClientWhereUniqueInput
  }

  export type ContractCreateNestedOneWithoutClientsInput = {
    create?: XOR<ContractCreateWithoutClientsInput, ContractUncheckedCreateWithoutClientsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutClientsInput
    connect?: ContractWhereUniqueInput
  }

  export type ClientUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<ClientCreateWithoutContractsInput, ClientUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutContractsInput
    upsert?: ClientUpsertWithoutContractsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutContractsInput, ClientUpdateWithoutContractsInput>, ClientUncheckedUpdateWithoutContractsInput>
  }

  export type ContractUpdateOneRequiredWithoutClientsNestedInput = {
    create?: XOR<ContractCreateWithoutClientsInput, ContractUncheckedCreateWithoutClientsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutClientsInput
    upsert?: ContractUpsertWithoutClientsInput
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutClientsInput, ContractUpdateWithoutClientsInput>, ContractUncheckedUpdateWithoutClientsInput>
  }

  export type ClientCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<ClientCreateWithoutNotificationsInput, ClientUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutNotificationsInput
    connect?: ClientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type ClientUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<ClientCreateWithoutNotificationsInput, ClientUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutNotificationsInput
    upsert?: ClientUpsertWithoutNotificationsInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutNotificationsInput, ClientUpdateWithoutNotificationsInput>, ClientUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type ContractCreateNestedManyWithoutPackageInput = {
    create?: XOR<ContractCreateWithoutPackageInput, ContractUncheckedCreateWithoutPackageInput> | ContractCreateWithoutPackageInput[] | ContractUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutPackageInput | ContractCreateOrConnectWithoutPackageInput[]
    createMany?: ContractCreateManyPackageInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<ContractCreateWithoutPackageInput, ContractUncheckedCreateWithoutPackageInput> | ContractCreateWithoutPackageInput[] | ContractUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutPackageInput | ContractCreateOrConnectWithoutPackageInput[]
    createMany?: ContractCreateManyPackageInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type ContractUpdateManyWithoutPackageNestedInput = {
    create?: XOR<ContractCreateWithoutPackageInput, ContractUncheckedCreateWithoutPackageInput> | ContractCreateWithoutPackageInput[] | ContractUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutPackageInput | ContractCreateOrConnectWithoutPackageInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutPackageInput | ContractUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: ContractCreateManyPackageInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutPackageInput | ContractUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutPackageInput | ContractUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<ContractCreateWithoutPackageInput, ContractUncheckedCreateWithoutPackageInput> | ContractCreateWithoutPackageInput[] | ContractUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutPackageInput | ContractCreateOrConnectWithoutPackageInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutPackageInput | ContractUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: ContractCreateManyPackageInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutPackageInput | ContractUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutPackageInput | ContractUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumYogaClassTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.YogaClassType | EnumYogaClassTypeFieldRefInput<$PrismaModel>
    in?: $Enums.YogaClassType[]
    notIn?: $Enums.YogaClassType[]
    not?: NestedEnumYogaClassTypeFilter<$PrismaModel> | $Enums.YogaClassType
  }

  export type NestedEnumYogaClassStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.YogaClassStatus | EnumYogaClassStatusFieldRefInput<$PrismaModel>
    in?: $Enums.YogaClassStatus[]
    notIn?: $Enums.YogaClassStatus[]
    not?: NestedEnumYogaClassStatusFilter<$PrismaModel> | $Enums.YogaClassStatus
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumYogaClassTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YogaClassType | EnumYogaClassTypeFieldRefInput<$PrismaModel>
    in?: $Enums.YogaClassType[]
    notIn?: $Enums.YogaClassType[]
    not?: NestedEnumYogaClassTypeWithAggregatesFilter<$PrismaModel> | $Enums.YogaClassType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumYogaClassTypeFilter<$PrismaModel>
    _max?: NestedEnumYogaClassTypeFilter<$PrismaModel>
  }

  export type NestedEnumYogaClassStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YogaClassStatus | EnumYogaClassStatusFieldRefInput<$PrismaModel>
    in?: $Enums.YogaClassStatus[]
    notIn?: $Enums.YogaClassStatus[]
    not?: NestedEnumYogaClassStatusWithAggregatesFilter<$PrismaModel> | $Enums.YogaClassStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumYogaClassStatusFilter<$PrismaModel>
    _max?: NestedEnumYogaClassStatusFilter<$PrismaModel>
  }

  export type NestedEnumStudentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StudentType | EnumStudentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StudentType[]
    notIn?: $Enums.StudentType[]
    not?: NestedEnumStudentTypeFilter<$PrismaModel> | $Enums.StudentType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumStudentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StudentType | EnumStudentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StudentType[]
    notIn?: $Enums.StudentType[]
    not?: NestedEnumStudentTypeWithAggregatesFilter<$PrismaModel> | $Enums.StudentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStudentTypeFilter<$PrismaModel>
    _max?: NestedEnumStudentTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumContractTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[]
    notIn?: $Enums.ContractType[]
    not?: NestedEnumContractTypeFilter<$PrismaModel> | $Enums.ContractType
  }

  export type NestedEnumSignatureStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SignatureStatus | EnumSignatureStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SignatureStatus[]
    notIn?: $Enums.SignatureStatus[]
    not?: NestedEnumSignatureStatusFilter<$PrismaModel> | $Enums.SignatureStatus
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumGeneralStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GeneralStatus | EnumGeneralStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GeneralStatus[]
    notIn?: $Enums.GeneralStatus[]
    not?: NestedEnumGeneralStatusFilter<$PrismaModel> | $Enums.GeneralStatus
  }

  export type NestedEnumContractTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[]
    notIn?: $Enums.ContractType[]
    not?: NestedEnumContractTypeWithAggregatesFilter<$PrismaModel> | $Enums.ContractType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractTypeFilter<$PrismaModel>
    _max?: NestedEnumContractTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumSignatureStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SignatureStatus | EnumSignatureStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SignatureStatus[]
    notIn?: $Enums.SignatureStatus[]
    not?: NestedEnumSignatureStatusWithAggregatesFilter<$PrismaModel> | $Enums.SignatureStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSignatureStatusFilter<$PrismaModel>
    _max?: NestedEnumSignatureStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[]
    notIn?: $Enums.PaymentStatus[]
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumGeneralStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GeneralStatus | EnumGeneralStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GeneralStatus[]
    notIn?: $Enums.GeneralStatus[]
    not?: NestedEnumGeneralStatusWithAggregatesFilter<$PrismaModel> | $Enums.GeneralStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGeneralStatusFilter<$PrismaModel>
    _max?: NestedEnumGeneralStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    isRead?: boolean
    type: $Enums.NotificationType
    createdAt?: Date | string
    updatedAt?: Date | string
    client?: ClientCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    isRead?: boolean
    type: $Enums.NotificationType
    clientId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleCreateWithoutUserInput = {
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserRoleUncheckedCreateWithoutUserInput = {
    roleId: string
  }

  export type UserRoleCreateOrConnectWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleCreateManyUserInputEnvelope = {
    data: UserRoleCreateManyUserInput | UserRoleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type YogaClassCreateWithoutInstructorInput = {
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutClassesInput
    transactions?: TransactionCreateNestedManyWithoutYogaClassInput
    adultStudents?: YogaAdultStudentCreateNestedManyWithoutYogaClassInput
    childStudents?: YogaChildStudentCreateNestedManyWithoutYogaClassInput
    rollCall?: RollCallCreateNestedOneWithoutClassInput
  }

  export type YogaClassUncheckedCreateWithoutInstructorInput = {
    id?: number
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    locationId: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutYogaClassInput
    adultStudents?: YogaAdultStudentUncheckedCreateNestedManyWithoutYogaClassInput
    childStudents?: YogaChildStudentUncheckedCreateNestedManyWithoutYogaClassInput
    rollCall?: RollCallUncheckedCreateNestedOneWithoutClassInput
  }

  export type YogaClassCreateOrConnectWithoutInstructorInput = {
    where: YogaClassWhereUniqueInput
    create: XOR<YogaClassCreateWithoutInstructorInput, YogaClassUncheckedCreateWithoutInstructorInput>
  }

  export type YogaClassCreateManyInstructorInputEnvelope = {
    data: YogaClassCreateManyInstructorInput | YogaClassCreateManyInstructorInput[]
    skipDuplicates?: boolean
  }

  export type ContractCreateWithoutVideomakerInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientContractCreateNestedManyWithoutContractInput
    photographers?: ContractPhotographerCreateNestedManyWithoutContractInput
    package: PackageCreateNestedOneWithoutContractsInput
    transactions?: TransactionCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutVideomakerInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    packageId: number
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientContractUncheckedCreateNestedManyWithoutContractInput
    photographers?: ContractPhotographerUncheckedCreateNestedManyWithoutContractInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutVideomakerInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutVideomakerInput, ContractUncheckedCreateWithoutVideomakerInput>
  }

  export type ContractCreateManyVideomakerInputEnvelope = {
    data: ContractCreateManyVideomakerInput | ContractCreateManyVideomakerInput[]
    skipDuplicates?: boolean
  }

  export type ContractPhotographerCreateWithoutPhotographerInput = {
    contract: ContractCreateNestedOneWithoutPhotographersInput
  }

  export type ContractPhotographerUncheckedCreateWithoutPhotographerInput = {
    contractId: string
  }

  export type ContractPhotographerCreateOrConnectWithoutPhotographerInput = {
    where: ContractPhotographerWhereUniqueInput
    create: XOR<ContractPhotographerCreateWithoutPhotographerInput, ContractPhotographerUncheckedCreateWithoutPhotographerInput>
  }

  export type ContractPhotographerCreateManyPhotographerInputEnvelope = {
    data: ContractPhotographerCreateManyPhotographerInput | ContractPhotographerCreateManyPhotographerInput[]
    skipDuplicates?: boolean
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    clientId?: StringNullableFilter<"Notification"> | string | null
    userId?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type UserRoleUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutUserInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRoleScalarWhereInput = {
    AND?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    OR?: UserRoleScalarWhereInput[]
    NOT?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
  }

  export type YogaClassUpsertWithWhereUniqueWithoutInstructorInput = {
    where: YogaClassWhereUniqueInput
    update: XOR<YogaClassUpdateWithoutInstructorInput, YogaClassUncheckedUpdateWithoutInstructorInput>
    create: XOR<YogaClassCreateWithoutInstructorInput, YogaClassUncheckedCreateWithoutInstructorInput>
  }

  export type YogaClassUpdateWithWhereUniqueWithoutInstructorInput = {
    where: YogaClassWhereUniqueInput
    data: XOR<YogaClassUpdateWithoutInstructorInput, YogaClassUncheckedUpdateWithoutInstructorInput>
  }

  export type YogaClassUpdateManyWithWhereWithoutInstructorInput = {
    where: YogaClassScalarWhereInput
    data: XOR<YogaClassUpdateManyMutationInput, YogaClassUncheckedUpdateManyWithoutInstructorInput>
  }

  export type YogaClassScalarWhereInput = {
    AND?: YogaClassScalarWhereInput | YogaClassScalarWhereInput[]
    OR?: YogaClassScalarWhereInput[]
    NOT?: YogaClassScalarWhereInput | YogaClassScalarWhereInput[]
    id?: IntFilter<"YogaClass"> | number
    type?: EnumYogaClassTypeFilter<"YogaClass"> | $Enums.YogaClassType
    status?: EnumYogaClassStatusFilter<"YogaClass"> | $Enums.YogaClassStatus
    locationId?: IntFilter<"YogaClass"> | number
    date?: DateTimeFilter<"YogaClass"> | Date | string
    instructorId?: StringFilter<"YogaClass"> | string
    createdAt?: DateTimeFilter<"YogaClass"> | Date | string
    updatedAt?: DateTimeFilter<"YogaClass"> | Date | string
  }

  export type ContractUpsertWithWhereUniqueWithoutVideomakerInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutVideomakerInput, ContractUncheckedUpdateWithoutVideomakerInput>
    create: XOR<ContractCreateWithoutVideomakerInput, ContractUncheckedCreateWithoutVideomakerInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutVideomakerInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutVideomakerInput, ContractUncheckedUpdateWithoutVideomakerInput>
  }

  export type ContractUpdateManyWithWhereWithoutVideomakerInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutVideomakerInput>
  }

  export type ContractScalarWhereInput = {
    AND?: ContractScalarWhereInput | ContractScalarWhereInput[]
    OR?: ContractScalarWhereInput[]
    NOT?: ContractScalarWhereInput | ContractScalarWhereInput[]
    id?: StringFilter<"Contract"> | string
    name?: StringFilter<"Contract"> | string
    type?: EnumContractTypeFilter<"Contract"> | $Enums.ContractType
    address?: StringFilter<"Contract"> | string
    neighborhood?: StringFilter<"Contract"> | string
    city?: StringFilter<"Contract"> | string
    date?: DateTimeFilter<"Contract"> | Date | string
    eventStartTime?: DateTimeFilter<"Contract"> | Date | string
    commutingFee?: FloatFilter<"Contract"> | number
    discountPercentage?: FloatFilter<"Contract"> | number
    paymentDueDate?: DateTimeFilter<"Contract"> | Date | string
    observations?: StringFilter<"Contract"> | string
    fileUrl?: StringNullableFilter<"Contract"> | string | null
    videomakerId?: StringNullableFilter<"Contract"> | string | null
    packageId?: IntFilter<"Contract"> | number
    isSigned?: EnumSignatureStatusFilter<"Contract"> | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFilter<"Contract"> | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFilter<"Contract"> | $Enums.GeneralStatus
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
  }

  export type ContractPhotographerUpsertWithWhereUniqueWithoutPhotographerInput = {
    where: ContractPhotographerWhereUniqueInput
    update: XOR<ContractPhotographerUpdateWithoutPhotographerInput, ContractPhotographerUncheckedUpdateWithoutPhotographerInput>
    create: XOR<ContractPhotographerCreateWithoutPhotographerInput, ContractPhotographerUncheckedCreateWithoutPhotographerInput>
  }

  export type ContractPhotographerUpdateWithWhereUniqueWithoutPhotographerInput = {
    where: ContractPhotographerWhereUniqueInput
    data: XOR<ContractPhotographerUpdateWithoutPhotographerInput, ContractPhotographerUncheckedUpdateWithoutPhotographerInput>
  }

  export type ContractPhotographerUpdateManyWithWhereWithoutPhotographerInput = {
    where: ContractPhotographerScalarWhereInput
    data: XOR<ContractPhotographerUpdateManyMutationInput, ContractPhotographerUncheckedUpdateManyWithoutPhotographerInput>
  }

  export type ContractPhotographerScalarWhereInput = {
    AND?: ContractPhotographerScalarWhereInput | ContractPhotographerScalarWhereInput[]
    OR?: ContractPhotographerScalarWhereInput[]
    NOT?: ContractPhotographerScalarWhereInput | ContractPhotographerScalarWhereInput[]
    photographerId?: StringFilter<"ContractPhotographer"> | string
    contractId?: StringFilter<"ContractPhotographer"> | string
  }

  export type UserRoleCreateWithoutRoleInput = {
    user: UserCreateNestedOneWithoutRolesInput
  }

  export type UserRoleUncheckedCreateWithoutRoleInput = {
    userId: string
  }

  export type UserRoleCreateOrConnectWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleCreateManyRoleInputEnvelope = {
    data: UserRoleCreateManyRoleInput | UserRoleCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutRoleInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserCreateWithoutRolesInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationCreateNestedManyWithoutUserInput
    classes?: YogaClassCreateNestedManyWithoutInstructorInput
    videoContracts?: ContractCreateNestedManyWithoutVideomakerInput
    photoContracts?: ContractPhotographerCreateNestedManyWithoutPhotographerInput
  }

  export type UserUncheckedCreateWithoutRolesInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    classes?: YogaClassUncheckedCreateNestedManyWithoutInstructorInput
    videoContracts?: ContractUncheckedCreateNestedManyWithoutVideomakerInput
    photoContracts?: ContractPhotographerUncheckedCreateNestedManyWithoutPhotographerInput
  }

  export type UserCreateOrConnectWithoutRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type RoleCreateWithoutUsersInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutRolesInput = {
    update: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
  }

  export type UserUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    classes?: YogaClassUpdateManyWithoutInstructorNestedInput
    videoContracts?: ContractUpdateManyWithoutVideomakerNestedInput
    photoContracts?: ContractPhotographerUpdateManyWithoutPhotographerNestedInput
  }

  export type UserUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    classes?: YogaClassUncheckedUpdateManyWithoutInstructorNestedInput
    videoContracts?: ContractUncheckedUpdateManyWithoutVideomakerNestedInput
    photoContracts?: ContractPhotographerUncheckedUpdateManyWithoutPhotographerNestedInput
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyCreateWithoutClientInput = {
    child: ChildCreateNestedOneWithoutParentsInput
  }

  export type FamilyUncheckedCreateWithoutClientInput = {
    childId: string
  }

  export type FamilyCreateOrConnectWithoutClientInput = {
    where: FamilyWhereUniqueInput
    create: XOR<FamilyCreateWithoutClientInput, FamilyUncheckedCreateWithoutClientInput>
  }

  export type FamilyCreateManyClientInputEnvelope = {
    data: FamilyCreateManyClientInput | FamilyCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type ClientContractCreateWithoutClientInput = {
    assignedAt?: Date | string
    contract: ContractCreateNestedOneWithoutClientsInput
  }

  export type ClientContractUncheckedCreateWithoutClientInput = {
    contractId: string
    assignedAt?: Date | string
  }

  export type ClientContractCreateOrConnectWithoutClientInput = {
    where: ClientContractWhereUniqueInput
    create: XOR<ClientContractCreateWithoutClientInput, ClientContractUncheckedCreateWithoutClientInput>
  }

  export type ClientContractCreateManyClientInputEnvelope = {
    data: ClientContractCreateManyClientInput | ClientContractCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type YogaAdultStudentCreateWithoutStudentInput = {
    yogaClass: YogaClassCreateNestedOneWithoutAdultStudentsInput
  }

  export type YogaAdultStudentUncheckedCreateWithoutStudentInput = {
    yogaClassId: number
  }

  export type YogaAdultStudentCreateOrConnectWithoutStudentInput = {
    where: YogaAdultStudentWhereUniqueInput
    create: XOR<YogaAdultStudentCreateWithoutStudentInput, YogaAdultStudentUncheckedCreateWithoutStudentInput>
  }

  export type YogaAdultStudentCreateManyStudentInputEnvelope = {
    data: YogaAdultStudentCreateManyStudentInput | YogaAdultStudentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type PresenceCreateWithoutAdultStudentInput = {
    studentType: $Enums.StudentType
    isPresent: boolean
    absenceReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rollCall: RollCallCreateNestedOneWithoutPresencesInput
    childStudent?: ChildCreateNestedOneWithoutPresencesInput
  }

  export type PresenceUncheckedCreateWithoutAdultStudentInput = {
    id?: number
    studentType: $Enums.StudentType
    rollCallId: number
    childStudentId?: string | null
    isPresent: boolean
    absenceReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PresenceCreateOrConnectWithoutAdultStudentInput = {
    where: PresenceWhereUniqueInput
    create: XOR<PresenceCreateWithoutAdultStudentInput, PresenceUncheckedCreateWithoutAdultStudentInput>
  }

  export type PresenceCreateManyAdultStudentInputEnvelope = {
    data: PresenceCreateManyAdultStudentInput | PresenceCreateManyAdultStudentInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutClientInput = {
    id?: string
    amount: number
    date?: Date | string
    description?: string | null
    method: $Enums.PaymentMethod
    isPaid?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    contract?: ContractCreateNestedOneWithoutTransactionsInput
    yogaClass?: YogaClassCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutClientInput = {
    id?: string
    amount: number
    date?: Date | string
    description?: string | null
    method: $Enums.PaymentMethod
    isPaid?: boolean
    contractId?: string | null
    yogaClassId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutClientInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutClientInput, TransactionUncheckedCreateWithoutClientInput>
  }

  export type TransactionCreateManyClientInputEnvelope = {
    data: TransactionCreateManyClientInput | TransactionCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutClientInput = {
    id?: string
    title: string
    message: string
    isRead?: boolean
    type: $Enums.NotificationType
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutClientInput = {
    id?: string
    title: string
    message: string
    isRead?: boolean
    type: $Enums.NotificationType
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutClientInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutClientInput, NotificationUncheckedCreateWithoutClientInput>
  }

  export type NotificationCreateManyClientInputEnvelope = {
    data: NotificationCreateManyClientInput | NotificationCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type FamilyUpsertWithWhereUniqueWithoutClientInput = {
    where: FamilyWhereUniqueInput
    update: XOR<FamilyUpdateWithoutClientInput, FamilyUncheckedUpdateWithoutClientInput>
    create: XOR<FamilyCreateWithoutClientInput, FamilyUncheckedCreateWithoutClientInput>
  }

  export type FamilyUpdateWithWhereUniqueWithoutClientInput = {
    where: FamilyWhereUniqueInput
    data: XOR<FamilyUpdateWithoutClientInput, FamilyUncheckedUpdateWithoutClientInput>
  }

  export type FamilyUpdateManyWithWhereWithoutClientInput = {
    where: FamilyScalarWhereInput
    data: XOR<FamilyUpdateManyMutationInput, FamilyUncheckedUpdateManyWithoutClientInput>
  }

  export type FamilyScalarWhereInput = {
    AND?: FamilyScalarWhereInput | FamilyScalarWhereInput[]
    OR?: FamilyScalarWhereInput[]
    NOT?: FamilyScalarWhereInput | FamilyScalarWhereInput[]
    clientId?: StringFilter<"Family"> | string
    childId?: StringFilter<"Family"> | string
  }

  export type ClientContractUpsertWithWhereUniqueWithoutClientInput = {
    where: ClientContractWhereUniqueInput
    update: XOR<ClientContractUpdateWithoutClientInput, ClientContractUncheckedUpdateWithoutClientInput>
    create: XOR<ClientContractCreateWithoutClientInput, ClientContractUncheckedCreateWithoutClientInput>
  }

  export type ClientContractUpdateWithWhereUniqueWithoutClientInput = {
    where: ClientContractWhereUniqueInput
    data: XOR<ClientContractUpdateWithoutClientInput, ClientContractUncheckedUpdateWithoutClientInput>
  }

  export type ClientContractUpdateManyWithWhereWithoutClientInput = {
    where: ClientContractScalarWhereInput
    data: XOR<ClientContractUpdateManyMutationInput, ClientContractUncheckedUpdateManyWithoutClientInput>
  }

  export type ClientContractScalarWhereInput = {
    AND?: ClientContractScalarWhereInput | ClientContractScalarWhereInput[]
    OR?: ClientContractScalarWhereInput[]
    NOT?: ClientContractScalarWhereInput | ClientContractScalarWhereInput[]
    clientId?: StringFilter<"ClientContract"> | string
    contractId?: StringFilter<"ClientContract"> | string
    assignedAt?: DateTimeFilter<"ClientContract"> | Date | string
  }

  export type YogaAdultStudentUpsertWithWhereUniqueWithoutStudentInput = {
    where: YogaAdultStudentWhereUniqueInput
    update: XOR<YogaAdultStudentUpdateWithoutStudentInput, YogaAdultStudentUncheckedUpdateWithoutStudentInput>
    create: XOR<YogaAdultStudentCreateWithoutStudentInput, YogaAdultStudentUncheckedCreateWithoutStudentInput>
  }

  export type YogaAdultStudentUpdateWithWhereUniqueWithoutStudentInput = {
    where: YogaAdultStudentWhereUniqueInput
    data: XOR<YogaAdultStudentUpdateWithoutStudentInput, YogaAdultStudentUncheckedUpdateWithoutStudentInput>
  }

  export type YogaAdultStudentUpdateManyWithWhereWithoutStudentInput = {
    where: YogaAdultStudentScalarWhereInput
    data: XOR<YogaAdultStudentUpdateManyMutationInput, YogaAdultStudentUncheckedUpdateManyWithoutStudentInput>
  }

  export type YogaAdultStudentScalarWhereInput = {
    AND?: YogaAdultStudentScalarWhereInput | YogaAdultStudentScalarWhereInput[]
    OR?: YogaAdultStudentScalarWhereInput[]
    NOT?: YogaAdultStudentScalarWhereInput | YogaAdultStudentScalarWhereInput[]
    yogaClassId?: IntFilter<"YogaAdultStudent"> | number
    studentId?: StringFilter<"YogaAdultStudent"> | string
  }

  export type PresenceUpsertWithWhereUniqueWithoutAdultStudentInput = {
    where: PresenceWhereUniqueInput
    update: XOR<PresenceUpdateWithoutAdultStudentInput, PresenceUncheckedUpdateWithoutAdultStudentInput>
    create: XOR<PresenceCreateWithoutAdultStudentInput, PresenceUncheckedCreateWithoutAdultStudentInput>
  }

  export type PresenceUpdateWithWhereUniqueWithoutAdultStudentInput = {
    where: PresenceWhereUniqueInput
    data: XOR<PresenceUpdateWithoutAdultStudentInput, PresenceUncheckedUpdateWithoutAdultStudentInput>
  }

  export type PresenceUpdateManyWithWhereWithoutAdultStudentInput = {
    where: PresenceScalarWhereInput
    data: XOR<PresenceUpdateManyMutationInput, PresenceUncheckedUpdateManyWithoutAdultStudentInput>
  }

  export type PresenceScalarWhereInput = {
    AND?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
    OR?: PresenceScalarWhereInput[]
    NOT?: PresenceScalarWhereInput | PresenceScalarWhereInput[]
    id?: IntFilter<"Presence"> | number
    studentType?: EnumStudentTypeFilter<"Presence"> | $Enums.StudentType
    rollCallId?: IntFilter<"Presence"> | number
    adultStudentId?: StringNullableFilter<"Presence"> | string | null
    childStudentId?: StringNullableFilter<"Presence"> | string | null
    isPresent?: BoolFilter<"Presence"> | boolean
    absenceReason?: StringNullableFilter<"Presence"> | string | null
    createdAt?: DateTimeFilter<"Presence"> | Date | string
    updatedAt?: DateTimeFilter<"Presence"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutClientInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutClientInput, TransactionUncheckedUpdateWithoutClientInput>
    create: XOR<TransactionCreateWithoutClientInput, TransactionUncheckedCreateWithoutClientInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutClientInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutClientInput, TransactionUncheckedUpdateWithoutClientInput>
  }

  export type TransactionUpdateManyWithWhereWithoutClientInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutClientInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    date?: DateTimeFilter<"Transaction"> | Date | string
    description?: StringNullableFilter<"Transaction"> | string | null
    method?: EnumPaymentMethodFilter<"Transaction"> | $Enums.PaymentMethod
    isPaid?: BoolFilter<"Transaction"> | boolean
    contractId?: StringNullableFilter<"Transaction"> | string | null
    yogaClassId?: IntNullableFilter<"Transaction"> | number | null
    clientId?: StringNullableFilter<"Transaction"> | string | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutClientInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutClientInput, NotificationUncheckedUpdateWithoutClientInput>
    create: XOR<NotificationCreateWithoutClientInput, NotificationUncheckedCreateWithoutClientInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutClientInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutClientInput, NotificationUncheckedUpdateWithoutClientInput>
  }

  export type NotificationUpdateManyWithWhereWithoutClientInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutClientInput>
  }

  export type FamilyCreateWithoutChildInput = {
    client: ClientCreateNestedOneWithoutChildrenInput
  }

  export type FamilyUncheckedCreateWithoutChildInput = {
    clientId: string
  }

  export type FamilyCreateOrConnectWithoutChildInput = {
    where: FamilyWhereUniqueInput
    create: XOR<FamilyCreateWithoutChildInput, FamilyUncheckedCreateWithoutChildInput>
  }

  export type FamilyCreateManyChildInputEnvelope = {
    data: FamilyCreateManyChildInput | FamilyCreateManyChildInput[]
    skipDuplicates?: boolean
  }

  export type YogaChildStudentCreateWithoutStudentInput = {
    yogaClass: YogaClassCreateNestedOneWithoutChildStudentsInput
  }

  export type YogaChildStudentUncheckedCreateWithoutStudentInput = {
    yogaClassId: number
  }

  export type YogaChildStudentCreateOrConnectWithoutStudentInput = {
    where: YogaChildStudentWhereUniqueInput
    create: XOR<YogaChildStudentCreateWithoutStudentInput, YogaChildStudentUncheckedCreateWithoutStudentInput>
  }

  export type YogaChildStudentCreateManyStudentInputEnvelope = {
    data: YogaChildStudentCreateManyStudentInput | YogaChildStudentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type PresenceCreateWithoutChildStudentInput = {
    studentType: $Enums.StudentType
    isPresent: boolean
    absenceReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rollCall: RollCallCreateNestedOneWithoutPresencesInput
    adultStudent?: ClientCreateNestedOneWithoutPresencesInput
  }

  export type PresenceUncheckedCreateWithoutChildStudentInput = {
    id?: number
    studentType: $Enums.StudentType
    rollCallId: number
    adultStudentId?: string | null
    isPresent: boolean
    absenceReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PresenceCreateOrConnectWithoutChildStudentInput = {
    where: PresenceWhereUniqueInput
    create: XOR<PresenceCreateWithoutChildStudentInput, PresenceUncheckedCreateWithoutChildStudentInput>
  }

  export type PresenceCreateManyChildStudentInputEnvelope = {
    data: PresenceCreateManyChildStudentInput | PresenceCreateManyChildStudentInput[]
    skipDuplicates?: boolean
  }

  export type FamilyUpsertWithWhereUniqueWithoutChildInput = {
    where: FamilyWhereUniqueInput
    update: XOR<FamilyUpdateWithoutChildInput, FamilyUncheckedUpdateWithoutChildInput>
    create: XOR<FamilyCreateWithoutChildInput, FamilyUncheckedCreateWithoutChildInput>
  }

  export type FamilyUpdateWithWhereUniqueWithoutChildInput = {
    where: FamilyWhereUniqueInput
    data: XOR<FamilyUpdateWithoutChildInput, FamilyUncheckedUpdateWithoutChildInput>
  }

  export type FamilyUpdateManyWithWhereWithoutChildInput = {
    where: FamilyScalarWhereInput
    data: XOR<FamilyUpdateManyMutationInput, FamilyUncheckedUpdateManyWithoutChildInput>
  }

  export type YogaChildStudentUpsertWithWhereUniqueWithoutStudentInput = {
    where: YogaChildStudentWhereUniqueInput
    update: XOR<YogaChildStudentUpdateWithoutStudentInput, YogaChildStudentUncheckedUpdateWithoutStudentInput>
    create: XOR<YogaChildStudentCreateWithoutStudentInput, YogaChildStudentUncheckedCreateWithoutStudentInput>
  }

  export type YogaChildStudentUpdateWithWhereUniqueWithoutStudentInput = {
    where: YogaChildStudentWhereUniqueInput
    data: XOR<YogaChildStudentUpdateWithoutStudentInput, YogaChildStudentUncheckedUpdateWithoutStudentInput>
  }

  export type YogaChildStudentUpdateManyWithWhereWithoutStudentInput = {
    where: YogaChildStudentScalarWhereInput
    data: XOR<YogaChildStudentUpdateManyMutationInput, YogaChildStudentUncheckedUpdateManyWithoutStudentInput>
  }

  export type YogaChildStudentScalarWhereInput = {
    AND?: YogaChildStudentScalarWhereInput | YogaChildStudentScalarWhereInput[]
    OR?: YogaChildStudentScalarWhereInput[]
    NOT?: YogaChildStudentScalarWhereInput | YogaChildStudentScalarWhereInput[]
    yogaClassId?: IntFilter<"YogaChildStudent"> | number
    studentId?: StringFilter<"YogaChildStudent"> | string
  }

  export type PresenceUpsertWithWhereUniqueWithoutChildStudentInput = {
    where: PresenceWhereUniqueInput
    update: XOR<PresenceUpdateWithoutChildStudentInput, PresenceUncheckedUpdateWithoutChildStudentInput>
    create: XOR<PresenceCreateWithoutChildStudentInput, PresenceUncheckedCreateWithoutChildStudentInput>
  }

  export type PresenceUpdateWithWhereUniqueWithoutChildStudentInput = {
    where: PresenceWhereUniqueInput
    data: XOR<PresenceUpdateWithoutChildStudentInput, PresenceUncheckedUpdateWithoutChildStudentInput>
  }

  export type PresenceUpdateManyWithWhereWithoutChildStudentInput = {
    where: PresenceScalarWhereInput
    data: XOR<PresenceUpdateManyMutationInput, PresenceUncheckedUpdateManyWithoutChildStudentInput>
  }

  export type ClientCreateWithoutChildrenInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ClientContractCreateNestedManyWithoutClientInput
    yogaClasses?: YogaAdultStudentCreateNestedManyWithoutStudentInput
    presences?: PresenceCreateNestedManyWithoutAdultStudentInput
    transactions?: TransactionCreateNestedManyWithoutClientInput
    notifications?: NotificationCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ClientContractUncheckedCreateNestedManyWithoutClientInput
    yogaClasses?: YogaAdultStudentUncheckedCreateNestedManyWithoutStudentInput
    presences?: PresenceUncheckedCreateNestedManyWithoutAdultStudentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutClientInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutChildrenInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutChildrenInput, ClientUncheckedCreateWithoutChildrenInput>
  }

  export type ChildCreateWithoutParentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    yogaClasses?: YogaChildStudentCreateNestedManyWithoutStudentInput
    presences?: PresenceCreateNestedManyWithoutChildStudentInput
  }

  export type ChildUncheckedCreateWithoutParentsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    yogaClasses?: YogaChildStudentUncheckedCreateNestedManyWithoutStudentInput
    presences?: PresenceUncheckedCreateNestedManyWithoutChildStudentInput
  }

  export type ChildCreateOrConnectWithoutParentsInput = {
    where: ChildWhereUniqueInput
    create: XOR<ChildCreateWithoutParentsInput, ChildUncheckedCreateWithoutParentsInput>
  }

  export type ClientUpsertWithoutChildrenInput = {
    update: XOR<ClientUpdateWithoutChildrenInput, ClientUncheckedUpdateWithoutChildrenInput>
    create: XOR<ClientCreateWithoutChildrenInput, ClientUncheckedCreateWithoutChildrenInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutChildrenInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutChildrenInput, ClientUncheckedUpdateWithoutChildrenInput>
  }

  export type ClientUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ClientContractUpdateManyWithoutClientNestedInput
    yogaClasses?: YogaAdultStudentUpdateManyWithoutStudentNestedInput
    presences?: PresenceUpdateManyWithoutAdultStudentNestedInput
    transactions?: TransactionUpdateManyWithoutClientNestedInput
    notifications?: NotificationUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ClientContractUncheckedUpdateManyWithoutClientNestedInput
    yogaClasses?: YogaAdultStudentUncheckedUpdateManyWithoutStudentNestedInput
    presences?: PresenceUncheckedUpdateManyWithoutAdultStudentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutClientNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ChildUpsertWithoutParentsInput = {
    update: XOR<ChildUpdateWithoutParentsInput, ChildUncheckedUpdateWithoutParentsInput>
    create: XOR<ChildCreateWithoutParentsInput, ChildUncheckedCreateWithoutParentsInput>
    where?: ChildWhereInput
  }

  export type ChildUpdateToOneWithWhereWithoutParentsInput = {
    where?: ChildWhereInput
    data: XOR<ChildUpdateWithoutParentsInput, ChildUncheckedUpdateWithoutParentsInput>
  }

  export type ChildUpdateWithoutParentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    yogaClasses?: YogaChildStudentUpdateManyWithoutStudentNestedInput
    presences?: PresenceUpdateManyWithoutChildStudentNestedInput
  }

  export type ChildUncheckedUpdateWithoutParentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    yogaClasses?: YogaChildStudentUncheckedUpdateManyWithoutStudentNestedInput
    presences?: PresenceUncheckedUpdateManyWithoutChildStudentNestedInput
  }

  export type LocationCreateWithoutClassesInput = {
    name: string
    address: string
    neighborhood: string
    city: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUncheckedCreateWithoutClassesInput = {
    id?: number
    name: string
    address: string
    neighborhood: string
    city: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationCreateOrConnectWithoutClassesInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutClassesInput, LocationUncheckedCreateWithoutClassesInput>
  }

  export type TransactionCreateWithoutYogaClassInput = {
    id?: string
    amount: number
    date?: Date | string
    description?: string | null
    method: $Enums.PaymentMethod
    isPaid?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    contract?: ContractCreateNestedOneWithoutTransactionsInput
    client?: ClientCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutYogaClassInput = {
    id?: string
    amount: number
    date?: Date | string
    description?: string | null
    method: $Enums.PaymentMethod
    isPaid?: boolean
    contractId?: string | null
    clientId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutYogaClassInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutYogaClassInput, TransactionUncheckedCreateWithoutYogaClassInput>
  }

  export type TransactionCreateManyYogaClassInputEnvelope = {
    data: TransactionCreateManyYogaClassInput | TransactionCreateManyYogaClassInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutClassesInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    videoContracts?: ContractCreateNestedManyWithoutVideomakerInput
    photoContracts?: ContractPhotographerCreateNestedManyWithoutPhotographerInput
  }

  export type UserUncheckedCreateWithoutClassesInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    videoContracts?: ContractUncheckedCreateNestedManyWithoutVideomakerInput
    photoContracts?: ContractPhotographerUncheckedCreateNestedManyWithoutPhotographerInput
  }

  export type UserCreateOrConnectWithoutClassesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClassesInput, UserUncheckedCreateWithoutClassesInput>
  }

  export type YogaAdultStudentCreateWithoutYogaClassInput = {
    student: ClientCreateNestedOneWithoutYogaClassesInput
  }

  export type YogaAdultStudentUncheckedCreateWithoutYogaClassInput = {
    studentId: string
  }

  export type YogaAdultStudentCreateOrConnectWithoutYogaClassInput = {
    where: YogaAdultStudentWhereUniqueInput
    create: XOR<YogaAdultStudentCreateWithoutYogaClassInput, YogaAdultStudentUncheckedCreateWithoutYogaClassInput>
  }

  export type YogaAdultStudentCreateManyYogaClassInputEnvelope = {
    data: YogaAdultStudentCreateManyYogaClassInput | YogaAdultStudentCreateManyYogaClassInput[]
    skipDuplicates?: boolean
  }

  export type YogaChildStudentCreateWithoutYogaClassInput = {
    student: ChildCreateNestedOneWithoutYogaClassesInput
  }

  export type YogaChildStudentUncheckedCreateWithoutYogaClassInput = {
    studentId: string
  }

  export type YogaChildStudentCreateOrConnectWithoutYogaClassInput = {
    where: YogaChildStudentWhereUniqueInput
    create: XOR<YogaChildStudentCreateWithoutYogaClassInput, YogaChildStudentUncheckedCreateWithoutYogaClassInput>
  }

  export type YogaChildStudentCreateManyYogaClassInputEnvelope = {
    data: YogaChildStudentCreateManyYogaClassInput | YogaChildStudentCreateManyYogaClassInput[]
    skipDuplicates?: boolean
  }

  export type RollCallCreateWithoutClassInput = {
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    presences?: PresenceCreateNestedManyWithoutRollCallInput
  }

  export type RollCallUncheckedCreateWithoutClassInput = {
    id?: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    presences?: PresenceUncheckedCreateNestedManyWithoutRollCallInput
  }

  export type RollCallCreateOrConnectWithoutClassInput = {
    where: RollCallWhereUniqueInput
    create: XOR<RollCallCreateWithoutClassInput, RollCallUncheckedCreateWithoutClassInput>
  }

  export type LocationUpsertWithoutClassesInput = {
    update: XOR<LocationUpdateWithoutClassesInput, LocationUncheckedUpdateWithoutClassesInput>
    create: XOR<LocationCreateWithoutClassesInput, LocationUncheckedCreateWithoutClassesInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutClassesInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutClassesInput, LocationUncheckedUpdateWithoutClassesInput>
  }

  export type LocationUpdateWithoutClassesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateWithoutClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutYogaClassInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutYogaClassInput, TransactionUncheckedUpdateWithoutYogaClassInput>
    create: XOR<TransactionCreateWithoutYogaClassInput, TransactionUncheckedCreateWithoutYogaClassInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutYogaClassInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutYogaClassInput, TransactionUncheckedUpdateWithoutYogaClassInput>
  }

  export type TransactionUpdateManyWithWhereWithoutYogaClassInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutYogaClassInput>
  }

  export type UserUpsertWithoutClassesInput = {
    update: XOR<UserUpdateWithoutClassesInput, UserUncheckedUpdateWithoutClassesInput>
    create: XOR<UserCreateWithoutClassesInput, UserUncheckedCreateWithoutClassesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClassesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClassesInput, UserUncheckedUpdateWithoutClassesInput>
  }

  export type UserUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    videoContracts?: ContractUpdateManyWithoutVideomakerNestedInput
    photoContracts?: ContractPhotographerUpdateManyWithoutPhotographerNestedInput
  }

  export type UserUncheckedUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    videoContracts?: ContractUncheckedUpdateManyWithoutVideomakerNestedInput
    photoContracts?: ContractPhotographerUncheckedUpdateManyWithoutPhotographerNestedInput
  }

  export type YogaAdultStudentUpsertWithWhereUniqueWithoutYogaClassInput = {
    where: YogaAdultStudentWhereUniqueInput
    update: XOR<YogaAdultStudentUpdateWithoutYogaClassInput, YogaAdultStudentUncheckedUpdateWithoutYogaClassInput>
    create: XOR<YogaAdultStudentCreateWithoutYogaClassInput, YogaAdultStudentUncheckedCreateWithoutYogaClassInput>
  }

  export type YogaAdultStudentUpdateWithWhereUniqueWithoutYogaClassInput = {
    where: YogaAdultStudentWhereUniqueInput
    data: XOR<YogaAdultStudentUpdateWithoutYogaClassInput, YogaAdultStudentUncheckedUpdateWithoutYogaClassInput>
  }

  export type YogaAdultStudentUpdateManyWithWhereWithoutYogaClassInput = {
    where: YogaAdultStudentScalarWhereInput
    data: XOR<YogaAdultStudentUpdateManyMutationInput, YogaAdultStudentUncheckedUpdateManyWithoutYogaClassInput>
  }

  export type YogaChildStudentUpsertWithWhereUniqueWithoutYogaClassInput = {
    where: YogaChildStudentWhereUniqueInput
    update: XOR<YogaChildStudentUpdateWithoutYogaClassInput, YogaChildStudentUncheckedUpdateWithoutYogaClassInput>
    create: XOR<YogaChildStudentCreateWithoutYogaClassInput, YogaChildStudentUncheckedCreateWithoutYogaClassInput>
  }

  export type YogaChildStudentUpdateWithWhereUniqueWithoutYogaClassInput = {
    where: YogaChildStudentWhereUniqueInput
    data: XOR<YogaChildStudentUpdateWithoutYogaClassInput, YogaChildStudentUncheckedUpdateWithoutYogaClassInput>
  }

  export type YogaChildStudentUpdateManyWithWhereWithoutYogaClassInput = {
    where: YogaChildStudentScalarWhereInput
    data: XOR<YogaChildStudentUpdateManyMutationInput, YogaChildStudentUncheckedUpdateManyWithoutYogaClassInput>
  }

  export type RollCallUpsertWithoutClassInput = {
    update: XOR<RollCallUpdateWithoutClassInput, RollCallUncheckedUpdateWithoutClassInput>
    create: XOR<RollCallCreateWithoutClassInput, RollCallUncheckedCreateWithoutClassInput>
    where?: RollCallWhereInput
  }

  export type RollCallUpdateToOneWithWhereWithoutClassInput = {
    where?: RollCallWhereInput
    data: XOR<RollCallUpdateWithoutClassInput, RollCallUncheckedUpdateWithoutClassInput>
  }

  export type RollCallUpdateWithoutClassInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presences?: PresenceUpdateManyWithoutRollCallNestedInput
  }

  export type RollCallUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    presences?: PresenceUncheckedUpdateManyWithoutRollCallNestedInput
  }

  export type YogaClassCreateWithoutLocationInput = {
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionCreateNestedManyWithoutYogaClassInput
    instructor: UserCreateNestedOneWithoutClassesInput
    adultStudents?: YogaAdultStudentCreateNestedManyWithoutYogaClassInput
    childStudents?: YogaChildStudentCreateNestedManyWithoutYogaClassInput
    rollCall?: RollCallCreateNestedOneWithoutClassInput
  }

  export type YogaClassUncheckedCreateWithoutLocationInput = {
    id?: number
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    date: Date | string
    instructorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutYogaClassInput
    adultStudents?: YogaAdultStudentUncheckedCreateNestedManyWithoutYogaClassInput
    childStudents?: YogaChildStudentUncheckedCreateNestedManyWithoutYogaClassInput
    rollCall?: RollCallUncheckedCreateNestedOneWithoutClassInput
  }

  export type YogaClassCreateOrConnectWithoutLocationInput = {
    where: YogaClassWhereUniqueInput
    create: XOR<YogaClassCreateWithoutLocationInput, YogaClassUncheckedCreateWithoutLocationInput>
  }

  export type YogaClassCreateManyLocationInputEnvelope = {
    data: YogaClassCreateManyLocationInput | YogaClassCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type YogaClassUpsertWithWhereUniqueWithoutLocationInput = {
    where: YogaClassWhereUniqueInput
    update: XOR<YogaClassUpdateWithoutLocationInput, YogaClassUncheckedUpdateWithoutLocationInput>
    create: XOR<YogaClassCreateWithoutLocationInput, YogaClassUncheckedCreateWithoutLocationInput>
  }

  export type YogaClassUpdateWithWhereUniqueWithoutLocationInput = {
    where: YogaClassWhereUniqueInput
    data: XOR<YogaClassUpdateWithoutLocationInput, YogaClassUncheckedUpdateWithoutLocationInput>
  }

  export type YogaClassUpdateManyWithWhereWithoutLocationInput = {
    where: YogaClassScalarWhereInput
    data: XOR<YogaClassUpdateManyMutationInput, YogaClassUncheckedUpdateManyWithoutLocationInput>
  }

  export type YogaClassCreateWithoutChildStudentsInput = {
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutClassesInput
    transactions?: TransactionCreateNestedManyWithoutYogaClassInput
    instructor: UserCreateNestedOneWithoutClassesInput
    adultStudents?: YogaAdultStudentCreateNestedManyWithoutYogaClassInput
    rollCall?: RollCallCreateNestedOneWithoutClassInput
  }

  export type YogaClassUncheckedCreateWithoutChildStudentsInput = {
    id?: number
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    locationId: number
    date: Date | string
    instructorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutYogaClassInput
    adultStudents?: YogaAdultStudentUncheckedCreateNestedManyWithoutYogaClassInput
    rollCall?: RollCallUncheckedCreateNestedOneWithoutClassInput
  }

  export type YogaClassCreateOrConnectWithoutChildStudentsInput = {
    where: YogaClassWhereUniqueInput
    create: XOR<YogaClassCreateWithoutChildStudentsInput, YogaClassUncheckedCreateWithoutChildStudentsInput>
  }

  export type ChildCreateWithoutYogaClassesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parents?: FamilyCreateNestedManyWithoutChildInput
    presences?: PresenceCreateNestedManyWithoutChildStudentInput
  }

  export type ChildUncheckedCreateWithoutYogaClassesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parents?: FamilyUncheckedCreateNestedManyWithoutChildInput
    presences?: PresenceUncheckedCreateNestedManyWithoutChildStudentInput
  }

  export type ChildCreateOrConnectWithoutYogaClassesInput = {
    where: ChildWhereUniqueInput
    create: XOR<ChildCreateWithoutYogaClassesInput, ChildUncheckedCreateWithoutYogaClassesInput>
  }

  export type YogaClassUpsertWithoutChildStudentsInput = {
    update: XOR<YogaClassUpdateWithoutChildStudentsInput, YogaClassUncheckedUpdateWithoutChildStudentsInput>
    create: XOR<YogaClassCreateWithoutChildStudentsInput, YogaClassUncheckedCreateWithoutChildStudentsInput>
    where?: YogaClassWhereInput
  }

  export type YogaClassUpdateToOneWithWhereWithoutChildStudentsInput = {
    where?: YogaClassWhereInput
    data: XOR<YogaClassUpdateWithoutChildStudentsInput, YogaClassUncheckedUpdateWithoutChildStudentsInput>
  }

  export type YogaClassUpdateWithoutChildStudentsInput = {
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutClassesNestedInput
    transactions?: TransactionUpdateManyWithoutYogaClassNestedInput
    instructor?: UserUpdateOneRequiredWithoutClassesNestedInput
    adultStudents?: YogaAdultStudentUpdateManyWithoutYogaClassNestedInput
    rollCall?: RollCallUpdateOneWithoutClassNestedInput
  }

  export type YogaClassUncheckedUpdateWithoutChildStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    instructorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutYogaClassNestedInput
    adultStudents?: YogaAdultStudentUncheckedUpdateManyWithoutYogaClassNestedInput
    rollCall?: RollCallUncheckedUpdateOneWithoutClassNestedInput
  }

  export type ChildUpsertWithoutYogaClassesInput = {
    update: XOR<ChildUpdateWithoutYogaClassesInput, ChildUncheckedUpdateWithoutYogaClassesInput>
    create: XOR<ChildCreateWithoutYogaClassesInput, ChildUncheckedCreateWithoutYogaClassesInput>
    where?: ChildWhereInput
  }

  export type ChildUpdateToOneWithWhereWithoutYogaClassesInput = {
    where?: ChildWhereInput
    data: XOR<ChildUpdateWithoutYogaClassesInput, ChildUncheckedUpdateWithoutYogaClassesInput>
  }

  export type ChildUpdateWithoutYogaClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parents?: FamilyUpdateManyWithoutChildNestedInput
    presences?: PresenceUpdateManyWithoutChildStudentNestedInput
  }

  export type ChildUncheckedUpdateWithoutYogaClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parents?: FamilyUncheckedUpdateManyWithoutChildNestedInput
    presences?: PresenceUncheckedUpdateManyWithoutChildStudentNestedInput
  }

  export type YogaClassCreateWithoutAdultStudentsInput = {
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutClassesInput
    transactions?: TransactionCreateNestedManyWithoutYogaClassInput
    instructor: UserCreateNestedOneWithoutClassesInput
    childStudents?: YogaChildStudentCreateNestedManyWithoutYogaClassInput
    rollCall?: RollCallCreateNestedOneWithoutClassInput
  }

  export type YogaClassUncheckedCreateWithoutAdultStudentsInput = {
    id?: number
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    locationId: number
    date: Date | string
    instructorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutYogaClassInput
    childStudents?: YogaChildStudentUncheckedCreateNestedManyWithoutYogaClassInput
    rollCall?: RollCallUncheckedCreateNestedOneWithoutClassInput
  }

  export type YogaClassCreateOrConnectWithoutAdultStudentsInput = {
    where: YogaClassWhereUniqueInput
    create: XOR<YogaClassCreateWithoutAdultStudentsInput, YogaClassUncheckedCreateWithoutAdultStudentsInput>
  }

  export type ClientCreateWithoutYogaClassesInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FamilyCreateNestedManyWithoutClientInput
    contracts?: ClientContractCreateNestedManyWithoutClientInput
    presences?: PresenceCreateNestedManyWithoutAdultStudentInput
    transactions?: TransactionCreateNestedManyWithoutClientInput
    notifications?: NotificationCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutYogaClassesInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FamilyUncheckedCreateNestedManyWithoutClientInput
    contracts?: ClientContractUncheckedCreateNestedManyWithoutClientInput
    presences?: PresenceUncheckedCreateNestedManyWithoutAdultStudentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutClientInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutYogaClassesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutYogaClassesInput, ClientUncheckedCreateWithoutYogaClassesInput>
  }

  export type YogaClassUpsertWithoutAdultStudentsInput = {
    update: XOR<YogaClassUpdateWithoutAdultStudentsInput, YogaClassUncheckedUpdateWithoutAdultStudentsInput>
    create: XOR<YogaClassCreateWithoutAdultStudentsInput, YogaClassUncheckedCreateWithoutAdultStudentsInput>
    where?: YogaClassWhereInput
  }

  export type YogaClassUpdateToOneWithWhereWithoutAdultStudentsInput = {
    where?: YogaClassWhereInput
    data: XOR<YogaClassUpdateWithoutAdultStudentsInput, YogaClassUncheckedUpdateWithoutAdultStudentsInput>
  }

  export type YogaClassUpdateWithoutAdultStudentsInput = {
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutClassesNestedInput
    transactions?: TransactionUpdateManyWithoutYogaClassNestedInput
    instructor?: UserUpdateOneRequiredWithoutClassesNestedInput
    childStudents?: YogaChildStudentUpdateManyWithoutYogaClassNestedInput
    rollCall?: RollCallUpdateOneWithoutClassNestedInput
  }

  export type YogaClassUncheckedUpdateWithoutAdultStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    instructorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutYogaClassNestedInput
    childStudents?: YogaChildStudentUncheckedUpdateManyWithoutYogaClassNestedInput
    rollCall?: RollCallUncheckedUpdateOneWithoutClassNestedInput
  }

  export type ClientUpsertWithoutYogaClassesInput = {
    update: XOR<ClientUpdateWithoutYogaClassesInput, ClientUncheckedUpdateWithoutYogaClassesInput>
    create: XOR<ClientCreateWithoutYogaClassesInput, ClientUncheckedCreateWithoutYogaClassesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutYogaClassesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutYogaClassesInput, ClientUncheckedUpdateWithoutYogaClassesInput>
  }

  export type ClientUpdateWithoutYogaClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FamilyUpdateManyWithoutClientNestedInput
    contracts?: ClientContractUpdateManyWithoutClientNestedInput
    presences?: PresenceUpdateManyWithoutAdultStudentNestedInput
    transactions?: TransactionUpdateManyWithoutClientNestedInput
    notifications?: NotificationUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutYogaClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FamilyUncheckedUpdateManyWithoutClientNestedInput
    contracts?: ClientContractUncheckedUpdateManyWithoutClientNestedInput
    presences?: PresenceUncheckedUpdateManyWithoutAdultStudentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutClientNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClientNestedInput
  }

  export type YogaClassCreateWithoutRollCallInput = {
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutClassesInput
    transactions?: TransactionCreateNestedManyWithoutYogaClassInput
    instructor: UserCreateNestedOneWithoutClassesInput
    adultStudents?: YogaAdultStudentCreateNestedManyWithoutYogaClassInput
    childStudents?: YogaChildStudentCreateNestedManyWithoutYogaClassInput
  }

  export type YogaClassUncheckedCreateWithoutRollCallInput = {
    id?: number
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    locationId: number
    date: Date | string
    instructorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutYogaClassInput
    adultStudents?: YogaAdultStudentUncheckedCreateNestedManyWithoutYogaClassInput
    childStudents?: YogaChildStudentUncheckedCreateNestedManyWithoutYogaClassInput
  }

  export type YogaClassCreateOrConnectWithoutRollCallInput = {
    where: YogaClassWhereUniqueInput
    create: XOR<YogaClassCreateWithoutRollCallInput, YogaClassUncheckedCreateWithoutRollCallInput>
  }

  export type PresenceCreateWithoutRollCallInput = {
    studentType: $Enums.StudentType
    isPresent: boolean
    absenceReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    adultStudent?: ClientCreateNestedOneWithoutPresencesInput
    childStudent?: ChildCreateNestedOneWithoutPresencesInput
  }

  export type PresenceUncheckedCreateWithoutRollCallInput = {
    id?: number
    studentType: $Enums.StudentType
    adultStudentId?: string | null
    childStudentId?: string | null
    isPresent: boolean
    absenceReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PresenceCreateOrConnectWithoutRollCallInput = {
    where: PresenceWhereUniqueInput
    create: XOR<PresenceCreateWithoutRollCallInput, PresenceUncheckedCreateWithoutRollCallInput>
  }

  export type PresenceCreateManyRollCallInputEnvelope = {
    data: PresenceCreateManyRollCallInput | PresenceCreateManyRollCallInput[]
    skipDuplicates?: boolean
  }

  export type YogaClassUpsertWithoutRollCallInput = {
    update: XOR<YogaClassUpdateWithoutRollCallInput, YogaClassUncheckedUpdateWithoutRollCallInput>
    create: XOR<YogaClassCreateWithoutRollCallInput, YogaClassUncheckedCreateWithoutRollCallInput>
    where?: YogaClassWhereInput
  }

  export type YogaClassUpdateToOneWithWhereWithoutRollCallInput = {
    where?: YogaClassWhereInput
    data: XOR<YogaClassUpdateWithoutRollCallInput, YogaClassUncheckedUpdateWithoutRollCallInput>
  }

  export type YogaClassUpdateWithoutRollCallInput = {
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutClassesNestedInput
    transactions?: TransactionUpdateManyWithoutYogaClassNestedInput
    instructor?: UserUpdateOneRequiredWithoutClassesNestedInput
    adultStudents?: YogaAdultStudentUpdateManyWithoutYogaClassNestedInput
    childStudents?: YogaChildStudentUpdateManyWithoutYogaClassNestedInput
  }

  export type YogaClassUncheckedUpdateWithoutRollCallInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    instructorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutYogaClassNestedInput
    adultStudents?: YogaAdultStudentUncheckedUpdateManyWithoutYogaClassNestedInput
    childStudents?: YogaChildStudentUncheckedUpdateManyWithoutYogaClassNestedInput
  }

  export type PresenceUpsertWithWhereUniqueWithoutRollCallInput = {
    where: PresenceWhereUniqueInput
    update: XOR<PresenceUpdateWithoutRollCallInput, PresenceUncheckedUpdateWithoutRollCallInput>
    create: XOR<PresenceCreateWithoutRollCallInput, PresenceUncheckedCreateWithoutRollCallInput>
  }

  export type PresenceUpdateWithWhereUniqueWithoutRollCallInput = {
    where: PresenceWhereUniqueInput
    data: XOR<PresenceUpdateWithoutRollCallInput, PresenceUncheckedUpdateWithoutRollCallInput>
  }

  export type PresenceUpdateManyWithWhereWithoutRollCallInput = {
    where: PresenceScalarWhereInput
    data: XOR<PresenceUpdateManyMutationInput, PresenceUncheckedUpdateManyWithoutRollCallInput>
  }

  export type RollCallCreateWithoutPresencesInput = {
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    class: YogaClassCreateNestedOneWithoutRollCallInput
  }

  export type RollCallUncheckedCreateWithoutPresencesInput = {
    id?: number
    classId: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RollCallCreateOrConnectWithoutPresencesInput = {
    where: RollCallWhereUniqueInput
    create: XOR<RollCallCreateWithoutPresencesInput, RollCallUncheckedCreateWithoutPresencesInput>
  }

  export type ClientCreateWithoutPresencesInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FamilyCreateNestedManyWithoutClientInput
    contracts?: ClientContractCreateNestedManyWithoutClientInput
    yogaClasses?: YogaAdultStudentCreateNestedManyWithoutStudentInput
    transactions?: TransactionCreateNestedManyWithoutClientInput
    notifications?: NotificationCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutPresencesInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FamilyUncheckedCreateNestedManyWithoutClientInput
    contracts?: ClientContractUncheckedCreateNestedManyWithoutClientInput
    yogaClasses?: YogaAdultStudentUncheckedCreateNestedManyWithoutStudentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutClientInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutPresencesInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutPresencesInput, ClientUncheckedCreateWithoutPresencesInput>
  }

  export type ChildCreateWithoutPresencesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parents?: FamilyCreateNestedManyWithoutChildInput
    yogaClasses?: YogaChildStudentCreateNestedManyWithoutStudentInput
  }

  export type ChildUncheckedCreateWithoutPresencesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parents?: FamilyUncheckedCreateNestedManyWithoutChildInput
    yogaClasses?: YogaChildStudentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type ChildCreateOrConnectWithoutPresencesInput = {
    where: ChildWhereUniqueInput
    create: XOR<ChildCreateWithoutPresencesInput, ChildUncheckedCreateWithoutPresencesInput>
  }

  export type RollCallUpsertWithoutPresencesInput = {
    update: XOR<RollCallUpdateWithoutPresencesInput, RollCallUncheckedUpdateWithoutPresencesInput>
    create: XOR<RollCallCreateWithoutPresencesInput, RollCallUncheckedCreateWithoutPresencesInput>
    where?: RollCallWhereInput
  }

  export type RollCallUpdateToOneWithWhereWithoutPresencesInput = {
    where?: RollCallWhereInput
    data: XOR<RollCallUpdateWithoutPresencesInput, RollCallUncheckedUpdateWithoutPresencesInput>
  }

  export type RollCallUpdateWithoutPresencesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: YogaClassUpdateOneRequiredWithoutRollCallNestedInput
  }

  export type RollCallUncheckedUpdateWithoutPresencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUpsertWithoutPresencesInput = {
    update: XOR<ClientUpdateWithoutPresencesInput, ClientUncheckedUpdateWithoutPresencesInput>
    create: XOR<ClientCreateWithoutPresencesInput, ClientUncheckedCreateWithoutPresencesInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutPresencesInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutPresencesInput, ClientUncheckedUpdateWithoutPresencesInput>
  }

  export type ClientUpdateWithoutPresencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FamilyUpdateManyWithoutClientNestedInput
    contracts?: ClientContractUpdateManyWithoutClientNestedInput
    yogaClasses?: YogaAdultStudentUpdateManyWithoutStudentNestedInput
    transactions?: TransactionUpdateManyWithoutClientNestedInput
    notifications?: NotificationUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutPresencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FamilyUncheckedUpdateManyWithoutClientNestedInput
    contracts?: ClientContractUncheckedUpdateManyWithoutClientNestedInput
    yogaClasses?: YogaAdultStudentUncheckedUpdateManyWithoutStudentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutClientNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ChildUpsertWithoutPresencesInput = {
    update: XOR<ChildUpdateWithoutPresencesInput, ChildUncheckedUpdateWithoutPresencesInput>
    create: XOR<ChildCreateWithoutPresencesInput, ChildUncheckedCreateWithoutPresencesInput>
    where?: ChildWhereInput
  }

  export type ChildUpdateToOneWithWhereWithoutPresencesInput = {
    where?: ChildWhereInput
    data: XOR<ChildUpdateWithoutPresencesInput, ChildUncheckedUpdateWithoutPresencesInput>
  }

  export type ChildUpdateWithoutPresencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parents?: FamilyUpdateManyWithoutChildNestedInput
    yogaClasses?: YogaChildStudentUpdateManyWithoutStudentNestedInput
  }

  export type ChildUncheckedUpdateWithoutPresencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parents?: FamilyUncheckedUpdateManyWithoutChildNestedInput
    yogaClasses?: YogaChildStudentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClientContractCreateWithoutContractInput = {
    assignedAt?: Date | string
    client: ClientCreateNestedOneWithoutContractsInput
  }

  export type ClientContractUncheckedCreateWithoutContractInput = {
    clientId: string
    assignedAt?: Date | string
  }

  export type ClientContractCreateOrConnectWithoutContractInput = {
    where: ClientContractWhereUniqueInput
    create: XOR<ClientContractCreateWithoutContractInput, ClientContractUncheckedCreateWithoutContractInput>
  }

  export type ClientContractCreateManyContractInputEnvelope = {
    data: ClientContractCreateManyContractInput | ClientContractCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type ContractPhotographerCreateWithoutContractInput = {
    photographer: UserCreateNestedOneWithoutPhotoContractsInput
  }

  export type ContractPhotographerUncheckedCreateWithoutContractInput = {
    photographerId: string
  }

  export type ContractPhotographerCreateOrConnectWithoutContractInput = {
    where: ContractPhotographerWhereUniqueInput
    create: XOR<ContractPhotographerCreateWithoutContractInput, ContractPhotographerUncheckedCreateWithoutContractInput>
  }

  export type ContractPhotographerCreateManyContractInputEnvelope = {
    data: ContractPhotographerCreateManyContractInput | ContractPhotographerCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutVideoContractsInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    classes?: YogaClassCreateNestedManyWithoutInstructorInput
    photoContracts?: ContractPhotographerCreateNestedManyWithoutPhotographerInput
  }

  export type UserUncheckedCreateWithoutVideoContractsInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    classes?: YogaClassUncheckedCreateNestedManyWithoutInstructorInput
    photoContracts?: ContractPhotographerUncheckedCreateNestedManyWithoutPhotographerInput
  }

  export type UserCreateOrConnectWithoutVideoContractsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVideoContractsInput, UserUncheckedCreateWithoutVideoContractsInput>
  }

  export type PackageCreateWithoutContractsInput = {
    name: string
    pixPrice: number
    cardPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageUncheckedCreateWithoutContractsInput = {
    id?: number
    name: string
    pixPrice: number
    cardPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageCreateOrConnectWithoutContractsInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutContractsInput, PackageUncheckedCreateWithoutContractsInput>
  }

  export type TransactionCreateWithoutContractInput = {
    id?: string
    amount: number
    date?: Date | string
    description?: string | null
    method: $Enums.PaymentMethod
    isPaid?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    yogaClass?: YogaClassCreateNestedOneWithoutTransactionsInput
    client?: ClientCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutContractInput = {
    id?: string
    amount: number
    date?: Date | string
    description?: string | null
    method: $Enums.PaymentMethod
    isPaid?: boolean
    yogaClassId?: number | null
    clientId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutContractInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutContractInput, TransactionUncheckedCreateWithoutContractInput>
  }

  export type TransactionCreateManyContractInputEnvelope = {
    data: TransactionCreateManyContractInput | TransactionCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type ClientContractUpsertWithWhereUniqueWithoutContractInput = {
    where: ClientContractWhereUniqueInput
    update: XOR<ClientContractUpdateWithoutContractInput, ClientContractUncheckedUpdateWithoutContractInput>
    create: XOR<ClientContractCreateWithoutContractInput, ClientContractUncheckedCreateWithoutContractInput>
  }

  export type ClientContractUpdateWithWhereUniqueWithoutContractInput = {
    where: ClientContractWhereUniqueInput
    data: XOR<ClientContractUpdateWithoutContractInput, ClientContractUncheckedUpdateWithoutContractInput>
  }

  export type ClientContractUpdateManyWithWhereWithoutContractInput = {
    where: ClientContractScalarWhereInput
    data: XOR<ClientContractUpdateManyMutationInput, ClientContractUncheckedUpdateManyWithoutContractInput>
  }

  export type ContractPhotographerUpsertWithWhereUniqueWithoutContractInput = {
    where: ContractPhotographerWhereUniqueInput
    update: XOR<ContractPhotographerUpdateWithoutContractInput, ContractPhotographerUncheckedUpdateWithoutContractInput>
    create: XOR<ContractPhotographerCreateWithoutContractInput, ContractPhotographerUncheckedCreateWithoutContractInput>
  }

  export type ContractPhotographerUpdateWithWhereUniqueWithoutContractInput = {
    where: ContractPhotographerWhereUniqueInput
    data: XOR<ContractPhotographerUpdateWithoutContractInput, ContractPhotographerUncheckedUpdateWithoutContractInput>
  }

  export type ContractPhotographerUpdateManyWithWhereWithoutContractInput = {
    where: ContractPhotographerScalarWhereInput
    data: XOR<ContractPhotographerUpdateManyMutationInput, ContractPhotographerUncheckedUpdateManyWithoutContractInput>
  }

  export type UserUpsertWithoutVideoContractsInput = {
    update: XOR<UserUpdateWithoutVideoContractsInput, UserUncheckedUpdateWithoutVideoContractsInput>
    create: XOR<UserCreateWithoutVideoContractsInput, UserUncheckedCreateWithoutVideoContractsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVideoContractsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVideoContractsInput, UserUncheckedUpdateWithoutVideoContractsInput>
  }

  export type UserUpdateWithoutVideoContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    classes?: YogaClassUpdateManyWithoutInstructorNestedInput
    photoContracts?: ContractPhotographerUpdateManyWithoutPhotographerNestedInput
  }

  export type UserUncheckedUpdateWithoutVideoContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    classes?: YogaClassUncheckedUpdateManyWithoutInstructorNestedInput
    photoContracts?: ContractPhotographerUncheckedUpdateManyWithoutPhotographerNestedInput
  }

  export type PackageUpsertWithoutContractsInput = {
    update: XOR<PackageUpdateWithoutContractsInput, PackageUncheckedUpdateWithoutContractsInput>
    create: XOR<PackageCreateWithoutContractsInput, PackageUncheckedCreateWithoutContractsInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutContractsInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutContractsInput, PackageUncheckedUpdateWithoutContractsInput>
  }

  export type PackageUpdateWithoutContractsInput = {
    name?: StringFieldUpdateOperationsInput | string
    pixPrice?: FloatFieldUpdateOperationsInput | number
    cardPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageUncheckedUpdateWithoutContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    pixPrice?: FloatFieldUpdateOperationsInput | number
    cardPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutContractInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutContractInput, TransactionUncheckedUpdateWithoutContractInput>
    create: XOR<TransactionCreateWithoutContractInput, TransactionUncheckedCreateWithoutContractInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutContractInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutContractInput, TransactionUncheckedUpdateWithoutContractInput>
  }

  export type TransactionUpdateManyWithWhereWithoutContractInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutContractInput>
  }

  export type ContractCreateWithoutTransactionsInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientContractCreateNestedManyWithoutContractInput
    photographers?: ContractPhotographerCreateNestedManyWithoutContractInput
    videomaker?: UserCreateNestedOneWithoutVideoContractsInput
    package: PackageCreateNestedOneWithoutContractsInput
  }

  export type ContractUncheckedCreateWithoutTransactionsInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    videomakerId?: string | null
    packageId: number
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientContractUncheckedCreateNestedManyWithoutContractInput
    photographers?: ContractPhotographerUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutTransactionsInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutTransactionsInput, ContractUncheckedCreateWithoutTransactionsInput>
  }

  export type YogaClassCreateWithoutTransactionsInput = {
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    location: LocationCreateNestedOneWithoutClassesInput
    instructor: UserCreateNestedOneWithoutClassesInput
    adultStudents?: YogaAdultStudentCreateNestedManyWithoutYogaClassInput
    childStudents?: YogaChildStudentCreateNestedManyWithoutYogaClassInput
    rollCall?: RollCallCreateNestedOneWithoutClassInput
  }

  export type YogaClassUncheckedCreateWithoutTransactionsInput = {
    id?: number
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    locationId: number
    date: Date | string
    instructorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adultStudents?: YogaAdultStudentUncheckedCreateNestedManyWithoutYogaClassInput
    childStudents?: YogaChildStudentUncheckedCreateNestedManyWithoutYogaClassInput
    rollCall?: RollCallUncheckedCreateNestedOneWithoutClassInput
  }

  export type YogaClassCreateOrConnectWithoutTransactionsInput = {
    where: YogaClassWhereUniqueInput
    create: XOR<YogaClassCreateWithoutTransactionsInput, YogaClassUncheckedCreateWithoutTransactionsInput>
  }

  export type ClientCreateWithoutTransactionsInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FamilyCreateNestedManyWithoutClientInput
    contracts?: ClientContractCreateNestedManyWithoutClientInput
    yogaClasses?: YogaAdultStudentCreateNestedManyWithoutStudentInput
    presences?: PresenceCreateNestedManyWithoutAdultStudentInput
    notifications?: NotificationCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutTransactionsInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FamilyUncheckedCreateNestedManyWithoutClientInput
    contracts?: ClientContractUncheckedCreateNestedManyWithoutClientInput
    yogaClasses?: YogaAdultStudentUncheckedCreateNestedManyWithoutStudentInput
    presences?: PresenceUncheckedCreateNestedManyWithoutAdultStudentInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutTransactionsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutTransactionsInput, ClientUncheckedCreateWithoutTransactionsInput>
  }

  export type ContractUpsertWithoutTransactionsInput = {
    update: XOR<ContractUpdateWithoutTransactionsInput, ContractUncheckedUpdateWithoutTransactionsInput>
    create: XOR<ContractCreateWithoutTransactionsInput, ContractUncheckedCreateWithoutTransactionsInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutTransactionsInput, ContractUncheckedUpdateWithoutTransactionsInput>
  }

  export type ContractUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientContractUpdateManyWithoutContractNestedInput
    photographers?: ContractPhotographerUpdateManyWithoutContractNestedInput
    videomaker?: UserUpdateOneWithoutVideoContractsNestedInput
    package?: PackageUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ContractUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videomakerId?: NullableStringFieldUpdateOperationsInput | string | null
    packageId?: IntFieldUpdateOperationsInput | number
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientContractUncheckedUpdateManyWithoutContractNestedInput
    photographers?: ContractPhotographerUncheckedUpdateManyWithoutContractNestedInput
  }

  export type YogaClassUpsertWithoutTransactionsInput = {
    update: XOR<YogaClassUpdateWithoutTransactionsInput, YogaClassUncheckedUpdateWithoutTransactionsInput>
    create: XOR<YogaClassCreateWithoutTransactionsInput, YogaClassUncheckedCreateWithoutTransactionsInput>
    where?: YogaClassWhereInput
  }

  export type YogaClassUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: YogaClassWhereInput
    data: XOR<YogaClassUpdateWithoutTransactionsInput, YogaClassUncheckedUpdateWithoutTransactionsInput>
  }

  export type YogaClassUpdateWithoutTransactionsInput = {
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutClassesNestedInput
    instructor?: UserUpdateOneRequiredWithoutClassesNestedInput
    adultStudents?: YogaAdultStudentUpdateManyWithoutYogaClassNestedInput
    childStudents?: YogaChildStudentUpdateManyWithoutYogaClassNestedInput
    rollCall?: RollCallUpdateOneWithoutClassNestedInput
  }

  export type YogaClassUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    instructorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adultStudents?: YogaAdultStudentUncheckedUpdateManyWithoutYogaClassNestedInput
    childStudents?: YogaChildStudentUncheckedUpdateManyWithoutYogaClassNestedInput
    rollCall?: RollCallUncheckedUpdateOneWithoutClassNestedInput
  }

  export type ClientUpsertWithoutTransactionsInput = {
    update: XOR<ClientUpdateWithoutTransactionsInput, ClientUncheckedUpdateWithoutTransactionsInput>
    create: XOR<ClientCreateWithoutTransactionsInput, ClientUncheckedCreateWithoutTransactionsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutTransactionsInput, ClientUncheckedUpdateWithoutTransactionsInput>
  }

  export type ClientUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FamilyUpdateManyWithoutClientNestedInput
    contracts?: ClientContractUpdateManyWithoutClientNestedInput
    yogaClasses?: YogaAdultStudentUpdateManyWithoutStudentNestedInput
    presences?: PresenceUpdateManyWithoutAdultStudentNestedInput
    notifications?: NotificationUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FamilyUncheckedUpdateManyWithoutClientNestedInput
    contracts?: ClientContractUncheckedUpdateManyWithoutClientNestedInput
    yogaClasses?: YogaAdultStudentUncheckedUpdateManyWithoutStudentNestedInput
    presences?: PresenceUncheckedUpdateManyWithoutAdultStudentNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClientNestedInput
  }

  export type UserCreateWithoutPhotoContractsInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    classes?: YogaClassCreateNestedManyWithoutInstructorInput
    videoContracts?: ContractCreateNestedManyWithoutVideomakerInput
  }

  export type UserUncheckedCreateWithoutPhotoContractsInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    classes?: YogaClassUncheckedCreateNestedManyWithoutInstructorInput
    videoContracts?: ContractUncheckedCreateNestedManyWithoutVideomakerInput
  }

  export type UserCreateOrConnectWithoutPhotoContractsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPhotoContractsInput, UserUncheckedCreateWithoutPhotoContractsInput>
  }

  export type ContractCreateWithoutPhotographersInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientContractCreateNestedManyWithoutContractInput
    videomaker?: UserCreateNestedOneWithoutVideoContractsInput
    package: PackageCreateNestedOneWithoutContractsInput
    transactions?: TransactionCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutPhotographersInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    videomakerId?: string | null
    packageId: number
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientContractUncheckedCreateNestedManyWithoutContractInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutPhotographersInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutPhotographersInput, ContractUncheckedCreateWithoutPhotographersInput>
  }

  export type UserUpsertWithoutPhotoContractsInput = {
    update: XOR<UserUpdateWithoutPhotoContractsInput, UserUncheckedUpdateWithoutPhotoContractsInput>
    create: XOR<UserCreateWithoutPhotoContractsInput, UserUncheckedCreateWithoutPhotoContractsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPhotoContractsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPhotoContractsInput, UserUncheckedUpdateWithoutPhotoContractsInput>
  }

  export type UserUpdateWithoutPhotoContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    classes?: YogaClassUpdateManyWithoutInstructorNestedInput
    videoContracts?: ContractUpdateManyWithoutVideomakerNestedInput
  }

  export type UserUncheckedUpdateWithoutPhotoContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    classes?: YogaClassUncheckedUpdateManyWithoutInstructorNestedInput
    videoContracts?: ContractUncheckedUpdateManyWithoutVideomakerNestedInput
  }

  export type ContractUpsertWithoutPhotographersInput = {
    update: XOR<ContractUpdateWithoutPhotographersInput, ContractUncheckedUpdateWithoutPhotographersInput>
    create: XOR<ContractCreateWithoutPhotographersInput, ContractUncheckedCreateWithoutPhotographersInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutPhotographersInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutPhotographersInput, ContractUncheckedUpdateWithoutPhotographersInput>
  }

  export type ContractUpdateWithoutPhotographersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientContractUpdateManyWithoutContractNestedInput
    videomaker?: UserUpdateOneWithoutVideoContractsNestedInput
    package?: PackageUpdateOneRequiredWithoutContractsNestedInput
    transactions?: TransactionUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutPhotographersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videomakerId?: NullableStringFieldUpdateOperationsInput | string | null
    packageId?: IntFieldUpdateOperationsInput | number
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientContractUncheckedUpdateManyWithoutContractNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ClientCreateWithoutContractsInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FamilyCreateNestedManyWithoutClientInput
    yogaClasses?: YogaAdultStudentCreateNestedManyWithoutStudentInput
    presences?: PresenceCreateNestedManyWithoutAdultStudentInput
    transactions?: TransactionCreateNestedManyWithoutClientInput
    notifications?: NotificationCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutContractsInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FamilyUncheckedCreateNestedManyWithoutClientInput
    yogaClasses?: YogaAdultStudentUncheckedCreateNestedManyWithoutStudentInput
    presences?: PresenceUncheckedCreateNestedManyWithoutAdultStudentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutClientInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutContractsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutContractsInput, ClientUncheckedCreateWithoutContractsInput>
  }

  export type ContractCreateWithoutClientsInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    photographers?: ContractPhotographerCreateNestedManyWithoutContractInput
    videomaker?: UserCreateNestedOneWithoutVideoContractsInput
    package: PackageCreateNestedOneWithoutContractsInput
    transactions?: TransactionCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutClientsInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    videomakerId?: string | null
    packageId: number
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    photographers?: ContractPhotographerUncheckedCreateNestedManyWithoutContractInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutClientsInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutClientsInput, ContractUncheckedCreateWithoutClientsInput>
  }

  export type ClientUpsertWithoutContractsInput = {
    update: XOR<ClientUpdateWithoutContractsInput, ClientUncheckedUpdateWithoutContractsInput>
    create: XOR<ClientCreateWithoutContractsInput, ClientUncheckedCreateWithoutContractsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutContractsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutContractsInput, ClientUncheckedUpdateWithoutContractsInput>
  }

  export type ClientUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FamilyUpdateManyWithoutClientNestedInput
    yogaClasses?: YogaAdultStudentUpdateManyWithoutStudentNestedInput
    presences?: PresenceUpdateManyWithoutAdultStudentNestedInput
    transactions?: TransactionUpdateManyWithoutClientNestedInput
    notifications?: NotificationUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FamilyUncheckedUpdateManyWithoutClientNestedInput
    yogaClasses?: YogaAdultStudentUncheckedUpdateManyWithoutStudentNestedInput
    presences?: PresenceUncheckedUpdateManyWithoutAdultStudentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutClientNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ContractUpsertWithoutClientsInput = {
    update: XOR<ContractUpdateWithoutClientsInput, ContractUncheckedUpdateWithoutClientsInput>
    create: XOR<ContractCreateWithoutClientsInput, ContractUncheckedCreateWithoutClientsInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutClientsInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutClientsInput, ContractUncheckedUpdateWithoutClientsInput>
  }

  export type ContractUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photographers?: ContractPhotographerUpdateManyWithoutContractNestedInput
    videomaker?: UserUpdateOneWithoutVideoContractsNestedInput
    package?: PackageUpdateOneRequiredWithoutContractsNestedInput
    transactions?: TransactionUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videomakerId?: NullableStringFieldUpdateOperationsInput | string | null
    packageId?: IntFieldUpdateOperationsInput | number
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photographers?: ContractPhotographerUncheckedUpdateManyWithoutContractNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ClientCreateWithoutNotificationsInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FamilyCreateNestedManyWithoutClientInput
    contracts?: ClientContractCreateNestedManyWithoutClientInput
    yogaClasses?: YogaAdultStudentCreateNestedManyWithoutStudentInput
    presences?: PresenceCreateNestedManyWithoutAdultStudentInput
    transactions?: TransactionCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    email: string
    address: string
    neighborhood: string
    city: string
    cpf: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FamilyUncheckedCreateNestedManyWithoutClientInput
    contracts?: ClientContractUncheckedCreateNestedManyWithoutClientInput
    yogaClasses?: YogaAdultStudentUncheckedCreateNestedManyWithoutStudentInput
    presences?: PresenceUncheckedCreateNestedManyWithoutAdultStudentInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutNotificationsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutNotificationsInput, ClientUncheckedCreateWithoutNotificationsInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    roles?: UserRoleCreateNestedManyWithoutUserInput
    classes?: YogaClassCreateNestedManyWithoutInstructorInput
    videoContracts?: ContractCreateNestedManyWithoutVideomakerInput
    photoContracts?: ContractPhotographerCreateNestedManyWithoutPhotographerInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    email: string
    password: string
    pictureUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    classes?: YogaClassUncheckedCreateNestedManyWithoutInstructorInput
    videoContracts?: ContractUncheckedCreateNestedManyWithoutVideomakerInput
    photoContracts?: ContractPhotographerUncheckedCreateNestedManyWithoutPhotographerInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type ClientUpsertWithoutNotificationsInput = {
    update: XOR<ClientUpdateWithoutNotificationsInput, ClientUncheckedUpdateWithoutNotificationsInput>
    create: XOR<ClientCreateWithoutNotificationsInput, ClientUncheckedCreateWithoutNotificationsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutNotificationsInput, ClientUncheckedUpdateWithoutNotificationsInput>
  }

  export type ClientUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FamilyUpdateManyWithoutClientNestedInput
    contracts?: ClientContractUpdateManyWithoutClientNestedInput
    yogaClasses?: YogaAdultStudentUpdateManyWithoutStudentNestedInput
    presences?: PresenceUpdateManyWithoutAdultStudentNestedInput
    transactions?: TransactionUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FamilyUncheckedUpdateManyWithoutClientNestedInput
    contracts?: ClientContractUncheckedUpdateManyWithoutClientNestedInput
    yogaClasses?: YogaAdultStudentUncheckedUpdateManyWithoutStudentNestedInput
    presences?: PresenceUncheckedUpdateManyWithoutAdultStudentNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutClientNestedInput
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    classes?: YogaClassUpdateManyWithoutInstructorNestedInput
    videoContracts?: ContractUpdateManyWithoutVideomakerNestedInput
    photoContracts?: ContractPhotographerUpdateManyWithoutPhotographerNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    classes?: YogaClassUncheckedUpdateManyWithoutInstructorNestedInput
    videoContracts?: ContractUncheckedUpdateManyWithoutVideomakerNestedInput
    photoContracts?: ContractPhotographerUncheckedUpdateManyWithoutPhotographerNestedInput
  }

  export type ContractCreateWithoutPackageInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientContractCreateNestedManyWithoutContractInput
    photographers?: ContractPhotographerCreateNestedManyWithoutContractInput
    videomaker?: UserCreateNestedOneWithoutVideoContractsInput
    transactions?: TransactionCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutPackageInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    videomakerId?: string | null
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientContractUncheckedCreateNestedManyWithoutContractInput
    photographers?: ContractPhotographerUncheckedCreateNestedManyWithoutContractInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutPackageInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutPackageInput, ContractUncheckedCreateWithoutPackageInput>
  }

  export type ContractCreateManyPackageInputEnvelope = {
    data: ContractCreateManyPackageInput | ContractCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type ContractUpsertWithWhereUniqueWithoutPackageInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutPackageInput, ContractUncheckedUpdateWithoutPackageInput>
    create: XOR<ContractCreateWithoutPackageInput, ContractUncheckedCreateWithoutPackageInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutPackageInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutPackageInput, ContractUncheckedUpdateWithoutPackageInput>
  }

  export type ContractUpdateManyWithWhereWithoutPackageInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutPackageInput>
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    title: string
    message: string
    isRead?: boolean
    type: $Enums.NotificationType
    clientId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleCreateManyUserInput = {
    roleId: string
  }

  export type YogaClassCreateManyInstructorInput = {
    id?: number
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    locationId: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractCreateManyVideomakerInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    packageId: number
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractPhotographerCreateManyPhotographerInput = {
    contractId: string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUpdateWithoutUserInput = {
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutUserInput = {
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyWithoutUserInput = {
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type YogaClassUpdateWithoutInstructorInput = {
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: LocationUpdateOneRequiredWithoutClassesNestedInput
    transactions?: TransactionUpdateManyWithoutYogaClassNestedInput
    adultStudents?: YogaAdultStudentUpdateManyWithoutYogaClassNestedInput
    childStudents?: YogaChildStudentUpdateManyWithoutYogaClassNestedInput
    rollCall?: RollCallUpdateOneWithoutClassNestedInput
  }

  export type YogaClassUncheckedUpdateWithoutInstructorInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutYogaClassNestedInput
    adultStudents?: YogaAdultStudentUncheckedUpdateManyWithoutYogaClassNestedInput
    childStudents?: YogaChildStudentUncheckedUpdateManyWithoutYogaClassNestedInput
    rollCall?: RollCallUncheckedUpdateOneWithoutClassNestedInput
  }

  export type YogaClassUncheckedUpdateManyWithoutInstructorInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUpdateWithoutVideomakerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientContractUpdateManyWithoutContractNestedInput
    photographers?: ContractPhotographerUpdateManyWithoutContractNestedInput
    package?: PackageUpdateOneRequiredWithoutContractsNestedInput
    transactions?: TransactionUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutVideomakerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    packageId?: IntFieldUpdateOperationsInput | number
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientContractUncheckedUpdateManyWithoutContractNestedInput
    photographers?: ContractPhotographerUncheckedUpdateManyWithoutContractNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutVideomakerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    packageId?: IntFieldUpdateOperationsInput | number
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractPhotographerUpdateWithoutPhotographerInput = {
    contract?: ContractUpdateOneRequiredWithoutPhotographersNestedInput
  }

  export type ContractPhotographerUncheckedUpdateWithoutPhotographerInput = {
    contractId?: StringFieldUpdateOperationsInput | string
  }

  export type ContractPhotographerUncheckedUpdateManyWithoutPhotographerInput = {
    contractId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleCreateManyRoleInput = {
    userId: string
  }

  export type UserRoleUpdateWithoutRoleInput = {
    user?: UserUpdateOneRequiredWithoutRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutRoleInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FamilyCreateManyClientInput = {
    childId: string
  }

  export type ClientContractCreateManyClientInput = {
    contractId: string
    assignedAt?: Date | string
  }

  export type YogaAdultStudentCreateManyStudentInput = {
    yogaClassId: number
  }

  export type PresenceCreateManyAdultStudentInput = {
    id?: number
    studentType: $Enums.StudentType
    rollCallId: number
    childStudentId?: string | null
    isPresent: boolean
    absenceReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyClientInput = {
    id?: string
    amount: number
    date?: Date | string
    description?: string | null
    method: $Enums.PaymentMethod
    isPaid?: boolean
    contractId?: string | null
    yogaClassId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyClientInput = {
    id?: string
    title: string
    message: string
    isRead?: boolean
    type: $Enums.NotificationType
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FamilyUpdateWithoutClientInput = {
    child?: ChildUpdateOneRequiredWithoutParentsNestedInput
  }

  export type FamilyUncheckedUpdateWithoutClientInput = {
    childId?: StringFieldUpdateOperationsInput | string
  }

  export type FamilyUncheckedUpdateManyWithoutClientInput = {
    childId?: StringFieldUpdateOperationsInput | string
  }

  export type ClientContractUpdateWithoutClientInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutClientsNestedInput
  }

  export type ClientContractUncheckedUpdateWithoutClientInput = {
    contractId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientContractUncheckedUpdateManyWithoutClientInput = {
    contractId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YogaAdultStudentUpdateWithoutStudentInput = {
    yogaClass?: YogaClassUpdateOneRequiredWithoutAdultStudentsNestedInput
  }

  export type YogaAdultStudentUncheckedUpdateWithoutStudentInput = {
    yogaClassId?: IntFieldUpdateOperationsInput | number
  }

  export type YogaAdultStudentUncheckedUpdateManyWithoutStudentInput = {
    yogaClassId?: IntFieldUpdateOperationsInput | number
  }

  export type PresenceUpdateWithoutAdultStudentInput = {
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rollCall?: RollCallUpdateOneRequiredWithoutPresencesNestedInput
    childStudent?: ChildUpdateOneWithoutPresencesNestedInput
  }

  export type PresenceUncheckedUpdateWithoutAdultStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    rollCallId?: IntFieldUpdateOperationsInput | number
    childStudentId?: NullableStringFieldUpdateOperationsInput | string | null
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceUncheckedUpdateManyWithoutAdultStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    rollCallId?: IntFieldUpdateOperationsInput | number
    childStudentId?: NullableStringFieldUpdateOperationsInput | string | null
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneWithoutTransactionsNestedInput
    yogaClass?: YogaClassUpdateOneWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    yogaClassId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    yogaClassId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FamilyCreateManyChildInput = {
    clientId: string
  }

  export type YogaChildStudentCreateManyStudentInput = {
    yogaClassId: number
  }

  export type PresenceCreateManyChildStudentInput = {
    id?: number
    studentType: $Enums.StudentType
    rollCallId: number
    adultStudentId?: string | null
    isPresent: boolean
    absenceReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FamilyUpdateWithoutChildInput = {
    client?: ClientUpdateOneRequiredWithoutChildrenNestedInput
  }

  export type FamilyUncheckedUpdateWithoutChildInput = {
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type FamilyUncheckedUpdateManyWithoutChildInput = {
    clientId?: StringFieldUpdateOperationsInput | string
  }

  export type YogaChildStudentUpdateWithoutStudentInput = {
    yogaClass?: YogaClassUpdateOneRequiredWithoutChildStudentsNestedInput
  }

  export type YogaChildStudentUncheckedUpdateWithoutStudentInput = {
    yogaClassId?: IntFieldUpdateOperationsInput | number
  }

  export type YogaChildStudentUncheckedUpdateManyWithoutStudentInput = {
    yogaClassId?: IntFieldUpdateOperationsInput | number
  }

  export type PresenceUpdateWithoutChildStudentInput = {
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rollCall?: RollCallUpdateOneRequiredWithoutPresencesNestedInput
    adultStudent?: ClientUpdateOneWithoutPresencesNestedInput
  }

  export type PresenceUncheckedUpdateWithoutChildStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    rollCallId?: IntFieldUpdateOperationsInput | number
    adultStudentId?: NullableStringFieldUpdateOperationsInput | string | null
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceUncheckedUpdateManyWithoutChildStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    rollCallId?: IntFieldUpdateOperationsInput | number
    adultStudentId?: NullableStringFieldUpdateOperationsInput | string | null
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyYogaClassInput = {
    id?: string
    amount: number
    date?: Date | string
    description?: string | null
    method: $Enums.PaymentMethod
    isPaid?: boolean
    contractId?: string | null
    clientId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YogaAdultStudentCreateManyYogaClassInput = {
    studentId: string
  }

  export type YogaChildStudentCreateManyYogaClassInput = {
    studentId: string
  }

  export type TransactionUpdateWithoutYogaClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneWithoutTransactionsNestedInput
    client?: ClientUpdateOneWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutYogaClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutYogaClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YogaAdultStudentUpdateWithoutYogaClassInput = {
    student?: ClientUpdateOneRequiredWithoutYogaClassesNestedInput
  }

  export type YogaAdultStudentUncheckedUpdateWithoutYogaClassInput = {
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type YogaAdultStudentUncheckedUpdateManyWithoutYogaClassInput = {
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type YogaChildStudentUpdateWithoutYogaClassInput = {
    student?: ChildUpdateOneRequiredWithoutYogaClassesNestedInput
  }

  export type YogaChildStudentUncheckedUpdateWithoutYogaClassInput = {
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type YogaChildStudentUncheckedUpdateManyWithoutYogaClassInput = {
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type YogaClassCreateManyLocationInput = {
    id?: number
    type: $Enums.YogaClassType
    status: $Enums.YogaClassStatus
    date: Date | string
    instructorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YogaClassUpdateWithoutLocationInput = {
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUpdateManyWithoutYogaClassNestedInput
    instructor?: UserUpdateOneRequiredWithoutClassesNestedInput
    adultStudents?: YogaAdultStudentUpdateManyWithoutYogaClassNestedInput
    childStudents?: YogaChildStudentUpdateManyWithoutYogaClassNestedInput
    rollCall?: RollCallUpdateOneWithoutClassNestedInput
  }

  export type YogaClassUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    instructorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutYogaClassNestedInput
    adultStudents?: YogaAdultStudentUncheckedUpdateManyWithoutYogaClassNestedInput
    childStudents?: YogaChildStudentUncheckedUpdateManyWithoutYogaClassNestedInput
    rollCall?: RollCallUncheckedUpdateOneWithoutClassNestedInput
  }

  export type YogaClassUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumYogaClassTypeFieldUpdateOperationsInput | $Enums.YogaClassType
    status?: EnumYogaClassStatusFieldUpdateOperationsInput | $Enums.YogaClassStatus
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    instructorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceCreateManyRollCallInput = {
    id?: number
    studentType: $Enums.StudentType
    adultStudentId?: string | null
    childStudentId?: string | null
    isPresent: boolean
    absenceReason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PresenceUpdateWithoutRollCallInput = {
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adultStudent?: ClientUpdateOneWithoutPresencesNestedInput
    childStudent?: ChildUpdateOneWithoutPresencesNestedInput
  }

  export type PresenceUncheckedUpdateWithoutRollCallInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    adultStudentId?: NullableStringFieldUpdateOperationsInput | string | null
    childStudentId?: NullableStringFieldUpdateOperationsInput | string | null
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PresenceUncheckedUpdateManyWithoutRollCallInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentType?: EnumStudentTypeFieldUpdateOperationsInput | $Enums.StudentType
    adultStudentId?: NullableStringFieldUpdateOperationsInput | string | null
    childStudentId?: NullableStringFieldUpdateOperationsInput | string | null
    isPresent?: BoolFieldUpdateOperationsInput | boolean
    absenceReason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientContractCreateManyContractInput = {
    clientId: string
    assignedAt?: Date | string
  }

  export type ContractPhotographerCreateManyContractInput = {
    photographerId: string
  }

  export type TransactionCreateManyContractInput = {
    id?: string
    amount: number
    date?: Date | string
    description?: string | null
    method: $Enums.PaymentMethod
    isPaid?: boolean
    yogaClassId?: number | null
    clientId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientContractUpdateWithoutContractInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutContractsNestedInput
  }

  export type ClientContractUncheckedUpdateWithoutContractInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientContractUncheckedUpdateManyWithoutContractInput = {
    clientId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractPhotographerUpdateWithoutContractInput = {
    photographer?: UserUpdateOneRequiredWithoutPhotoContractsNestedInput
  }

  export type ContractPhotographerUncheckedUpdateWithoutContractInput = {
    photographerId?: StringFieldUpdateOperationsInput | string
  }

  export type ContractPhotographerUncheckedUpdateManyWithoutContractInput = {
    photographerId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    yogaClass?: YogaClassUpdateOneWithoutTransactionsNestedInput
    client?: ClientUpdateOneWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    yogaClassId?: NullableIntFieldUpdateOperationsInput | number | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    yogaClassId?: NullableIntFieldUpdateOperationsInput | number | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractCreateManyPackageInput = {
    id?: string
    name: string
    type: $Enums.ContractType
    address: string
    neighborhood: string
    city: string
    date: Date | string
    eventStartTime: Date | string
    commutingFee: number
    discountPercentage: number
    paymentDueDate: Date | string
    observations: string
    fileUrl?: string | null
    videomakerId?: string | null
    isSigned?: $Enums.SignatureStatus
    isPaid?: $Enums.PaymentStatus
    generalStatus?: $Enums.GeneralStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientContractUpdateManyWithoutContractNestedInput
    photographers?: ContractPhotographerUpdateManyWithoutContractNestedInput
    videomaker?: UserUpdateOneWithoutVideoContractsNestedInput
    transactions?: TransactionUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videomakerId?: NullableStringFieldUpdateOperationsInput | string | null
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientContractUncheckedUpdateManyWithoutContractNestedInput
    photographers?: ContractPhotographerUncheckedUpdateManyWithoutContractNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    address?: StringFieldUpdateOperationsInput | string
    neighborhood?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    eventStartTime?: DateTimeFieldUpdateOperationsInput | Date | string
    commutingFee?: FloatFieldUpdateOperationsInput | number
    discountPercentage?: FloatFieldUpdateOperationsInput | number
    paymentDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    observations?: StringFieldUpdateOperationsInput | string
    fileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    videomakerId?: NullableStringFieldUpdateOperationsInput | string | null
    isSigned?: EnumSignatureStatusFieldUpdateOperationsInput | $Enums.SignatureStatus
    isPaid?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    generalStatus?: EnumGeneralStatusFieldUpdateOperationsInput | $Enums.GeneralStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}